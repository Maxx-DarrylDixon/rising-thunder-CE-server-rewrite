// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbmatch/user.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rising_Thunder_Server_CS.Protobufs.Tbmatch {

  /// <summary>Holder for reflection information generated from tbmatch/user.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for tbmatch/user.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ0Ym1hdGNoL3VzZXIucHJvdG8SB3RibWF0Y2gaE3RibWF0Y2gvbWF0Y2gu",
            "cHJvdG8inQQKDVBsYXllclNlc3Npb24SIwoFc3RhdGUYASABKA4yFC50Ym1h",
            "dGNoLlBsYXllclN0YXRlEjgKDGFjdGl2ZV9tYXRjaBgCIAEoCzIiLnRibWF0",
            "Y2guUGxheWVyU2Vzc2lvbi5BY3RpdmVNYXRjaBIpCgRtZW51GGUgASgLMhsu",
            "dGJtYXRjaC5QbGF5ZXJTZXNzaW9uLk1lbnUSKwoFcXVldWUYZiABKAsyHC50",
            "Ym1hdGNoLlBsYXllclNlc3Npb24uUXVldWUSKwoFbG9iYnkYZyABKAsyHC50",
            "Ym1hdGNoLlBsYXllclNlc3Npb24uTG9iYnkaMgoLQWN0aXZlTWF0Y2gSEAoI",
            "bWF0Y2hfaWQYASABKAMSEQoJc3BlY3RhdG9yGAIgASgIGpMBCgRNZW51EjIK",
            "BnNjcmVlbhgBIAEoDjIiLnRibWF0Y2guUGxheWVyU2Vzc2lvbi5NZW51LlNj",
            "cmVlbiJXCgZTY3JlZW4SDwoLU0NSRUVOX1pFUk8QABILCgdTVU1NQVJZEAES",
            "EAoMUExBWUVSX1NUQVRTEAISEgoOUExBWUVSX0hJU1RPUlkQAxIJCgVTVE9S",
            "RRAEGkMKBVF1ZXVlEiYKCm1hdGNoX3R5cGUYASABKA4yEi50Ym1hdGNoLk1h",
            "dGNoVHlwZRISCgpzdGFydF90aW1lGAIgASgDGhkKBUxvYmJ5EhAKCGxvYmJ5",
            "X2lkGAEgASgDKk0KC1BsYXllclN0YXRlEhUKEVBMQVlFUl9TVEFURV9aRVJP",
            "EAASCwoHUFNfTUVOVRBlEgwKCFBTX1FVRVVFEGYSDAoIUFNfTE9CQlkQZ2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Parser, new[]{ "State", "ActiveMatch", "Menu", "Queue", "Lobby" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.ActiveMatch), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.ActiveMatch.Parser, new[]{ "MatchId", "Spectator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu.Parser, new[]{ "Screen" }, null, new[]{ typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu.Types.Screen) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Queue), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Queue.Parser, new[]{ "MatchType", "StartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Lobby), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Lobby.Parser, new[]{ "LobbyId" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayerState {
    [pbr::OriginalName("PLAYER_STATE_ZERO")] Zero = 0,
    [pbr::OriginalName("PS_MENU")] PsMenu = 101,
    [pbr::OriginalName("PS_QUEUE")] PsQueue = 102,
    [pbr::OriginalName("PS_LOBBY")] PsLobby = 103,
  }

  #endregion

  #region Messages
  public sealed partial class PlayerSession : pb::IMessage<PlayerSession> {
    private static readonly pb::MessageParser<PlayerSession> _parser = new pb::MessageParser<PlayerSession>(() => new PlayerSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSession(PlayerSession other) : this() {
      state_ = other.state_;
      ActiveMatch = other.activeMatch_ != null ? other.ActiveMatch.Clone() : null;
      Menu = other.menu_ != null ? other.Menu.Clone() : null;
      Queue = other.queue_ != null ? other.Queue.Clone() : null;
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSession Clone() {
      return new PlayerSession(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "active_match" field.</summary>
    public const int ActiveMatchFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.ActiveMatch activeMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.ActiveMatch ActiveMatch {
      get { return activeMatch_; }
      set {
        activeMatch_ = value;
      }
    }

    /// <summary>Field number for the "menu" field.</summary>
    public const int MenuFieldNumber = 101;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu menu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu Menu {
      get { return menu_; }
      set {
        menu_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 102;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Queue queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Queue Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 103;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Lobby lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Lobby Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!object.Equals(ActiveMatch, other.ActiveMatch)) return false;
      if (!object.Equals(Menu, other.Menu)) return false;
      if (!object.Equals(Queue, other.Queue)) return false;
      if (!object.Equals(Lobby, other.Lobby)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (activeMatch_ != null) hash ^= ActiveMatch.GetHashCode();
      if (menu_ != null) hash ^= Menu.GetHashCode();
      if (queue_ != null) hash ^= Queue.GetHashCode();
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (activeMatch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActiveMatch);
      }
      if (menu_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Menu);
      }
      if (queue_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Queue);
      }
      if (lobby_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Lobby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (activeMatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveMatch);
      }
      if (menu_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Menu);
      }
      if (queue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Queue);
      }
      if (lobby_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSession other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.activeMatch_ != null) {
        if (activeMatch_ == null) {
          activeMatch_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.ActiveMatch();
        }
        ActiveMatch.MergeFrom(other.ActiveMatch);
      }
      if (other.menu_ != null) {
        if (menu_ == null) {
          menu_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu();
        }
        Menu.MergeFrom(other.Menu);
      }
      if (other.queue_ != null) {
        if (queue_ == null) {
          queue_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Queue();
        }
        Queue.MergeFrom(other.Queue);
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Lobby();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            state_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerState) input.ReadEnum();
            break;
          }
          case 18: {
            if (activeMatch_ == null) {
              activeMatch_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.ActiveMatch();
            }
            input.ReadMessage(activeMatch_);
            break;
          }
          case 810: {
            if (menu_ == null) {
              menu_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu();
            }
            input.ReadMessage(menu_);
            break;
          }
          case 818: {
            if (queue_ == null) {
              queue_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Queue();
            }
            input.ReadMessage(queue_);
            break;
          }
          case 826: {
            if (lobby_ == null) {
              lobby_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Lobby();
            }
            input.ReadMessage(lobby_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerSession message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ActiveMatch : pb::IMessage<ActiveMatch> {
        private static readonly pb::MessageParser<ActiveMatch> _parser = new pb::MessageParser<ActiveMatch>(() => new ActiveMatch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActiveMatch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveMatch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveMatch(ActiveMatch other) : this() {
          matchId_ = other.matchId_;
          spectator_ = other.spectator_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveMatch Clone() {
          return new ActiveMatch(this);
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private long matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchId {
          get { return matchId_; }
          set {
            matchId_ = value;
          }
        }

        /// <summary>Field number for the "spectator" field.</summary>
        public const int SpectatorFieldNumber = 2;
        private bool spectator_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Spectator {
          get { return spectator_; }
          set {
            spectator_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ActiveMatch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActiveMatch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MatchId != other.MatchId) return false;
          if (Spectator != other.Spectator) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MatchId != 0L) hash ^= MatchId.GetHashCode();
          if (Spectator != false) hash ^= Spectator.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MatchId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(MatchId);
          }
          if (Spectator != false) {
            output.WriteRawTag(16);
            output.WriteBool(Spectator);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MatchId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
          }
          if (Spectator != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActiveMatch other) {
          if (other == null) {
            return;
          }
          if (other.MatchId != 0L) {
            MatchId = other.MatchId;
          }
          if (other.Spectator != false) {
            Spectator = other.Spectator;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MatchId = input.ReadInt64();
                break;
              }
              case 16: {
                Spectator = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Menu : pb::IMessage<Menu> {
        private static readonly pb::MessageParser<Menu> _parser = new pb::MessageParser<Menu>(() => new Menu());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Menu> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Menu() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Menu(Menu other) : this() {
          screen_ = other.screen_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Menu Clone() {
          return new Menu(this);
        }

        /// <summary>Field number for the "screen" field.</summary>
        public const int ScreenFieldNumber = 1;
        private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu.Types.Screen screen_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu.Types.Screen Screen {
          get { return screen_; }
          set {
            screen_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Menu);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Menu other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Screen != other.Screen) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Screen != 0) hash ^= Screen.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Screen != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Screen);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Screen != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Screen);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Menu other) {
          if (other == null) {
            return;
          }
          if (other.Screen != 0) {
            Screen = other.Screen;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                screen_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Types.Menu.Types.Screen) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Menu message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Screen {
            [pbr::OriginalName("SCREEN_ZERO")] Zero = 0,
            [pbr::OriginalName("SUMMARY")] Summary = 1,
            [pbr::OriginalName("PLAYER_STATS")] PlayerStats = 2,
            [pbr::OriginalName("PLAYER_HISTORY")] PlayerHistory = 3,
            [pbr::OriginalName("STORE")] Store = 4,
          }

        }
        #endregion

      }

      public sealed partial class Queue : pb::IMessage<Queue> {
        private static readonly pb::MessageParser<Queue> _parser = new pb::MessageParser<Queue>(() => new Queue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Queue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Queue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Queue(Queue other) : this() {
          matchType_ = other.matchType_;
          startTime_ = other.startTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Queue Clone() {
          return new Queue(this);
        }

        /// <summary>Field number for the "match_type" field.</summary>
        public const int MatchTypeFieldNumber = 1;
        private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType matchType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType MatchType {
          get { return matchType_; }
          set {
            matchType_ = value;
          }
        }

        /// <summary>Field number for the "start_time" field.</summary>
        public const int StartTimeFieldNumber = 2;
        private long startTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StartTime {
          get { return startTime_; }
          set {
            startTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Queue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Queue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MatchType != other.MatchType) return false;
          if (StartTime != other.StartTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MatchType != 0) hash ^= MatchType.GetHashCode();
          if (StartTime != 0L) hash ^= StartTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MatchType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) MatchType);
          }
          if (StartTime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(StartTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MatchType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
          }
          if (StartTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Queue other) {
          if (other == null) {
            return;
          }
          if (other.MatchType != 0) {
            MatchType = other.MatchType;
          }
          if (other.StartTime != 0L) {
            StartTime = other.StartTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                matchType_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
                break;
              }
              case 16: {
                StartTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Lobby : pb::IMessage<Lobby> {
        private static readonly pb::MessageParser<Lobby> _parser = new pb::MessageParser<Lobby>(() => new Lobby());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Lobby> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerSession.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lobby() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lobby(Lobby other) : this() {
          lobbyId_ = other.lobbyId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lobby Clone() {
          return new Lobby(this);
        }

        /// <summary>Field number for the "lobby_id" field.</summary>
        public const int LobbyIdFieldNumber = 1;
        private long lobbyId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LobbyId {
          get { return lobbyId_; }
          set {
            lobbyId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Lobby);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Lobby other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LobbyId != other.LobbyId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LobbyId != 0L) hash ^= LobbyId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LobbyId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(LobbyId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LobbyId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Lobby other) {
          if (other == null) {
            return;
          }
          if (other.LobbyId != 0L) {
            LobbyId = other.LobbyId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                LobbyId = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
