// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbmatch/event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tbmatch {

  /// <summary>Holder for reflection information generated from tbmatch/event.proto</summary>
  public static partial class EventReflection {

    #region Descriptor
    /// <summary>File descriptor for tbmatch/event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0Ym1hdGNoL2V2ZW50LnByb3RvEgd0Ym1hdGNoGhF0YnJwYy90YnJwYy5w",
            "cm90bxoTdGJtYXRjaC9tYXRjaC5wcm90bxoTdGJtYXRjaC9sb2JieS5wcm90",
            "byIUChJGaWx0ZXJDaGFuZ2VkRXZlbnQi/wIKFldhaXRNYXRjaFByb2dyZXNz",
            "RXZlbnQSNgoGc3RhdHVzGAEgASgOMiYudGJtYXRjaC5XYWl0TWF0Y2hQcm9n",
            "cmVzc0V2ZW50LlN0YXR1cxIQCghtYXRjaF9pZBgCIAEoAxIjCgZjb25maWcY",
            "AyABKAsyEy50Ym1hdGNoLkdhbWVDb25maWcSLQoIZW5kcG9pbnQYBCABKAsy",
            "Gy50Ym1hdGNoLkdhbWVFbmRwb2ludENvbmZpZxIVCg11c2Vyc193YWl0aW5n",
            "GBUgASgFEiEKGV9fZGVwcmVjYXRlZF91c2Vyc19vbmxpbmUYFCABKAUijAEK",
            "BlN0YXR1cxIPCgtTVEFUVVNfWkVSTxAAEgsKB1dBSVRJTkcQARILCgdUSU1F",
            "T1VUEAISCQoFTUFUQ0gQAxIKCgZDQU5DRUwQBBIWChJQSU5HX1RFU1RfUkVR",
            "VUlSRUQQBRIQCgxERU5ZX1ZFUlNJT04QBhIWChJTRVJWRVJfTUFJTlRFTkFO",
            "Q0UQByJ6ChFNYXRjaENyZWF0ZWRFdmVudBIoCgtnYW1lX2NvbmZpZxgDIAEo",
            "CzITLnRibWF0Y2guR2FtZUNvbmZpZxIdChVfX2RlcHJlY2F0ZWRfbWF0Y2hf",
            "aWQYASABKAMSHAoUX19kZXByZWNhdGVkX3VzZXJfaWQYAiADKAMiJwoTTWF0",
            "Y2hDb25uZWN0ZWRFdmVudBIQCghtYXRjaF9pZBgBIAEoAyJjCg5HYW1lQmVn",
            "aW5FdmVudBIQCghtYXRjaF9pZBgBIAEoAxIqCgluZXh0X2dhbWUYAiABKAsy",
            "Fy50Ym1hdGNoLk5leHRHYW1lQ29uZmlnEhMKC3NlcXVlbmNlX2lkGAMgASgF",
            "ImYKDkdhbWVJbnB1dEV2ZW50EhAKCG1hdGNoX2lkGAEgASgDEhMKC3N0YXJ0",
            "X2ZyYW1lGAIgASgFEhAKCG51bV9iaXRzGAMgASgFEgwKBGJpdHMYBCABKAwS",
            "DQoFZmluYWwYBSABKAgiWwoNR2FtZU92ZXJFdmVudBIQCghtYXRjaF9pZBgB",
            "IAEoAxIjCgZyZXBvcnQYAiABKAsyEy50Ym1hdGNoLkdhbWVSZXBvcnQSEwoL",
            "c2VxdWVuY2VfaWQYAyABKAUiJwoTTWF0Y2hBYmFuZG9uZWRFdmVudBIQCght",
            "YXRjaF9pZBgBIAEoAyK3AQoOTWF0Y2hPdmVyRXZlbnQSEAoIbWF0Y2hfaWQY",
            "ASABKAMSLgoGc3RhdHVzGAIgASgOMh4udGJtYXRjaC5NYXRjaE92ZXJFdmVu",
            "dC5TdGF0dXMSEAoId2luX3Nsb3QYAyABKAUSDAoEZHJhdxgEIAEoCCJDCgZT",
            "dGF0dXMSDwoLU1RBVFVTX1pFUk8QABINCglBQkFORE9ORUQQARIOCgpESVND",
            "T05ORUNUEAISCQoFVkFMSUQQAyKMAQoRTWF0Y2hPdXRjb21lRXZlbnQSJAoG",
            "cmVzdWx0GAEgASgLMhQudGJtYXRjaC5NYXRjaFJlc3VsdBIlCgNleHAYAiAB",
            "KAsyGC50Ym1hdGNoLk1hdGNoRXhwZXJpZW5jZRIqCgxzdGF0c191cGRhdGUY",
            "AyABKAsyFC50Ym1hdGNoLlBsYXllclN0YXRzIhcKFVVzZXJDaGVja05ldHdv",
            "cmtFdmVudCIvChZVc2VyU2Vzc2lvbkNsb3NlZEV2ZW50EhUKDXJlYXNvbl9t",
            "c2dfaWQYASABKAkiZAoVUGluZ1Rlc3RDb21wbGV0ZUV2ZW50EhIKCmF2Z19y",
            "dHRfbXMYASABKAUSEgoKbWF4X3J0dF9tcxgCIAEoBRISCgpsb3NzX3JhdGlv",
            "GAMgASgCEg8KB3N1Y2Nlc3MYBCABKAgiLwoOTG9iYnlKb2luRXZlbnQSHQoF",
            "bG9iYnkYASABKAsyDi50Ym1hdGNoLkxvYmJ5IpIBCg9Mb2JieUxlYXZlRXZl",
            "bnQSEAoIbG9iYnlfaWQYASABKAMSLwoGcmVhc29uGAIgASgOMh8udGJtYXRj",
            "aC5Mb2JieUxlYXZlRXZlbnQuUmVhc29uIjwKBlJlYXNvbhIPCgtSRUFTT05f",
            "WkVSTxAAEggKBExFRlQQARIKCgZCQU5ORUQQAhILCgdSRU1PVkVEEAMi3wEK",
            "EExvYmJ5VXBkYXRlRXZlbnQSEAoIbG9iYnlfaWQYASABKAMSJAoGdXBkYXRl",
            "GAIgAygLMhQudGJtYXRjaC5Mb2JieU1lbWJlchIPCgdyZW1vdmVkGAMgAygD",
            "EiIKBXN0YXRlGAQgASgOMhMudGJtYXRjaC5Mb2JieVN0YXRlEigKC2dhbWVf",
            "Y29uZmlnGAUgASgLMhMudGJtYXRjaC5HYW1lQ29uZmlnEg0KBXF1ZXVlGAYg",
            "AygDEiUKB29wdGlvbnMYByABKAsyFC50Ym1hdGNoLkdhbWVPcHRpb25zIo4B",
            "ChRMb2JieU1hdGNoU3RhcnRFdmVudBIQCghsb2JieV9pZBgBIAEoAxIQCght",
            "YXRjaF9pZBgCIAEoAxIjCgZjb25maWcYAyABKAsyEy50Ym1hdGNoLkdhbWVD",
            "b25maWcSLQoIZW5kcG9pbnQYBCABKAsyGy50Ym1hdGNoLkdhbWVFbmRwb2lu",
            "dENvbmZpZyLTCgoFRXZlbnQSEAoIZXZlbnRfaWQYASABKAMSIQoEdHlwZRgC",
            "IAEoDjITLnRibWF0Y2guRXZlbnQuVHlwZRIWCg50aW1lc3RhbXBfbXNlYxgD",
            "IAEoAxIzCg5maWx0ZXJfY2hhbmdlZBgNIAEoCzIbLnRibWF0Y2guRmlsdGVy",
            "Q2hhbmdlZEV2ZW50EjwKE3dhaXRfbWF0Y2hfcHJvZ3Jlc3MYDiABKAsyHy50",
            "Ym1hdGNoLldhaXRNYXRjaFByb2dyZXNzRXZlbnQSMQoNbWF0Y2hfY3JlYXRl",
            "ZBgPIAEoCzIaLnRibWF0Y2guTWF0Y2hDcmVhdGVkRXZlbnQSMQoNbWF0Y2hf",
            "b3V0Y29tZRgSIAEoCzIaLnRibWF0Y2guTWF0Y2hPdXRjb21lRXZlbnQSNQoP",
            "bWF0Y2hfYWJhbmRvbmVkGBUgASgLMhwudGJtYXRjaC5NYXRjaEFiYW5kb25l",
            "ZEV2ZW50EjUKD21hdGNoX2Nvbm5lY3RlZBgXIAEoCzIcLnRibWF0Y2guTWF0",
            "Y2hDb25uZWN0ZWRFdmVudBIrCgptYXRjaF9vdmVyGBggASgLMhcudGJtYXRj",
            "aC5NYXRjaE92ZXJFdmVudBIrCgpnYW1lX2JlZ2luGBkgASgLMhcudGJtYXRj",
            "aC5HYW1lQmVnaW5FdmVudBIrCgpnYW1lX2lucHV0GBogASgLMhcudGJtYXRj",
            "aC5HYW1lSW5wdXRFdmVudBIpCglnYW1lX292ZXIYGyABKAsyFi50Ym1hdGNo",
            "LkdhbWVPdmVyRXZlbnQSOgoSdXNlcl9jaGVja19uZXR3b3JrGB4gASgLMh4u",
            "dGJtYXRjaC5Vc2VyQ2hlY2tOZXR3b3JrRXZlbnQSPAoTdXNlcl9zZXNzaW9u",
            "X2Nsb3NlZBgfIAEoCzIfLnRibWF0Y2guVXNlclNlc3Npb25DbG9zZWRFdmVu",
            "dBI6ChJwaW5nX3Rlc3RfY29tcGxldGUYKCABKAsyHi50Ym1hdGNoLlBpbmdU",
            "ZXN0Q29tcGxldGVFdmVudBIrCgpsb2JieV9qb2luGDIgASgLMhcudGJtYXRj",
            "aC5Mb2JieUpvaW5FdmVudBItCgtsb2JieV9sZWF2ZRgzIAEoCzIYLnRibWF0",
            "Y2guTG9iYnlMZWF2ZUV2ZW50Ei8KDGxvYmJ5X3VwZGF0ZRg0IAEoCzIZLnRi",
            "bWF0Y2guTG9iYnlVcGRhdGVFdmVudBI4ChFsb2JieV9tYXRjaF9zdGFydBg1",
            "IAEoCzIdLnRibWF0Y2guTG9iYnlNYXRjaFN0YXJ0RXZlbnQihgMKBFR5cGUS",
            "DQoJRV9VTktOT1dOEAASFAoQRV9GSUxURVJfQ0hBTkdFRBANEhkKFUVfV0FJ",
            "VF9NQVRDSF9QUk9HUkVTUxAOEhMKD0VfTUFUQ0hfQ1JFQVRFRBAPEhMKD0Vf",
            "TUFUQ0hfT1VUQ09NRRASEhUKEUVfTUFUQ0hfQUJBTkRPTkVEEBUSFQoRRV9N",
            "QVRDSF9DT05ORUNURUQQFxIQCgxFX01BVENIX09WRVIQGBIQCgxFX0dBTUVf",
            "QkVHSU4QGRIQCgxFX0dBTUVfSU5QVVQQGhIPCgtFX0dBTUVfT1ZFUhAbEhgK",
            "FEVfVVNFUl9DSEVDS19ORVRXT1JLEB4SGQoVRV9VU0VSX1NFU1NJT05fQ0xP",
            "U0VEEB8SGAoURV9QSU5HX1RFU1RfQ09NUExFVEUQKBIQCgxFX0xPQkJZX0pP",
            "SU4QMhIRCg1FX0xPQkJZX0xFQVZFEDMSEgoORV9MT0JCWV9VUERBVEUQNBIX",
            "ChNFX0xPQkJZX01BVENIX1NUQVJUEDUiaAoLUXVldWVkRXZlbnQSHQoFZXZl",
            "bnQYASABKAsyDi50Ym1hdGNoLkV2ZW50EhsKE3Jlc3RyaWN0X3Nlc3Npb25f",
            "aWQYAiABKAkSHQoVZXhwaXJ5X3RpbWVzdGFtcF9tc2VjGAMgASgDIiIKD0dl",
            "dEV2ZW50UmVxdWVzdBIPCgd2ZXJzaW9uGAEgASgJIkAKDkdldEV2ZW50UmVz",
            "dWx0Eg8KB3ZlcnNpb24YASABKAkSHQoFZXZlbnQYAiADKAsyDi50Ym1hdGNo",
            "LkV2ZW50MooBCgxFdmVudFNlcnZpY2USRwoIR2V0RXZlbnQSGC50Ym1hdGNo",
            "LkdldEV2ZW50UmVxdWVzdBoXLnRibWF0Y2guR2V0RXZlbnRSZXN1bHQiCMjz",
            "GAHQ8xgBEjEKCUV2ZW50UGluZxIMLnRicnBjLkVtcHR5GgwudGJycGMuRW1w",
            "dHkiCMjzGAHQ8xgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tbrpc.TbrpcReflection.Descriptor, global::Tbmatch.MatchReflection.Descriptor, global::Tbmatch.LobbyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.FilterChangedEvent), global::Tbmatch.FilterChangedEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.WaitMatchProgressEvent), global::Tbmatch.WaitMatchProgressEvent.Parser, new[]{ "Status", "MatchId", "Config", "Endpoint", "UsersWaiting", "DeprecatedUsersOnline" }, null, new[]{ typeof(global::Tbmatch.WaitMatchProgressEvent.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.MatchCreatedEvent), global::Tbmatch.MatchCreatedEvent.Parser, new[]{ "GameConfig", "DeprecatedMatchId", "DeprecatedUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.MatchConnectedEvent), global::Tbmatch.MatchConnectedEvent.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.GameBeginEvent), global::Tbmatch.GameBeginEvent.Parser, new[]{ "MatchId", "NextGame", "SequenceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.GameInputEvent), global::Tbmatch.GameInputEvent.Parser, new[]{ "MatchId", "StartFrame", "NumBits", "Bits", "Final" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.GameOverEvent), global::Tbmatch.GameOverEvent.Parser, new[]{ "MatchId", "Report", "SequenceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.MatchAbandonedEvent), global::Tbmatch.MatchAbandonedEvent.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.MatchOverEvent), global::Tbmatch.MatchOverEvent.Parser, new[]{ "MatchId", "Status", "WinSlot", "Draw" }, null, new[]{ typeof(global::Tbmatch.MatchOverEvent.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.MatchOutcomeEvent), global::Tbmatch.MatchOutcomeEvent.Parser, new[]{ "Result", "Exp", "StatsUpdate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.UserCheckNetworkEvent), global::Tbmatch.UserCheckNetworkEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.UserSessionClosedEvent), global::Tbmatch.UserSessionClosedEvent.Parser, new[]{ "ReasonMsgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.PingTestCompleteEvent), global::Tbmatch.PingTestCompleteEvent.Parser, new[]{ "AvgRttMs", "MaxRttMs", "LossRatio", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.LobbyJoinEvent), global::Tbmatch.LobbyJoinEvent.Parser, new[]{ "Lobby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.LobbyLeaveEvent), global::Tbmatch.LobbyLeaveEvent.Parser, new[]{ "LobbyId", "Reason" }, null, new[]{ typeof(global::Tbmatch.LobbyLeaveEvent.Types.Reason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.LobbyUpdateEvent), global::Tbmatch.LobbyUpdateEvent.Parser, new[]{ "LobbyId", "Update", "Removed", "State", "GameConfig", "Queue", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.LobbyMatchStartEvent), global::Tbmatch.LobbyMatchStartEvent.Parser, new[]{ "LobbyId", "MatchId", "Config", "Endpoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.Event), global::Tbmatch.Event.Parser, new[]{ "EventId", "Type", "TimestampMsec", "FilterChanged", "WaitMatchProgress", "MatchCreated", "MatchOutcome", "MatchAbandoned", "MatchConnected", "MatchOver", "GameBegin", "GameInput", "GameOver", "UserCheckNetwork", "UserSessionClosed", "PingTestComplete", "LobbyJoin", "LobbyLeave", "LobbyUpdate", "LobbyMatchStart" }, null, new[]{ typeof(global::Tbmatch.Event.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.QueuedEvent), global::Tbmatch.QueuedEvent.Parser, new[]{ "Event", "RestrictSessionId", "ExpiryTimestampMsec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.GetEventRequest), global::Tbmatch.GetEventRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbmatch.GetEventResult), global::Tbmatch.GetEventResult.Parser, new[]{ "Version", "Event" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The event filter has been updated; any pending
  /// GetEvent call should reload the filter.
  /// Target: q_user_N
  /// </summary>
  public sealed partial class FilterChangedEvent : pb::IMessage<FilterChangedEvent> {
    private static readonly pb::MessageParser<FilterChangedEvent> _parser = new pb::MessageParser<FilterChangedEvent>(() => new FilterChangedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterChangedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChangedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChangedEvent(FilterChangedEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChangedEvent Clone() {
      return new FilterChangedEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterChangedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterChangedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterChangedEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Progress updates from the GetMatch method.
  /// Target: q_user_N
  /// </summary>
  public sealed partial class WaitMatchProgressEvent : pb::IMessage<WaitMatchProgressEvent> {
    private static readonly pb::MessageParser<WaitMatchProgressEvent> _parser = new pb::MessageParser<WaitMatchProgressEvent>(() => new WaitMatchProgressEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitMatchProgressEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitMatchProgressEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitMatchProgressEvent(WaitMatchProgressEvent other) : this() {
      status_ = other.status_;
      matchId_ = other.matchId_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      Endpoint = other.endpoint_ != null ? other.Endpoint.Clone() : null;
      usersWaiting_ = other.usersWaiting_;
      DeprecatedUsersOnline_ = other.DeprecatedUsersOnline_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitMatchProgressEvent Clone() {
      return new WaitMatchProgressEvent(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Tbmatch.WaitMatchProgressEvent.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.WaitMatchProgressEvent.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private long matchId_;
    /// <summary>
    /// The ID of the newly created match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Tbmatch.GameConfig config_;
    /// <summary>
    /// Game config to run for game 0 (when status == MATCH).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "endpoint" field.</summary>
    public const int EndpointFieldNumber = 4;
    private global::Tbmatch.GameEndpointConfig endpoint_;
    /// <summary>
    /// Player slot and connection for game 0 (when status == MATCH).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameEndpointConfig Endpoint {
      get { return endpoint_; }
      set {
        endpoint_ = value;
      }
    }

    /// <summary>Field number for the "users_waiting" field.</summary>
    public const int UsersWaitingFieldNumber = 21;
    private int usersWaiting_;
    /// <summary>
    /// Some extra stats for a WAITING progress.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsersWaiting {
      get { return usersWaiting_; }
      set {
        usersWaiting_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_users_online" field.</summary>
    public const int DeprecatedUsersOnlineFieldNumber = 20;
    private int DeprecatedUsersOnline_;
    /// <summary>
    /// DEPRECATED FIELDS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedUsersOnline {
      get { return DeprecatedUsersOnline_; }
      set {
        DeprecatedUsersOnline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitMatchProgressEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitMatchProgressEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(Endpoint, other.Endpoint)) return false;
      if (UsersWaiting != other.UsersWaiting) return false;
      if (DeprecatedUsersOnline != other.DeprecatedUsersOnline) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (endpoint_ != null) hash ^= Endpoint.GetHashCode();
      if (UsersWaiting != 0) hash ^= UsersWaiting.GetHashCode();
      if (DeprecatedUsersOnline != 0) hash ^= DeprecatedUsersOnline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (MatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MatchId);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (endpoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Endpoint);
      }
      if (DeprecatedUsersOnline != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DeprecatedUsersOnline);
      }
      if (UsersWaiting != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(UsersWaiting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (endpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Endpoint);
      }
      if (UsersWaiting != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UsersWaiting);
      }
      if (DeprecatedUsersOnline != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedUsersOnline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitMatchProgressEvent other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbmatch.GameConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.endpoint_ != null) {
        if (endpoint_ == null) {
          endpoint_ = new global::Tbmatch.GameEndpointConfig();
        }
        Endpoint.MergeFrom(other.Endpoint);
      }
      if (other.UsersWaiting != 0) {
        UsersWaiting = other.UsersWaiting;
      }
      if (other.DeprecatedUsersOnline != 0) {
        DeprecatedUsersOnline = other.DeprecatedUsersOnline;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Tbmatch.WaitMatchProgressEvent.Types.Status) input.ReadEnum();
            break;
          }
          case 16: {
            MatchId = input.ReadInt64();
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Tbmatch.GameConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 34: {
            if (endpoint_ == null) {
              endpoint_ = new global::Tbmatch.GameEndpointConfig();
            }
            input.ReadMessage(endpoint_);
            break;
          }
          case 160: {
            DeprecatedUsersOnline = input.ReadInt32();
            break;
          }
          case 168: {
            UsersWaiting = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WaitMatchProgressEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_ZERO")] Zero = 0,
        /// <summary>
        /// Waiting for an available match.
        /// </summary>
        [pbr::OriginalName("WAITING")] Waiting = 1,
        /// <summary>
        /// Gave up waiting.
        /// </summary>
        [pbr::OriginalName("TIMEOUT")] Timeout = 2,
        /// <summary>
        /// Match found.
        /// </summary>
        [pbr::OriginalName("MATCH")] Match = 3,
        /// <summary>
        /// Request canceled by user.
        /// </summary>
        [pbr::OriginalName("CANCEL")] Cancel = 4,
        /// <summary>
        /// Failed to enter queue.  A ping test must be performed before
        /// re-queuing for a match.
        /// </summary>
        [pbr::OriginalName("PING_TEST_REQUIRED")] PingTestRequired = 5,
        /// <summary>
        /// The build version is not allowed to enter the queue.
        /// A client update is required.
        /// </summary>
        [pbr::OriginalName("DENY_VERSION")] DenyVersion = 6,
        /// <summary>
        /// The match-making server is down for maintenance.  Try again later.
        /// </summary>
        [pbr::OriginalName("SERVER_MAINTENANCE")] ServerMaintenance = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// A new match was created.
  /// Target queue: match
  /// </summary>
  public sealed partial class MatchCreatedEvent : pb::IMessage<MatchCreatedEvent> {
    private static readonly pb::MessageParser<MatchCreatedEvent> _parser = new pb::MessageParser<MatchCreatedEvent>(() => new MatchCreatedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchCreatedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCreatedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCreatedEvent(MatchCreatedEvent other) : this() {
      GameConfig = other.gameConfig_ != null ? other.GameConfig.Clone() : null;
      DeprecatedMatchId_ = other.DeprecatedMatchId_;
      DeprecatedUserId_ = other.DeprecatedUserId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCreatedEvent Clone() {
      return new MatchCreatedEvent(this);
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 3;
    private global::Tbmatch.GameConfig gameConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameConfig GameConfig {
      get { return gameConfig_; }
      set {
        gameConfig_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_match_id" field.</summary>
    public const int DeprecatedMatchIdFieldNumber = 1;
    private long DeprecatedMatchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeprecatedMatchId {
      get { return DeprecatedMatchId_; }
      set {
        DeprecatedMatchId_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_user_id" field.</summary>
    public const int DeprecatedUserIdFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_DeprecatedUserId_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> DeprecatedUserId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DeprecatedUserId {
      get { return DeprecatedUserId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchCreatedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchCreatedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      if (DeprecatedMatchId != other.DeprecatedMatchId) return false;
      if(!DeprecatedUserId_.Equals(other.DeprecatedUserId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameConfig_ != null) hash ^= GameConfig.GetHashCode();
      if (DeprecatedMatchId != 0L) hash ^= DeprecatedMatchId.GetHashCode();
      hash ^= DeprecatedUserId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedMatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeprecatedMatchId);
      }
      DeprecatedUserId_.WriteTo(output, _repeated_DeprecatedUserId_codec);
      if (gameConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      if (DeprecatedMatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeprecatedMatchId);
      }
      size += DeprecatedUserId_.CalculateSize(_repeated_DeprecatedUserId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchCreatedEvent other) {
      if (other == null) {
        return;
      }
      if (other.gameConfig_ != null) {
        if (gameConfig_ == null) {
          gameConfig_ = new global::Tbmatch.GameConfig();
        }
        GameConfig.MergeFrom(other.GameConfig);
      }
      if (other.DeprecatedMatchId != 0L) {
        DeprecatedMatchId = other.DeprecatedMatchId;
      }
      DeprecatedUserId_.Add(other.DeprecatedUserId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeprecatedMatchId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            DeprecatedUserId_.AddEntriesFrom(input, _repeated_DeprecatedUserId_codec);
            break;
          }
          case 26: {
            if (gameConfig_ == null) {
              gameConfig_ = new global::Tbmatch.GameConfig();
            }
            input.ReadMessage(gameConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Observed match has successfully established player connection
  /// and loading has begun.
  /// Target queue: match
  /// </summary>
  public sealed partial class MatchConnectedEvent : pb::IMessage<MatchConnectedEvent> {
    private static readonly pb::MessageParser<MatchConnectedEvent> _parser = new pb::MessageParser<MatchConnectedEvent>(() => new MatchConnectedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchConnectedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchConnectedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchConnectedEvent(MatchConnectedEvent other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchConnectedEvent Clone() {
      return new MatchConnectedEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchConnectedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchConnectedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchConnectedEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The next game is beginning in this match.
  /// Target queue: match
  /// </summary>
  public sealed partial class GameBeginEvent : pb::IMessage<GameBeginEvent> {
    private static readonly pb::MessageParser<GameBeginEvent> _parser = new pb::MessageParser<GameBeginEvent>(() => new GameBeginEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBeginEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBeginEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBeginEvent(GameBeginEvent other) : this() {
      matchId_ = other.matchId_;
      NextGame = other.nextGame_ != null ? other.NextGame.Clone() : null;
      sequenceId_ = other.sequenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBeginEvent Clone() {
      return new GameBeginEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "next_game" field.</summary>
    public const int NextGameFieldNumber = 2;
    private global::Tbmatch.NextGameConfig nextGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.NextGameConfig NextGame {
      get { return nextGame_; }
      set {
        nextGame_ = value;
      }
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 3;
    private int sequenceId_;
    /// <summary>
    /// Populated from the sequenceId field in Redis under the match's key.
    /// Should be used by the client, if present, to determine whether to process this event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceId {
      get { return sequenceId_; }
      set {
        sequenceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBeginEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBeginEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(NextGame, other.NextGame)) return false;
      if (SequenceId != other.SequenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (nextGame_ != null) hash ^= NextGame.GetHashCode();
      if (SequenceId != 0) hash ^= SequenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (nextGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NextGame);
      }
      if (SequenceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SequenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (nextGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextGame);
      }
      if (SequenceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBeginEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.nextGame_ != null) {
        if (nextGame_ == null) {
          nextGame_ = new global::Tbmatch.NextGameConfig();
        }
        NextGame.MergeFrom(other.NextGame);
      }
      if (other.SequenceId != 0) {
        SequenceId = other.SequenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            if (nextGame_ == null) {
              nextGame_ = new global::Tbmatch.NextGameConfig();
            }
            input.ReadMessage(nextGame_);
            break;
          }
          case 24: {
            SequenceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Batch of compressed inputs.
  /// Target queue: match
  /// </summary>
  public sealed partial class GameInputEvent : pb::IMessage<GameInputEvent> {
    private static readonly pb::MessageParser<GameInputEvent> _parser = new pb::MessageParser<GameInputEvent>(() => new GameInputEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInputEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInputEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInputEvent(GameInputEvent other) : this() {
      matchId_ = other.matchId_;
      startFrame_ = other.startFrame_;
      numBits_ = other.numBits_;
      bits_ = other.bits_;
      final_ = other.final_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInputEvent Clone() {
      return new GameInputEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "start_frame" field.</summary>
    public const int StartFrameFieldNumber = 2;
    private int startFrame_;
    /// <summary>
    /// First frame number of input stored in bits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartFrame {
      get { return startFrame_; }
      set {
        startFrame_ = value;
      }
    }

    /// <summary>Field number for the "num_bits" field.</summary>
    public const int NumBitsFieldNumber = 3;
    private int numBits_;
    /// <summary>
    /// Number of bits to read from bits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumBits {
      get { return numBits_; }
      set {
        numBits_ = value;
      }
    }

    /// <summary>Field number for the "bits" field.</summary>
    public const int BitsFieldNumber = 4;
    private pb::ByteString bits_ = pb::ByteString.Empty;
    /// <summary>
    /// Encoded frame inputs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bits {
      get { return bits_; }
      set {
        bits_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final" field.</summary>
    public const int FinalFieldNumber = 5;
    private bool final_;
    /// <summary>
    /// True if this is the last set of inputs for a game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Final {
      get { return final_; }
      set {
        final_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInputEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInputEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (StartFrame != other.StartFrame) return false;
      if (NumBits != other.NumBits) return false;
      if (Bits != other.Bits) return false;
      if (Final != other.Final) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (StartFrame != 0) hash ^= StartFrame.GetHashCode();
      if (NumBits != 0) hash ^= NumBits.GetHashCode();
      if (Bits.Length != 0) hash ^= Bits.GetHashCode();
      if (Final != false) hash ^= Final.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (StartFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartFrame);
      }
      if (NumBits != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumBits);
      }
      if (Bits.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Bits);
      }
      if (Final != false) {
        output.WriteRawTag(40);
        output.WriteBool(Final);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (StartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartFrame);
      }
      if (NumBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBits);
      }
      if (Bits.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bits);
      }
      if (Final != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInputEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.StartFrame != 0) {
        StartFrame = other.StartFrame;
      }
      if (other.NumBits != 0) {
        NumBits = other.NumBits;
      }
      if (other.Bits.Length != 0) {
        Bits = other.Bits;
      }
      if (other.Final != false) {
        Final = other.Final;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            StartFrame = input.ReadInt32();
            break;
          }
          case 24: {
            NumBits = input.ReadInt32();
            break;
          }
          case 34: {
            Bits = input.ReadBytes();
            break;
          }
          case 40: {
            Final = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Game reached a valid outcome.
  /// Target queue: match
  /// </summary>
  public sealed partial class GameOverEvent : pb::IMessage<GameOverEvent> {
    private static readonly pb::MessageParser<GameOverEvent> _parser = new pb::MessageParser<GameOverEvent>(() => new GameOverEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOverEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverEvent(GameOverEvent other) : this() {
      matchId_ = other.matchId_;
      Report = other.report_ != null ? other.Report.Clone() : null;
      sequenceId_ = other.sequenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverEvent Clone() {
      return new GameOverEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 2;
    private global::Tbmatch.GameReport report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameReport Report {
      get { return report_; }
      set {
        report_ = value;
      }
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 3;
    private int sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceId {
      get { return sequenceId_; }
      set {
        sequenceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOverEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOverEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Report, other.Report)) return false;
      if (SequenceId != other.SequenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (report_ != null) hash ^= Report.GetHashCode();
      if (SequenceId != 0) hash ^= SequenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (report_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Report);
      }
      if (SequenceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SequenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (report_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Report);
      }
      if (SequenceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOverEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.report_ != null) {
        if (report_ == null) {
          report_ = new global::Tbmatch.GameReport();
        }
        Report.MergeFrom(other.Report);
      }
      if (other.SequenceId != 0) {
        SequenceId = other.SequenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            if (report_ == null) {
              report_ = new global::Tbmatch.GameReport();
            }
            input.ReadMessage(report_);
            break;
          }
          case 24: {
            SequenceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A match user was playing has been abandoned, because players sent conflicting goodbye packets
  /// (either intentionally or because the p2p connection got broken)
  /// Stop playing the match and exit back to the menu.
  /// Target queue: user
  /// </summary>
  public sealed partial class MatchAbandonedEvent : pb::IMessage<MatchAbandonedEvent> {
    private static readonly pb::MessageParser<MatchAbandonedEvent> _parser = new pb::MessageParser<MatchAbandonedEvent>(() => new MatchAbandonedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchAbandonedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAbandonedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAbandonedEvent(MatchAbandonedEvent other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAbandonedEvent Clone() {
      return new MatchAbandonedEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchAbandonedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchAbandonedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchAbandonedEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Observed match has completed.
  /// Target queue: match
  /// </summary>
  public sealed partial class MatchOverEvent : pb::IMessage<MatchOverEvent> {
    private static readonly pb::MessageParser<MatchOverEvent> _parser = new pb::MessageParser<MatchOverEvent>(() => new MatchOverEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchOverEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchOverEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchOverEvent(MatchOverEvent other) : this() {
      matchId_ = other.matchId_;
      status_ = other.status_;
      winSlot_ = other.winSlot_;
      draw_ = other.draw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchOverEvent Clone() {
      return new MatchOverEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Tbmatch.MatchOverEvent.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchOverEvent.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "win_slot" field.</summary>
    public const int WinSlotFieldNumber = 3;
    private int winSlot_;
    /// <summary>
    /// if status==VALID, player slot that won if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinSlot {
      get { return winSlot_; }
      set {
        winSlot_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 4;
    private bool draw_;
    /// <summary>
    /// if status==VALID, true iff the result was a draw.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchOverEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchOverEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Status != other.Status) return false;
      if (WinSlot != other.WinSlot) return false;
      if (Draw != other.Draw) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (WinSlot != 0) hash ^= WinSlot.GetHashCode();
      if (Draw != false) hash ^= Draw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (WinSlot != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinSlot);
      }
      if (Draw != false) {
        output.WriteRawTag(32);
        output.WriteBool(Draw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (WinSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSlot);
      }
      if (Draw != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchOverEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.WinSlot != 0) {
        WinSlot = other.WinSlot;
      }
      if (other.Draw != false) {
        Draw = other.Draw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::Tbmatch.MatchOverEvent.Types.Status) input.ReadEnum();
            break;
          }
          case 24: {
            WinSlot = input.ReadInt32();
            break;
          }
          case 32: {
            Draw = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MatchOverEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_ZERO")] Zero = 0,
        /// <summary>
        /// Match did not complete due to a server error, desync
        /// or a network problem that affected both players.
        /// </summary>
        [pbr::OriginalName("ABANDONED")] Abandoned = 1,
        /// <summary>
        /// Match ended because one player disconnected.
        /// </summary>
        [pbr::OriginalName("DISCONNECT")] Disconnect = 2,
        /// <summary>
        /// Match ended with a valid outcome.
        /// </summary>
        [pbr::OriginalName("VALID")] Valid = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Match completed that user participated in.  Notify about what the server recorded.
  /// This event could arrive anywhere along the game sequence, since it may also indicate
  /// early disconnection of the opponent.
  /// </summary>
  public sealed partial class MatchOutcomeEvent : pb::IMessage<MatchOutcomeEvent> {
    private static readonly pb::MessageParser<MatchOutcomeEvent> _parser = new pb::MessageParser<MatchOutcomeEvent>(() => new MatchOutcomeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchOutcomeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchOutcomeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchOutcomeEvent(MatchOutcomeEvent other) : this() {
      Result = other.result_ != null ? other.Result.Clone() : null;
      Exp = other.exp_ != null ? other.Exp.Clone() : null;
      StatsUpdate = other.statsUpdate_ != null ? other.StatsUpdate.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchOutcomeEvent Clone() {
      return new MatchOutcomeEvent(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Tbmatch.MatchResult result_;
    /// <summary>
    /// What happened in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private global::Tbmatch.MatchExperience exp_;
    /// <summary>
    /// Spoils of war.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchExperience Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "stats_update" field.</summary>
    public const int StatsUpdateFieldNumber = 3;
    private global::Tbmatch.PlayerStats statsUpdate_;
    /// <summary>
    /// Updates to user stats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.PlayerStats StatsUpdate {
      get { return statsUpdate_; }
      set {
        statsUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchOutcomeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchOutcomeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (!object.Equals(Exp, other.Exp)) return false;
      if (!object.Equals(StatsUpdate, other.StatsUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (exp_ != null) hash ^= Exp.GetHashCode();
      if (statsUpdate_ != null) hash ^= StatsUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (exp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Exp);
      }
      if (statsUpdate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StatsUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (exp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exp);
      }
      if (statsUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatsUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchOutcomeEvent other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Tbmatch.MatchResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.exp_ != null) {
        if (exp_ == null) {
          exp_ = new global::Tbmatch.MatchExperience();
        }
        Exp.MergeFrom(other.Exp);
      }
      if (other.statsUpdate_ != null) {
        if (statsUpdate_ == null) {
          statsUpdate_ = new global::Tbmatch.PlayerStats();
        }
        StatsUpdate.MergeFrom(other.StatsUpdate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Tbmatch.MatchResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 18: {
            if (exp_ == null) {
              exp_ = new global::Tbmatch.MatchExperience();
            }
            input.ReadMessage(exp_);
            break;
          }
          case 26: {
            if (statsUpdate_ == null) {
              statsUpdate_ = new global::Tbmatch.PlayerStats();
            }
            input.ReadMessage(statsUpdate_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// User failed to handshake during a match, check network settings.
  /// </summary>
  public sealed partial class UserCheckNetworkEvent : pb::IMessage<UserCheckNetworkEvent> {
    private static readonly pb::MessageParser<UserCheckNetworkEvent> _parser = new pb::MessageParser<UserCheckNetworkEvent>(() => new UserCheckNetworkEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCheckNetworkEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCheckNetworkEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCheckNetworkEvent(UserCheckNetworkEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCheckNetworkEvent Clone() {
      return new UserCheckNetworkEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCheckNetworkEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCheckNetworkEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCheckNetworkEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// The session is being forcibly closed.
  /// Could be due to login on another session, terminated by
  /// an administrator.
  /// </summary>
  public sealed partial class UserSessionClosedEvent : pb::IMessage<UserSessionClosedEvent> {
    private static readonly pb::MessageParser<UserSessionClosedEvent> _parser = new pb::MessageParser<UserSessionClosedEvent>(() => new UserSessionClosedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSessionClosedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionClosedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionClosedEvent(UserSessionClosedEvent other) : this() {
      reasonMsgId_ = other.reasonMsgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionClosedEvent Clone() {
      return new UserSessionClosedEvent(this);
    }

    /// <summary>Field number for the "reason_msg_id" field.</summary>
    public const int ReasonMsgIdFieldNumber = 1;
    private string reasonMsgId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReasonMsgId {
      get { return reasonMsgId_; }
      set {
        reasonMsgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSessionClosedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSessionClosedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReasonMsgId != other.ReasonMsgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReasonMsgId.Length != 0) hash ^= ReasonMsgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReasonMsgId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReasonMsgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReasonMsgId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReasonMsgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSessionClosedEvent other) {
      if (other == null) {
        return;
      }
      if (other.ReasonMsgId.Length != 0) {
        ReasonMsgId = other.ReasonMsgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReasonMsgId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The requested ping test has completed - now eligible to join a matching queue.
  /// </summary>
  public sealed partial class PingTestCompleteEvent : pb::IMessage<PingTestCompleteEvent> {
    private static readonly pb::MessageParser<PingTestCompleteEvent> _parser = new pb::MessageParser<PingTestCompleteEvent>(() => new PingTestCompleteEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingTestCompleteEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestCompleteEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestCompleteEvent(PingTestCompleteEvent other) : this() {
      avgRttMs_ = other.avgRttMs_;
      maxRttMs_ = other.maxRttMs_;
      lossRatio_ = other.lossRatio_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestCompleteEvent Clone() {
      return new PingTestCompleteEvent(this);
    }

    /// <summary>Field number for the "avg_rtt_ms" field.</summary>
    public const int AvgRttMsFieldNumber = 1;
    private int avgRttMs_;
    /// <summary>
    /// Average measured round-trip time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgRttMs {
      get { return avgRttMs_; }
      set {
        avgRttMs_ = value;
      }
    }

    /// <summary>Field number for the "max_rtt_ms" field.</summary>
    public const int MaxRttMsFieldNumber = 2;
    private int maxRttMs_;
    /// <summary>
    /// Max round-trip time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRttMs {
      get { return maxRttMs_; }
      set {
        maxRttMs_ = value;
      }
    }

    /// <summary>Field number for the "loss_ratio" field.</summary>
    public const int LossRatioFieldNumber = 3;
    private float lossRatio_;
    /// <summary>
    /// Fraction of packets lost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LossRatio {
      get { return lossRatio_; }
      set {
        lossRatio_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 4;
    private bool success_;
    /// <summary>
    /// Was the ping successful or not?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingTestCompleteEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingTestCompleteEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvgRttMs != other.AvgRttMs) return false;
      if (MaxRttMs != other.MaxRttMs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LossRatio, other.LossRatio)) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvgRttMs != 0) hash ^= AvgRttMs.GetHashCode();
      if (MaxRttMs != 0) hash ^= MaxRttMs.GetHashCode();
      if (LossRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LossRatio);
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AvgRttMs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AvgRttMs);
      }
      if (MaxRttMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxRttMs);
      }
      if (LossRatio != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LossRatio);
      }
      if (Success != false) {
        output.WriteRawTag(32);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvgRttMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgRttMs);
      }
      if (MaxRttMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRttMs);
      }
      if (LossRatio != 0F) {
        size += 1 + 4;
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingTestCompleteEvent other) {
      if (other == null) {
        return;
      }
      if (other.AvgRttMs != 0) {
        AvgRttMs = other.AvgRttMs;
      }
      if (other.MaxRttMs != 0) {
        MaxRttMs = other.MaxRttMs;
      }
      if (other.LossRatio != 0F) {
        LossRatio = other.LossRatio;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvgRttMs = input.ReadInt32();
            break;
          }
          case 16: {
            MaxRttMs = input.ReadInt32();
            break;
          }
          case 29: {
            LossRatio = input.ReadFloat();
            break;
          }
          case 32: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Player has now joined a lobby.
  /// </summary>
  public sealed partial class LobbyJoinEvent : pb::IMessage<LobbyJoinEvent> {
    private static readonly pb::MessageParser<LobbyJoinEvent> _parser = new pb::MessageParser<LobbyJoinEvent>(() => new LobbyJoinEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyJoinEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyJoinEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyJoinEvent(LobbyJoinEvent other) : this() {
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyJoinEvent Clone() {
      return new LobbyJoinEvent(this);
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 1;
    private global::Tbmatch.Lobby lobby_;
    /// <summary>
    /// Current state of the joined lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.Lobby Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyJoinEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyJoinEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lobby, other.Lobby)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lobby_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lobby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyJoinEvent other) {
      if (other == null) {
        return;
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Tbmatch.Lobby();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lobby_ == null) {
              lobby_ = new global::Tbmatch.Lobby();
            }
            input.ReadMessage(lobby_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Player has left the current lobby, either voluntarily, because they were
  /// banned, or because the last owner left.
  /// </summary>
  public sealed partial class LobbyLeaveEvent : pb::IMessage<LobbyLeaveEvent> {
    private static readonly pb::MessageParser<LobbyLeaveEvent> _parser = new pb::MessageParser<LobbyLeaveEvent>(() => new LobbyLeaveEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyLeaveEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyLeaveEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyLeaveEvent(LobbyLeaveEvent other) : this() {
      lobbyId_ = other.lobbyId_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyLeaveEvent Clone() {
      return new LobbyLeaveEvent(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private long lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private global::Tbmatch.LobbyLeaveEvent.Types.Reason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LobbyLeaveEvent.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyLeaveEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyLeaveEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LobbyId != 0L) hash ^= LobbyId.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LobbyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LobbyId);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LobbyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyId);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyLeaveEvent other) {
      if (other == null) {
        return;
      }
      if (other.LobbyId != 0L) {
        LobbyId = other.LobbyId;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyId = input.ReadInt64();
            break;
          }
          case 16: {
            reason_ = (global::Tbmatch.LobbyLeaveEvent.Types.Reason) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LobbyLeaveEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("REASON_ZERO")] Zero = 0,
        /// <summary>
        /// Left lobby voluntarily.
        /// </summary>
        [pbr::OriginalName("LEFT")] Left = 1,
        /// <summary>
        /// Banned from the lobby.
        /// </summary>
        [pbr::OriginalName("BANNED")] Banned = 2,
        /// <summary>
        /// Removed by owner, but not banned permanently
        /// </summary>
        [pbr::OriginalName("REMOVED")] Removed = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Sent to current members about changes in the lobby state.
  /// Notifies users joining and leaving, change of ready states,
  /// queue order, and other lobby states.  Any fields not set
  /// should be left at their previous state.
  /// </summary>
  public sealed partial class LobbyUpdateEvent : pb::IMessage<LobbyUpdateEvent> {
    private static readonly pb::MessageParser<LobbyUpdateEvent> _parser = new pb::MessageParser<LobbyUpdateEvent>(() => new LobbyUpdateEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyUpdateEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyUpdateEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyUpdateEvent(LobbyUpdateEvent other) : this() {
      lobbyId_ = other.lobbyId_;
      update_ = other.update_.Clone();
      removed_ = other.removed_.Clone();
      state_ = other.state_;
      GameConfig = other.gameConfig_ != null ? other.GameConfig.Clone() : null;
      queue_ = other.queue_.Clone();
      Options = other.options_ != null ? other.Options.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyUpdateEvent Clone() {
      return new LobbyUpdateEvent(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private long lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tbmatch.LobbyMember> _repeated_update_codec
        = pb::FieldCodec.ForMessage(18, global::Tbmatch.LobbyMember.Parser);
    private readonly pbc::RepeatedField<global::Tbmatch.LobbyMember> update_ = new pbc::RepeatedField<global::Tbmatch.LobbyMember>();
    /// <summary>
    /// Members added or whose state changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbmatch.LobbyMember> Update {
      get { return update_; }
    }

    /// <summary>Field number for the "removed" field.</summary>
    public const int RemovedFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_removed_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> removed_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Members who left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Removed {
      get { return removed_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::Tbmatch.LobbyState state_ = 0;
    /// <summary>
    /// Current state of the lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LobbyState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 5;
    private global::Tbmatch.GameConfig gameConfig_;
    /// <summary>
    /// For state == LS_MATCH, GameConfig that started the running match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameConfig GameConfig {
      get { return gameConfig_; }
      set {
        gameConfig_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_queue_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> queue_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Order of queued members by account_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Queue {
      get { return queue_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 7;
    private global::Tbmatch.GameOptions options_;
    /// <summary>
    /// Options for games generated by this lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyUpdateEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyUpdateEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if(!update_.Equals(other.update_)) return false;
      if(!removed_.Equals(other.removed_)) return false;
      if (State != other.State) return false;
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      if(!queue_.Equals(other.queue_)) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LobbyId != 0L) hash ^= LobbyId.GetHashCode();
      hash ^= update_.GetHashCode();
      hash ^= removed_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (gameConfig_ != null) hash ^= GameConfig.GetHashCode();
      hash ^= queue_.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LobbyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LobbyId);
      }
      update_.WriteTo(output, _repeated_update_codec);
      removed_.WriteTo(output, _repeated_removed_codec);
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      if (gameConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GameConfig);
      }
      queue_.WriteTo(output, _repeated_queue_codec);
      if (options_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LobbyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyId);
      }
      size += update_.CalculateSize(_repeated_update_codec);
      size += removed_.CalculateSize(_repeated_removed_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (gameConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      size += queue_.CalculateSize(_repeated_queue_codec);
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyUpdateEvent other) {
      if (other == null) {
        return;
      }
      if (other.LobbyId != 0L) {
        LobbyId = other.LobbyId;
      }
      update_.Add(other.update_);
      removed_.Add(other.removed_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.gameConfig_ != null) {
        if (gameConfig_ == null) {
          gameConfig_ = new global::Tbmatch.GameConfig();
        }
        GameConfig.MergeFrom(other.GameConfig);
      }
      queue_.Add(other.queue_);
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Tbmatch.GameOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyId = input.ReadInt64();
            break;
          }
          case 18: {
            update_.AddEntriesFrom(input, _repeated_update_codec);
            break;
          }
          case 26:
          case 24: {
            removed_.AddEntriesFrom(input, _repeated_removed_codec);
            break;
          }
          case 32: {
            state_ = (global::Tbmatch.LobbyState) input.ReadEnum();
            break;
          }
          case 42: {
            if (gameConfig_ == null) {
              gameConfig_ = new global::Tbmatch.GameConfig();
            }
            input.ReadMessage(gameConfig_);
            break;
          }
          case 50:
          case 48: {
            queue_.AddEntriesFrom(input, _repeated_queue_codec);
            break;
          }
          case 58: {
            if (options_ == null) {
              options_ = new global::Tbmatch.GameOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An idle lobby has two ready players.
  /// New match started, and the recipient is involved.
  /// </summary>
  public sealed partial class LobbyMatchStartEvent : pb::IMessage<LobbyMatchStartEvent> {
    private static readonly pb::MessageParser<LobbyMatchStartEvent> _parser = new pb::MessageParser<LobbyMatchStartEvent>(() => new LobbyMatchStartEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyMatchStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyMatchStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyMatchStartEvent(LobbyMatchStartEvent other) : this() {
      lobbyId_ = other.lobbyId_;
      matchId_ = other.matchId_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      Endpoint = other.endpoint_ != null ? other.Endpoint.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyMatchStartEvent Clone() {
      return new LobbyMatchStartEvent(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private long lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private long matchId_;
    /// <summary>
    /// The ID of the newly created match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Tbmatch.GameConfig config_;
    /// <summary>
    /// Game config for first game of the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "endpoint" field.</summary>
    public const int EndpointFieldNumber = 4;
    private global::Tbmatch.GameEndpointConfig endpoint_;
    /// <summary>
    /// Player slot and connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameEndpointConfig Endpoint {
      get { return endpoint_; }
      set {
        endpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyMatchStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyMatchStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(Endpoint, other.Endpoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LobbyId != 0L) hash ^= LobbyId.GetHashCode();
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (endpoint_ != null) hash ^= Endpoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LobbyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LobbyId);
      }
      if (MatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MatchId);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (endpoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Endpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LobbyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyId);
      }
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (endpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Endpoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyMatchStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.LobbyId != 0L) {
        LobbyId = other.LobbyId;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbmatch.GameConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.endpoint_ != null) {
        if (endpoint_ == null) {
          endpoint_ = new global::Tbmatch.GameEndpointConfig();
        }
        Endpoint.MergeFrom(other.Endpoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyId = input.ReadInt64();
            break;
          }
          case 16: {
            MatchId = input.ReadInt64();
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Tbmatch.GameConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 34: {
            if (endpoint_ == null) {
              endpoint_ = new global::Tbmatch.GameEndpointConfig();
            }
            input.ReadMessage(endpoint_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Event container union.  Returned in GetEvent.
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      eventId_ = other.eventId_;
      type_ = other.type_;
      timestampMsec_ = other.timestampMsec_;
      FilterChanged = other.filterChanged_ != null ? other.FilterChanged.Clone() : null;
      WaitMatchProgress = other.waitMatchProgress_ != null ? other.WaitMatchProgress.Clone() : null;
      MatchCreated = other.matchCreated_ != null ? other.MatchCreated.Clone() : null;
      MatchOutcome = other.matchOutcome_ != null ? other.MatchOutcome.Clone() : null;
      MatchAbandoned = other.matchAbandoned_ != null ? other.MatchAbandoned.Clone() : null;
      MatchConnected = other.matchConnected_ != null ? other.MatchConnected.Clone() : null;
      MatchOver = other.matchOver_ != null ? other.MatchOver.Clone() : null;
      GameBegin = other.gameBegin_ != null ? other.GameBegin.Clone() : null;
      GameInput = other.gameInput_ != null ? other.GameInput.Clone() : null;
      GameOver = other.gameOver_ != null ? other.GameOver.Clone() : null;
      UserCheckNetwork = other.userCheckNetwork_ != null ? other.UserCheckNetwork.Clone() : null;
      UserSessionClosed = other.userSessionClosed_ != null ? other.UserSessionClosed.Clone() : null;
      PingTestComplete = other.pingTestComplete_ != null ? other.PingTestComplete.Clone() : null;
      LobbyJoin = other.lobbyJoin_ != null ? other.LobbyJoin.Clone() : null;
      LobbyLeave = other.lobbyLeave_ != null ? other.LobbyLeave.Clone() : null;
      LobbyUpdate = other.lobbyUpdate_ != null ? other.LobbyUpdate.Clone() : null;
      LobbyMatchStart = other.lobbyMatchStart_ != null ? other.LobbyMatchStart.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private long eventId_;
    /// <summary>
    /// Unique ID for the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tbmatch.Event.Types.Type type_ = 0;
    /// <summary>
    /// Type of the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.Event.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_msec" field.</summary>
    public const int TimestampMsecFieldNumber = 3;
    private long timestampMsec_;
    /// <summary>
    /// Time the event was generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMsec {
      get { return timestampMsec_; }
      set {
        timestampMsec_ = value;
      }
    }

    /// <summary>Field number for the "filter_changed" field.</summary>
    public const int FilterChangedFieldNumber = 13;
    private global::Tbmatch.FilterChangedEvent filterChanged_;
    /// <summary>
    /// Event fields based on type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.FilterChangedEvent FilterChanged {
      get { return filterChanged_; }
      set {
        filterChanged_ = value;
      }
    }

    /// <summary>Field number for the "wait_match_progress" field.</summary>
    public const int WaitMatchProgressFieldNumber = 14;
    private global::Tbmatch.WaitMatchProgressEvent waitMatchProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.WaitMatchProgressEvent WaitMatchProgress {
      get { return waitMatchProgress_; }
      set {
        waitMatchProgress_ = value;
      }
    }

    /// <summary>Field number for the "match_created" field.</summary>
    public const int MatchCreatedFieldNumber = 15;
    private global::Tbmatch.MatchCreatedEvent matchCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchCreatedEvent MatchCreated {
      get { return matchCreated_; }
      set {
        matchCreated_ = value;
      }
    }

    /// <summary>Field number for the "match_outcome" field.</summary>
    public const int MatchOutcomeFieldNumber = 18;
    private global::Tbmatch.MatchOutcomeEvent matchOutcome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchOutcomeEvent MatchOutcome {
      get { return matchOutcome_; }
      set {
        matchOutcome_ = value;
      }
    }

    /// <summary>Field number for the "match_abandoned" field.</summary>
    public const int MatchAbandonedFieldNumber = 21;
    private global::Tbmatch.MatchAbandonedEvent matchAbandoned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchAbandonedEvent MatchAbandoned {
      get { return matchAbandoned_; }
      set {
        matchAbandoned_ = value;
      }
    }

    /// <summary>Field number for the "match_connected" field.</summary>
    public const int MatchConnectedFieldNumber = 23;
    private global::Tbmatch.MatchConnectedEvent matchConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchConnectedEvent MatchConnected {
      get { return matchConnected_; }
      set {
        matchConnected_ = value;
      }
    }

    /// <summary>Field number for the "match_over" field.</summary>
    public const int MatchOverFieldNumber = 24;
    private global::Tbmatch.MatchOverEvent matchOver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchOverEvent MatchOver {
      get { return matchOver_; }
      set {
        matchOver_ = value;
      }
    }

    /// <summary>Field number for the "game_begin" field.</summary>
    public const int GameBeginFieldNumber = 25;
    private global::Tbmatch.GameBeginEvent gameBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameBeginEvent GameBegin {
      get { return gameBegin_; }
      set {
        gameBegin_ = value;
      }
    }

    /// <summary>Field number for the "game_input" field.</summary>
    public const int GameInputFieldNumber = 26;
    private global::Tbmatch.GameInputEvent gameInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameInputEvent GameInput {
      get { return gameInput_; }
      set {
        gameInput_ = value;
      }
    }

    /// <summary>Field number for the "game_over" field.</summary>
    public const int GameOverFieldNumber = 27;
    private global::Tbmatch.GameOverEvent gameOver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.GameOverEvent GameOver {
      get { return gameOver_; }
      set {
        gameOver_ = value;
      }
    }

    /// <summary>Field number for the "user_check_network" field.</summary>
    public const int UserCheckNetworkFieldNumber = 30;
    private global::Tbmatch.UserCheckNetworkEvent userCheckNetwork_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.UserCheckNetworkEvent UserCheckNetwork {
      get { return userCheckNetwork_; }
      set {
        userCheckNetwork_ = value;
      }
    }

    /// <summary>Field number for the "user_session_closed" field.</summary>
    public const int UserSessionClosedFieldNumber = 31;
    private global::Tbmatch.UserSessionClosedEvent userSessionClosed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.UserSessionClosedEvent UserSessionClosed {
      get { return userSessionClosed_; }
      set {
        userSessionClosed_ = value;
      }
    }

    /// <summary>Field number for the "ping_test_complete" field.</summary>
    public const int PingTestCompleteFieldNumber = 40;
    private global::Tbmatch.PingTestCompleteEvent pingTestComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.PingTestCompleteEvent PingTestComplete {
      get { return pingTestComplete_; }
      set {
        pingTestComplete_ = value;
      }
    }

    /// <summary>Field number for the "lobby_join" field.</summary>
    public const int LobbyJoinFieldNumber = 50;
    private global::Tbmatch.LobbyJoinEvent lobbyJoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LobbyJoinEvent LobbyJoin {
      get { return lobbyJoin_; }
      set {
        lobbyJoin_ = value;
      }
    }

    /// <summary>Field number for the "lobby_leave" field.</summary>
    public const int LobbyLeaveFieldNumber = 51;
    private global::Tbmatch.LobbyLeaveEvent lobbyLeave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LobbyLeaveEvent LobbyLeave {
      get { return lobbyLeave_; }
      set {
        lobbyLeave_ = value;
      }
    }

    /// <summary>Field number for the "lobby_update" field.</summary>
    public const int LobbyUpdateFieldNumber = 52;
    private global::Tbmatch.LobbyUpdateEvent lobbyUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LobbyUpdateEvent LobbyUpdate {
      get { return lobbyUpdate_; }
      set {
        lobbyUpdate_ = value;
      }
    }

    /// <summary>Field number for the "lobby_match_start" field.</summary>
    public const int LobbyMatchStartFieldNumber = 53;
    private global::Tbmatch.LobbyMatchStartEvent lobbyMatchStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LobbyMatchStartEvent LobbyMatchStart {
      get { return lobbyMatchStart_; }
      set {
        lobbyMatchStart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (Type != other.Type) return false;
      if (TimestampMsec != other.TimestampMsec) return false;
      if (!object.Equals(FilterChanged, other.FilterChanged)) return false;
      if (!object.Equals(WaitMatchProgress, other.WaitMatchProgress)) return false;
      if (!object.Equals(MatchCreated, other.MatchCreated)) return false;
      if (!object.Equals(MatchOutcome, other.MatchOutcome)) return false;
      if (!object.Equals(MatchAbandoned, other.MatchAbandoned)) return false;
      if (!object.Equals(MatchConnected, other.MatchConnected)) return false;
      if (!object.Equals(MatchOver, other.MatchOver)) return false;
      if (!object.Equals(GameBegin, other.GameBegin)) return false;
      if (!object.Equals(GameInput, other.GameInput)) return false;
      if (!object.Equals(GameOver, other.GameOver)) return false;
      if (!object.Equals(UserCheckNetwork, other.UserCheckNetwork)) return false;
      if (!object.Equals(UserSessionClosed, other.UserSessionClosed)) return false;
      if (!object.Equals(PingTestComplete, other.PingTestComplete)) return false;
      if (!object.Equals(LobbyJoin, other.LobbyJoin)) return false;
      if (!object.Equals(LobbyLeave, other.LobbyLeave)) return false;
      if (!object.Equals(LobbyUpdate, other.LobbyUpdate)) return false;
      if (!object.Equals(LobbyMatchStart, other.LobbyMatchStart)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0L) hash ^= EventId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TimestampMsec != 0L) hash ^= TimestampMsec.GetHashCode();
      if (filterChanged_ != null) hash ^= FilterChanged.GetHashCode();
      if (waitMatchProgress_ != null) hash ^= WaitMatchProgress.GetHashCode();
      if (matchCreated_ != null) hash ^= MatchCreated.GetHashCode();
      if (matchOutcome_ != null) hash ^= MatchOutcome.GetHashCode();
      if (matchAbandoned_ != null) hash ^= MatchAbandoned.GetHashCode();
      if (matchConnected_ != null) hash ^= MatchConnected.GetHashCode();
      if (matchOver_ != null) hash ^= MatchOver.GetHashCode();
      if (gameBegin_ != null) hash ^= GameBegin.GetHashCode();
      if (gameInput_ != null) hash ^= GameInput.GetHashCode();
      if (gameOver_ != null) hash ^= GameOver.GetHashCode();
      if (userCheckNetwork_ != null) hash ^= UserCheckNetwork.GetHashCode();
      if (userSessionClosed_ != null) hash ^= UserSessionClosed.GetHashCode();
      if (pingTestComplete_ != null) hash ^= PingTestComplete.GetHashCode();
      if (lobbyJoin_ != null) hash ^= LobbyJoin.GetHashCode();
      if (lobbyLeave_ != null) hash ^= LobbyLeave.GetHashCode();
      if (lobbyUpdate_ != null) hash ^= LobbyUpdate.GetHashCode();
      if (lobbyMatchStart_ != null) hash ^= LobbyMatchStart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EventId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (TimestampMsec != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimestampMsec);
      }
      if (filterChanged_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(FilterChanged);
      }
      if (waitMatchProgress_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(WaitMatchProgress);
      }
      if (matchCreated_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(MatchCreated);
      }
      if (matchOutcome_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MatchOutcome);
      }
      if (matchAbandoned_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MatchAbandoned);
      }
      if (matchConnected_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MatchConnected);
      }
      if (matchOver_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MatchOver);
      }
      if (gameBegin_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(GameBegin);
      }
      if (gameInput_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(GameInput);
      }
      if (gameOver_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(GameOver);
      }
      if (userCheckNetwork_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(UserCheckNetwork);
      }
      if (userSessionClosed_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(UserSessionClosed);
      }
      if (pingTestComplete_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(PingTestComplete);
      }
      if (lobbyJoin_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(LobbyJoin);
      }
      if (lobbyLeave_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(LobbyLeave);
      }
      if (lobbyUpdate_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(LobbyUpdate);
      }
      if (lobbyMatchStart_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(LobbyMatchStart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TimestampMsec != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMsec);
      }
      if (filterChanged_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterChanged);
      }
      if (waitMatchProgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WaitMatchProgress);
      }
      if (matchCreated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchCreated);
      }
      if (matchOutcome_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchOutcome);
      }
      if (matchAbandoned_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchAbandoned);
      }
      if (matchConnected_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchConnected);
      }
      if (matchOver_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchOver);
      }
      if (gameBegin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameBegin);
      }
      if (gameInput_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameInput);
      }
      if (gameOver_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameOver);
      }
      if (userCheckNetwork_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserCheckNetwork);
      }
      if (userSessionClosed_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserSessionClosed);
      }
      if (pingTestComplete_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PingTestComplete);
      }
      if (lobbyJoin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyJoin);
      }
      if (lobbyLeave_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyLeave);
      }
      if (lobbyUpdate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyUpdate);
      }
      if (lobbyMatchStart_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyMatchStart);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0L) {
        EventId = other.EventId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TimestampMsec != 0L) {
        TimestampMsec = other.TimestampMsec;
      }
      if (other.filterChanged_ != null) {
        if (filterChanged_ == null) {
          filterChanged_ = new global::Tbmatch.FilterChangedEvent();
        }
        FilterChanged.MergeFrom(other.FilterChanged);
      }
      if (other.waitMatchProgress_ != null) {
        if (waitMatchProgress_ == null) {
          waitMatchProgress_ = new global::Tbmatch.WaitMatchProgressEvent();
        }
        WaitMatchProgress.MergeFrom(other.WaitMatchProgress);
      }
      if (other.matchCreated_ != null) {
        if (matchCreated_ == null) {
          matchCreated_ = new global::Tbmatch.MatchCreatedEvent();
        }
        MatchCreated.MergeFrom(other.MatchCreated);
      }
      if (other.matchOutcome_ != null) {
        if (matchOutcome_ == null) {
          matchOutcome_ = new global::Tbmatch.MatchOutcomeEvent();
        }
        MatchOutcome.MergeFrom(other.MatchOutcome);
      }
      if (other.matchAbandoned_ != null) {
        if (matchAbandoned_ == null) {
          matchAbandoned_ = new global::Tbmatch.MatchAbandonedEvent();
        }
        MatchAbandoned.MergeFrom(other.MatchAbandoned);
      }
      if (other.matchConnected_ != null) {
        if (matchConnected_ == null) {
          matchConnected_ = new global::Tbmatch.MatchConnectedEvent();
        }
        MatchConnected.MergeFrom(other.MatchConnected);
      }
      if (other.matchOver_ != null) {
        if (matchOver_ == null) {
          matchOver_ = new global::Tbmatch.MatchOverEvent();
        }
        MatchOver.MergeFrom(other.MatchOver);
      }
      if (other.gameBegin_ != null) {
        if (gameBegin_ == null) {
          gameBegin_ = new global::Tbmatch.GameBeginEvent();
        }
        GameBegin.MergeFrom(other.GameBegin);
      }
      if (other.gameInput_ != null) {
        if (gameInput_ == null) {
          gameInput_ = new global::Tbmatch.GameInputEvent();
        }
        GameInput.MergeFrom(other.GameInput);
      }
      if (other.gameOver_ != null) {
        if (gameOver_ == null) {
          gameOver_ = new global::Tbmatch.GameOverEvent();
        }
        GameOver.MergeFrom(other.GameOver);
      }
      if (other.userCheckNetwork_ != null) {
        if (userCheckNetwork_ == null) {
          userCheckNetwork_ = new global::Tbmatch.UserCheckNetworkEvent();
        }
        UserCheckNetwork.MergeFrom(other.UserCheckNetwork);
      }
      if (other.userSessionClosed_ != null) {
        if (userSessionClosed_ == null) {
          userSessionClosed_ = new global::Tbmatch.UserSessionClosedEvent();
        }
        UserSessionClosed.MergeFrom(other.UserSessionClosed);
      }
      if (other.pingTestComplete_ != null) {
        if (pingTestComplete_ == null) {
          pingTestComplete_ = new global::Tbmatch.PingTestCompleteEvent();
        }
        PingTestComplete.MergeFrom(other.PingTestComplete);
      }
      if (other.lobbyJoin_ != null) {
        if (lobbyJoin_ == null) {
          lobbyJoin_ = new global::Tbmatch.LobbyJoinEvent();
        }
        LobbyJoin.MergeFrom(other.LobbyJoin);
      }
      if (other.lobbyLeave_ != null) {
        if (lobbyLeave_ == null) {
          lobbyLeave_ = new global::Tbmatch.LobbyLeaveEvent();
        }
        LobbyLeave.MergeFrom(other.LobbyLeave);
      }
      if (other.lobbyUpdate_ != null) {
        if (lobbyUpdate_ == null) {
          lobbyUpdate_ = new global::Tbmatch.LobbyUpdateEvent();
        }
        LobbyUpdate.MergeFrom(other.LobbyUpdate);
      }
      if (other.lobbyMatchStart_ != null) {
        if (lobbyMatchStart_ == null) {
          lobbyMatchStart_ = new global::Tbmatch.LobbyMatchStartEvent();
        }
        LobbyMatchStart.MergeFrom(other.LobbyMatchStart);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = input.ReadInt64();
            break;
          }
          case 16: {
            type_ = (global::Tbmatch.Event.Types.Type) input.ReadEnum();
            break;
          }
          case 24: {
            TimestampMsec = input.ReadInt64();
            break;
          }
          case 106: {
            if (filterChanged_ == null) {
              filterChanged_ = new global::Tbmatch.FilterChangedEvent();
            }
            input.ReadMessage(filterChanged_);
            break;
          }
          case 114: {
            if (waitMatchProgress_ == null) {
              waitMatchProgress_ = new global::Tbmatch.WaitMatchProgressEvent();
            }
            input.ReadMessage(waitMatchProgress_);
            break;
          }
          case 122: {
            if (matchCreated_ == null) {
              matchCreated_ = new global::Tbmatch.MatchCreatedEvent();
            }
            input.ReadMessage(matchCreated_);
            break;
          }
          case 146: {
            if (matchOutcome_ == null) {
              matchOutcome_ = new global::Tbmatch.MatchOutcomeEvent();
            }
            input.ReadMessage(matchOutcome_);
            break;
          }
          case 170: {
            if (matchAbandoned_ == null) {
              matchAbandoned_ = new global::Tbmatch.MatchAbandonedEvent();
            }
            input.ReadMessage(matchAbandoned_);
            break;
          }
          case 186: {
            if (matchConnected_ == null) {
              matchConnected_ = new global::Tbmatch.MatchConnectedEvent();
            }
            input.ReadMessage(matchConnected_);
            break;
          }
          case 194: {
            if (matchOver_ == null) {
              matchOver_ = new global::Tbmatch.MatchOverEvent();
            }
            input.ReadMessage(matchOver_);
            break;
          }
          case 202: {
            if (gameBegin_ == null) {
              gameBegin_ = new global::Tbmatch.GameBeginEvent();
            }
            input.ReadMessage(gameBegin_);
            break;
          }
          case 210: {
            if (gameInput_ == null) {
              gameInput_ = new global::Tbmatch.GameInputEvent();
            }
            input.ReadMessage(gameInput_);
            break;
          }
          case 218: {
            if (gameOver_ == null) {
              gameOver_ = new global::Tbmatch.GameOverEvent();
            }
            input.ReadMessage(gameOver_);
            break;
          }
          case 242: {
            if (userCheckNetwork_ == null) {
              userCheckNetwork_ = new global::Tbmatch.UserCheckNetworkEvent();
            }
            input.ReadMessage(userCheckNetwork_);
            break;
          }
          case 250: {
            if (userSessionClosed_ == null) {
              userSessionClosed_ = new global::Tbmatch.UserSessionClosedEvent();
            }
            input.ReadMessage(userSessionClosed_);
            break;
          }
          case 322: {
            if (pingTestComplete_ == null) {
              pingTestComplete_ = new global::Tbmatch.PingTestCompleteEvent();
            }
            input.ReadMessage(pingTestComplete_);
            break;
          }
          case 402: {
            if (lobbyJoin_ == null) {
              lobbyJoin_ = new global::Tbmatch.LobbyJoinEvent();
            }
            input.ReadMessage(lobbyJoin_);
            break;
          }
          case 410: {
            if (lobbyLeave_ == null) {
              lobbyLeave_ = new global::Tbmatch.LobbyLeaveEvent();
            }
            input.ReadMessage(lobbyLeave_);
            break;
          }
          case 418: {
            if (lobbyUpdate_ == null) {
              lobbyUpdate_ = new global::Tbmatch.LobbyUpdateEvent();
            }
            input.ReadMessage(lobbyUpdate_);
            break;
          }
          case 426: {
            if (lobbyMatchStart_ == null) {
              lobbyMatchStart_ = new global::Tbmatch.LobbyMatchStartEvent();
            }
            input.ReadMessage(lobbyMatchStart_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("E_UNKNOWN")] EUnknown = 0,
        [pbr::OriginalName("E_FILTER_CHANGED")] EFilterChanged = 13,
        [pbr::OriginalName("E_WAIT_MATCH_PROGRESS")] EWaitMatchProgress = 14,
        [pbr::OriginalName("E_MATCH_CREATED")] EMatchCreated = 15,
        [pbr::OriginalName("E_MATCH_OUTCOME")] EMatchOutcome = 18,
        [pbr::OriginalName("E_MATCH_ABANDONED")] EMatchAbandoned = 21,
        [pbr::OriginalName("E_MATCH_CONNECTED")] EMatchConnected = 23,
        [pbr::OriginalName("E_MATCH_OVER")] EMatchOver = 24,
        [pbr::OriginalName("E_GAME_BEGIN")] EGameBegin = 25,
        [pbr::OriginalName("E_GAME_INPUT")] EGameInput = 26,
        [pbr::OriginalName("E_GAME_OVER")] EGameOver = 27,
        [pbr::OriginalName("E_USER_CHECK_NETWORK")] EUserCheckNetwork = 30,
        [pbr::OriginalName("E_USER_SESSION_CLOSED")] EUserSessionClosed = 31,
        [pbr::OriginalName("E_PING_TEST_COMPLETE")] EPingTestComplete = 40,
        [pbr::OriginalName("E_LOBBY_JOIN")] ELobbyJoin = 50,
        [pbr::OriginalName("E_LOBBY_LEAVE")] ELobbyLeave = 51,
        [pbr::OriginalName("E_LOBBY_UPDATE")] ELobbyUpdate = 52,
        [pbr::OriginalName("E_LOBBY_MATCH_START")] ELobbyMatchStart = 53,
      }

    }
    #endregion

  }

  /// <summary>
  /// Wrapper for server-stored events.
  /// </summary>
  public sealed partial class QueuedEvent : pb::IMessage<QueuedEvent> {
    private static readonly pb::MessageParser<QueuedEvent> _parser = new pb::MessageParser<QueuedEvent>(() => new QueuedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueuedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedEvent(QueuedEvent other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      restrictSessionId_ = other.restrictSessionId_;
      expiryTimestampMsec_ = other.expiryTimestampMsec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedEvent Clone() {
      return new QueuedEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::Tbmatch.Event event_;
    /// <summary>
    /// The event queued for delivery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "restrict_session_id" field.</summary>
    public const int RestrictSessionIdFieldNumber = 2;
    private string restrictSessionId_ = "";
    /// <summary>
    /// If set, only return the event if the requesting session matches this ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RestrictSessionId {
      get { return restrictSessionId_; }
      set {
        restrictSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry_timestamp_msec" field.</summary>
    public const int ExpiryTimestampMsecFieldNumber = 3;
    private long expiryTimestampMsec_;
    /// <summary>
    /// If set, discard the event after this time is reached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiryTimestampMsec {
      get { return expiryTimestampMsec_; }
      set {
        expiryTimestampMsec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueuedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueuedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (RestrictSessionId != other.RestrictSessionId) return false;
      if (ExpiryTimestampMsec != other.ExpiryTimestampMsec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (RestrictSessionId.Length != 0) hash ^= RestrictSessionId.GetHashCode();
      if (ExpiryTimestampMsec != 0L) hash ^= ExpiryTimestampMsec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (RestrictSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RestrictSessionId);
      }
      if (ExpiryTimestampMsec != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpiryTimestampMsec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (RestrictSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RestrictSessionId);
      }
      if (ExpiryTimestampMsec != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiryTimestampMsec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueuedEvent other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::Tbmatch.Event();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.RestrictSessionId.Length != 0) {
        RestrictSessionId = other.RestrictSessionId;
      }
      if (other.ExpiryTimestampMsec != 0L) {
        ExpiryTimestampMsec = other.ExpiryTimestampMsec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::Tbmatch.Event();
            }
            input.ReadMessage(event_);
            break;
          }
          case 18: {
            RestrictSessionId = input.ReadString();
            break;
          }
          case 24: {
            ExpiryTimestampMsec = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEventRequest : pb::IMessage<GetEventRequest> {
    private static readonly pb::MessageParser<GetEventRequest> _parser = new pb::MessageParser<GetEventRequest>(() => new GetEventRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventRequest(GetEventRequest other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventRequest Clone() {
      return new GetEventRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEventResult : pb::IMessage<GetEventResult> {
    private static readonly pb::MessageParser<GetEventResult> _parser = new pb::MessageParser<GetEventResult>(() => new GetEventResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbmatch.EventReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventResult(GetEventResult other) : this() {
      version_ = other.version_;
      event_ = other.event_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventResult Clone() {
      return new GetEventResult(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tbmatch.Event> _repeated_event_codec
        = pb::FieldCodec.ForMessage(18, global::Tbmatch.Event.Parser);
    private readonly pbc::RepeatedField<global::Tbmatch.Event> event_ = new pbc::RepeatedField<global::Tbmatch.Event>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbmatch.Event> Event {
      get { return event_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!event_.Equals(other.event_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= event_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      event_.WriteTo(output, _repeated_event_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += event_.CalculateSize(_repeated_event_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventResult other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      event_.Add(other.event_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            event_.AddEntriesFrom(input, _repeated_event_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
