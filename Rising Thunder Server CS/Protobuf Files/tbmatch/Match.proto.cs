// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbmatch/match.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rising_Thunder_Server_CS.Protobufs.Tbmatch {

  /// <summary>Holder for reflection information generated from tbmatch/match.proto</summary>
  public static partial class MatchReflection {

    #region Descriptor
    /// <summary>File descriptor for tbmatch/match.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0Ym1hdGNoL21hdGNoLnByb3RvEgd0Ym1hdGNoGhF0YnJwYy90YnJwYy5w",
            "cm90byIqCgxGZWF0dXJlVmFsdWUSCwoDdGFnGAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJIjoKEENsaWVudEZlYXR1cmVTZXQSJgoHZmVhdHVyZRgBIAMoCzIVLnRi",
            "bWF0Y2guRmVhdHVyZVZhbHVlIi4KC05ldHdvcmtBZGRyEhEKCWhvc3RfbmFt",
            "ZRgBIAEoCRIMCgRwb3J0GAIgASgFIh8KC1ZhcmlhbnRTcGVjEhAKCHNwZWNp",
            "YWxzGAEgAygFImMKDUNoYXJhY3RlclNwZWMSEQoJdHlwZV9uYW1lGAEgASgJ",
            "EhcKD3NlY29uZGFyeV9tZXRlchgKIAEoBRImCgh2YXJpYW50cxgWIAEoCzIU",
            "LnRibWF0Y2guVmFyaWFudFNwZWMiugEKE1RyYWluaW5nR2FtZU9wdGlvbnMS",
            "FAoMc3R1bl9lbmFibGVkGAEgASgIEi4KDHN1cGVyX3JlZmlsbBgCIAEoDjIY",
            "LnRibWF0Y2guTWV0ZXJSZWZpbGxUeXBlEjAKDmtpbmV0aWNfcmVmaWxsGAMg",
            "ASgOMhgudGJtYXRjaC5NZXRlclJlZmlsbFR5cGUSFwoPc2hvcnRfY29vbGRv",
            "d25zGAQgASgIEhIKCnNob3dfc3RhdHMYBSABKAgi/wEKFlRyYWluaW5nRHlu",
            "YW1pY09wdGlvbnMSNgoQdHJhaW5pbmdfb3B0aW9ucxgBIAEoCzIcLnRibWF0",
            "Y2guVHJhaW5pbmdHYW1lT3B0aW9ucxIqCgpjaGFyYWN0ZXJzGAQgAygLMhYu",
            "dGJtYXRjaC5DaGFyYWN0ZXJTcGVjEhMKC3Jlc2V0X2xldmVsGAUgASgIEjgK",
            "EW9wcG9uZW50X21vdmVtZW50GBQgASgOMh0udGJtYXRjaC5UcmFpbmluZ01v",
            "dmVtZW50VHlwZRIyCg5vcHBvbmVudF9ibG9jaxgVIAEoDjIaLnRibWF0Y2gu",
            "VHJhaW5pbmdCbG9ja1R5cGUiMgoEQ2hhdBIMCgR0aW1lGAEgASgDEg4KBm9y",
            "aWdpbhgCIAEoCRIMCgR0ZXh0GAMgASgJIqQBCgtHYW1lT3B0aW9ucxInCgRt",
            "b2RlGAEgASgOMhkudGJtYXRjaC5HYW1lT3B0aW9ucy5Nb2RlEjYKEHRyYWlu",
            "aW5nX29wdGlvbnMYFCABKAsyHC50Ym1hdGNoLlRyYWluaW5nR2FtZU9wdGlv",
            "bnMiNAoETW9kZRINCglNT0RFX1pFUk8QABIMCghHTV9GSUdIVBABEg8KC0dN",
            "X1RSQUlOSU5HEAIiiAIKCkdhbWVDb25maWcSKgoGcGxheWVyGAIgAygLMhou",
            "dGJtYXRjaC5HYW1lQ29uZmlnLlBsYXllchIlCgdvcHRpb25zGAUgASgLMhQu",
            "dGJtYXRjaC5HYW1lT3B0aW9ucxIQCghtYXRjaF9pZBgDIAEoAxIgChhfX2Rl",
            "cHJlY2F0ZWRfZ2FtZV9udW1iZXIYBCABKAUacwoGUGxheWVyEg8KB3VzZXJf",
            "aWQYASABKAMSDgoGaGFuZGxlGAIgASgJEikKCWNoYXJhY3RlchgDIAEoCzIW",
            "LnRibWF0Y2guQ2hhcmFjdGVyU3BlYxIPCgdlY2hlbG9uGAogASgFEgwKBHRp",
            "ZXIYCyABKAUiZwoOTmV4dEdhbWVDb25maWcSLgoOY2hhcmFjdGVyX3NwZWMY",
            "ASADKAsyFi50Ym1hdGNoLkNoYXJhY3RlclNwZWMSJQoHb3B0aW9ucxgCIAEo",
            "CzIULnRibWF0Y2guR2FtZU9wdGlvbnMiigEKEkdhbWVFbmRwb2ludENvbmZp",
            "ZxIMCgRzbG90GAEgASgFEiQKBnNlcnZlchgCIAEoCzIULnRibWF0Y2guTmV0",
            "d29ya0FkZHISDgoGc2VjcmV0GAMgASgGEhwKFHBpbmdfc2NvcmVfdGhyZXNo",
            "b2xkGAQgASgCEhIKCnNoYXJlZF9rZXkYBSABKAwiuQQKDkdhbWVEZXNjcmlw",
            "dG9yEiEKBGdhbWUYASABKAsyEy50Ym1hdGNoLkdhbWVDb25maWcSLgoGc291",
            "cmNlGAggASgOMh4udGJtYXRjaC5HYW1lRGVzY3JpcHRvci5Tb3VyY2USLgoG",
            "cGxheWVyGAcgAygLMh4udGJtYXRjaC5HYW1lRGVzY3JpcHRvci5QbGF5ZXIS",
            "EwoLcG9ydGFsX3V1aWQYAyABKAwSIAoEdHlwZRgEIAEoDjISLnRibWF0Y2gu",
            "TWF0Y2hUeXBlEhUKDWJ1aWxkX3ZlcnNpb24YBSABKAkSEAoIbG9iYnlfaWQY",
            "CSABKAMSOgoVX19kZXByZWNhdGVkX2VuZHBvaW50GAIgAygLMhsudGJtYXRj",
            "aC5HYW1lRW5kcG9pbnRDb25maWcSHgoWX19kZXByZWNhdGVkX3JlbW90ZV9p",
            "cBgGIAMoCRqwAQoGUGxheWVyEi0KCGVuZHBvaW50GAEgASgLMhsudGJtYXRj",
            "aC5HYW1lRW5kcG9pbnRDb25maWcSEQoJcmVtb3RlX2lwGAIgASgJEg4KBnJh",
            "dGluZxgDIAEoAhIRCgl3YWl0X3RpbWUYBSABKAISEgoKcGluZ19zY29yZRgG",
            "IAEoAhIPCgdlY2hlbG9uGAogASgFEgwKBHRpZXIYCyABKAUSDgoGcG9pbnRz",
            "GAwgASgFIjUKBlNvdXJjZRIPCgtTT1VSQ0VfWkVSTxAAEg8KC01BVENIX01B",
            "S0VSEAESCQoFTE9CQlkQAiI9Cg5QaW5nVGVzdFJlc3VsdBIrCgZjb25maWcY",
            "ASABKAsyGy50Ym1hdGNoLkdhbWVFbmRwb2ludENvbmZpZyJFChNEZXN5bmNS",
            "ZXBvcnRSZXF1ZXN0EhAKCG1hdGNoX2lkGAIgASgDEgwKBHNsb3QYAyABKAUS",
            "DgoGYnVuZGxlGAQgASgMIp0BChJEZXN5bmNSZXBvcnRIZWFkZXISEAoIbWF0",
            "Y2hfaWQYASABKAMSDAoEc2xvdBgCIAEoBRITCgtyZXBvcnRfcGF0aBgDIAEo",
            "CRIoCgtnYW1lX2NvbmZpZxgEIAEoCzITLnRibWF0Y2guR2FtZUNvbmZpZxIR",
            "Cgl0aW1lc3RhbXAYBSABKAMSFQoNYnVpbGRfdmVyc2lvbhgGIAEoCSIjCgtJ",
            "bnB1dFJlY29yZBIUCgxpbnB1dF9yZWNvcmQYASABKAwieAoQR2FtZVJlcGxh",
            "eVJlY29yZBIjCgZjb25maWcYASABKAsyEy50Ym1hdGNoLkdhbWVDb25maWcS",
            "KgoMaW5wdXRfcmVjb3JkGAIgASgLMhQudGJtYXRjaC5JbnB1dFJlY29yZBIT",
            "CgtnYW1lX251bWJlchgDIAEoBSI5CgxSb2xsYmFja0luZm8SEQoJb2xkX2Zy",
            "YW1lGAEgASgFEhYKDnJvbGxiYWNrX2ZyYW1lGAIgASgFImgKE1JvbGxiYWNr",
            "SW5wdXRSZWNvcmQSIwoFaW5wdXQYASABKAsyFC50Ym1hdGNoLklucHV0UmVj",
            "b3JkEiwKDXJvbGxiYWNrX2RhdGEYAiADKAsyFS50Ym1hdGNoLlJvbGxiYWNr",
            "SW5mbyJyChRSb2xsYmFja1JlcGxheVJlY29yZBIjCgZjb25maWcYASADKAsy",
            "Ey50Ym1hdGNoLkdhbWVDb25maWcSNQoPcm9sbGJhY2tfcmVjb3JkGAIgAygL",
            "MhwudGJtYXRjaC5Sb2xsYmFja0lucHV0UmVjb3JkIssBCg9HZXRNYXRjaFJl",
            "cXVlc3QSIAoEdHlwZRgBIAEoDjISLnRibWF0Y2guTWF0Y2hUeXBlEhAKCGFy",
            "ZW5hX2lkGAIgASgDEiUKB25ldHdvcmsYCiABKAsyFC50Ym1hdGNoLk5ldHdv",
            "cmtBZGRyEikKCWNoYXJhY3RlchgLIAEoCzIWLnRibWF0Y2guQ2hhcmFjdGVy",
            "U3BlYxIyCg5za2lsbF9lc3RpbWF0ZRgPIAEoDjIaLnRibWF0Y2guU2tpbGxF",
            "c3RpbWF0ZVR5cGUiLAoKR2FtZVJlcG9ydBIQCgh3aW5fc2xvdBgBIAEoBRIM",
            "CgRkcmF3GAIgASgIIpABChBQb3J0YWxHYW1lUmVwb3J0EigKC2dhbWVfcmVw",
            "b3J0GAEgASgLMhMudGJtYXRjaC5HYW1lUmVwb3J0EhIKCnN0YXJ0X3RpbWUY",
            "AiABKAMSEAoIZW5kX3RpbWUYAyABKAMSLAoLZ2FtZV9jb25maWcYBCABKAsy",
            "Fy50Ym1hdGNoLk5leHRHYW1lQ29uZmlnInQKC01hdGNoUmVwb3J0EhUKDXBs",
            "YXllcnNfYWdyZWUYASABKAgSEAoId2luX3Nsb3QYAiABKAUSDAoEZHJhdxgD",
            "IAEoCBIuCgtnYW1lX3JlcG9ydBgEIAMoCzIZLnRibWF0Y2guUG9ydGFsR2Ft",
            "ZVJlcG9ydCJDChpHZXRHYW1lUmVwbGF5UmVjb3JkUmVxdWVzdBIQCghtYXRj",
            "aF9pZBgBIAEoAxITCgtnYW1lX251bWJlchgCIAEoBSJGChlHZXRHYW1lUmVw",
            "bGF5UmVjb3JkUmVzdWx0EikKBnJlY29yZBgBIAEoCzIZLnRibWF0Y2guR2Ft",
            "ZVJlcGxheVJlY29yZCJ1Cg5DaGFyYWN0ZXJTdGF0cxIRCgl0eXBlX25hbWUY",
            "ASABKAkSEAoIeHBfbGV2ZWwYAiABKAUSCgoCeHAYAyABKAUSDAoEd2lucxgE",
            "IAEoBRIOCgZsb3NzZXMYBSABKAUSFAoMbGV2ZWxfeHBfbWluGAYgAygFIoEC",
            "CgtQbGF5ZXJTdGF0cxIQCgh4cF9sZXZlbBgBIAEoBRIKCgJ4cBgCIAEoBRIM",
            "CgR3aW5zGAMgASgFEg4KBmxvc3NlcxgEIAEoBRIrCgpjaGFyX3N0YXRzGAUg",
            "AygLMhcudGJtYXRjaC5DaGFyYWN0ZXJTdGF0cxIUCgxsZXZlbF94cF9taW4Y",
            "BiADKAUSEgoKd2luX3N0cmVhaxgKIAEoBRIPCgdlY2hlbG9uGBQgASgFEgwK",
            "BHRpZXIYFSABKAUSDgoGcG9pbnRzGBYgASgFEhcKD3RpZXJfbWF4X3BvaW50",
            "cxgXIAEoBRIXCg9yYW5rZWRfc3RhbmRpbmcYGCABKAUicgoRUGxheWVyUHJl",
            "ZmVyZW5jZXMSFQoNc2VsZWN0ZWRfY2hhchgBIAEoCRIaChJsb2NhbF9wbGF5",
            "ZXJfcHJlZnMYAiABKAwSKgoKY2hhcl9wcmVmcxgKIAMoCzIWLnRibWF0Y2gu",
            "Q2hhcmFjdGVyU3BlYyJTCh5VcGRhdGVQbGF5ZXJQcmVmZXJlbmNlc1JlcXVl",
            "c3QSMQoNdXBkYXRlZF9wcmVmcxgBIAEoCzIaLnRibWF0Y2guUGxheWVyUHJl",
            "ZmVyZW5jZXMihAEKCkdhbWVSZXN1bHQSEAoIbWF0Y2hfaWQYASABKAMSEwoL",
            "Z2FtZV9udW1iZXIYAiABKAUSJQoHb3V0Y29tZRgDIAEoDjIULnRibWF0Y2gu",
            "R2FtZU91dGNvbWUSEQoJc2xvdF93aW5zGAUgAygFEhUKDWR1cmF0aW9uX3Nl",
            "Y3MYBiABKAUi6wIKC01hdGNoUmVzdWx0EhAKCG1hdGNoX2lkGAEgASgDEiAK",
            "BHR5cGUYAiABKA4yEi50Ym1hdGNoLk1hdGNoVHlwZRIbChNjaGFyYWN0ZXJf",
            "dHlwZV9uYW1lGAMgASgJEiYKB291dGNvbWUYBCABKA4yFS50Ym1hdGNoLk1h",
            "dGNoT3V0Y29tZRIXCg9wZWVyX2Rpc2Nvbm5lY3QYBSABKAgSEgoKc3RhcnRf",
            "dGltZRgGIAEoCRIVCg1kdXJhdGlvbl9zZWNzGAcgASgFEhIKCmdhbWVfY291",
            "bnQYCCABKAUSEQoJZ2FtZXNfd29uGAkgASgFEiQKHG9wcG9uZW50X2NoYXJh",
            "Y3Rlcl90eXBlX25hbWUYFCABKAkSGAoQb3Bwb25lbnRfdXNlcl9pZBgVIAEo",
            "AxIXCg9vcHBvbmVudF9oYW5kbGUYFiABKAkSHwoXX19kZXByZWNhdGVkX2hh",
            "c19yZXBsYXkYHiABKAgi6AIKD01hdGNoRXhwZXJpZW5jZRIRCglwbGF5ZXJf",
            "eHAYCiABKAUSFAoMcGxheWVyX2xldmVsGAsgASgFEhsKE3BsYXllcl9sZXZl",
            "bF94cF9taW4YDCADKAUSFwoPcGxheWVyX21hdGNoX3hwGBUgASgFEhsKE3Bs",
            "YXllcl93aW5fYm9udXNfeHAYFiABKAUSFwoPcGxheWVyX2Jvb3N0X3hwGBcg",
            "ASgFEhoKEmNoYXJhY3Rlcl9zdGFydF94cBgeIAEoBRIaChJjaGFyYWN0ZXJf",
            "bWF0Y2hfeHAYHyABKAUSHgoWY2hhcmFjdGVyX3dpbl9ib251c194cBggIAEo",
            "BRIaChJjaGFyYWN0ZXJfYm9vc3RfeHAYISABKAUSFwoPY2hhcmFjdGVyX2xl",
            "dmVsGCMgASgFEh4KFmNoYXJhY3Rlcl9sZXZlbF94cF9taW4YIiADKAUSEwoL",
            "cmFua19wb2ludHMYKCABKAUiywEKCkdhbWVSZWNvcmQSEAoIbWF0Y2hfaWQY",
            "ASABKAMSEwoLZ2FtZV9udW1iZXIYAiABKAUSIAoEdHlwZRgDIAEoDjISLnRi",
            "bWF0Y2guTWF0Y2hUeXBlEiMKBmNvbmZpZxgEIAEoCzITLnRibWF0Y2guR2Ft",
            "ZUNvbmZpZxIQCgh3aW5fc2xvdBgFIAEoBRISCgpzdGFydF90aW1lGAYgASgJ",
            "EhUKDWR1cmF0aW9uX3NlY3MYByABKAUSEgoKaGFzX3JlcGxheRgKIAEoCCI7",
            "ChRHZXRQbGF5ZXJTdGF0c1Jlc3VsdBIjCgVzdGF0cxgBIAEoCzIULnRibWF0",
            "Y2guUGxheWVyU3RhdHMiOQoUR2V0UmVjZW50R2FtZXNSZXN1bHQSIQoEZ2Ft",
            "ZRgBIAMoCzITLnRibWF0Y2guR2FtZVJlY29yZCLcAQoLR2FtZVByb2ZpbGUS",
            "EgoKYWNjb3VudF9pZBgBIAEoAxIOCgZoYW5kbGUYAiABKAkSEgoKZ2l2ZW5f",
            "bmFtZRgDIAEoCRIOCgZsb2NhbGUYBCABKAkSIwoFc3RhdHMYCiABKAsyFC50",
            "Ym1hdGNoLlBsYXllclN0YXRzEjAKDHBsYXllcl9wcmVmcxgNIAEoCzIaLnRi",
            "bWF0Y2guUGxheWVyUHJlZmVyZW5jZXMSLgoLZmVhdHVyZV9zZXQYFCABKAsy",
            "GS50Ym1hdGNoLkNsaWVudEZlYXR1cmVTZXQijAEKEFJlc2V0R2FtZVJlcXVl",
            "c3QSEAoIbWF0Y2hfaWQYASABKAMSLgoOY2hhcmFjdGVyX3NwZWMYAiABKAsy",
            "Fi50Ym1hdGNoLkNoYXJhY3RlclNwZWMSNgoQdHJhaW5pbmdfb3B0aW9ucxgD",
            "IAEoCzIcLnRibWF0Y2guVHJhaW5pbmdHYW1lT3B0aW9ucyphCglNYXRjaFR5",
            "cGUSEwoPTUFUQ0hfVFlQRV9aRVJPEAASDwoLTVRfVU5SQU5LRUQQARINCglN",
            "VF9SQU5LRUQQAhIRCg1NVF9UT1VSTkFNRU5UEAMSDAoITVRfTE9CQlkQBCpS",
            "CgxNYXRjaE91dGNvbWUSFgoSTUFUQ0hfT1VUQ09NRV9aRVJPEAASCgoGTU9f",
            "V09OEAESCwoHTU9fTE9TVBACEhEKDU1PX0RJU0NPTk5FQ1QQAypKCgtHYW1l",
            "T3V0Y29tZRIVChFHQU1FX09VVENPTUVfWkVSTxAAEgoKBkdPX1dPThABEgsK",
            "B0dPX0xPU1QQAhILCgdHT19EUkFXEAMqWQoPTWV0ZXJSZWZpbGxUeXBlEhkK",
            "FU1FVEVSX1JFRklMX1RZUEVfWkVSTxAAEg4KCk1SVF9OT1JNQUwQARIOCgpN",
            "UlRfUkVGSUxMEAISCwoHTVJUX01BWBADKoYBChRUcmFpbmluZ01vdmVtZW50",
            "VHlwZRIfChtUUkFJTklOR19NT1ZFTUVOVF9UWVBFX1pFUk8QABINCglUTVRf",
            "U1RBTkQQARIOCgpUTVRfQ1JPVUNIEAISDAoIVE1UX0pVTVAQAxIOCgpUTVRf",
            "UkVDT1JEEAsSEAoMVE1UX1BMQVlCQUNLEAwqXgoRVHJhaW5pbmdCbG9ja1R5",
            "cGUSHAoYVFJBSU5JTkdfQkxPQ0tfVFlQRV9aRVJPEAASDAoIVEJUX0RPTlQQ",
            "ARINCglUQlRfQkxPQ0sQAhIOCgpUQlRfQUxXQVlTEAMqbwoRU2tpbGxFc3Rp",
            "bWF0ZVR5cGUSDAoIU0VUX05PTkUQABIQCgxTRVRfQkVHSU5ORVIQARIUChBT",
            "RVRfSU5URVJNRURJQVRFEAISEAoMU0VUX0FEVkFOQ0VEEAMSEgoOU0VUX1RI",
            "VU5ERVJPVVMQBDKTBgoMTWF0Y2hTZXJ2aWNlEj4KDkdldEdhbWVQcm9maWxl",
            "EgwudGJycGMuRW1wdHkaFC50Ym1hdGNoLkdhbWVQcm9maWxlIgjY8xhkyPMY",
            "CxI7CghQaW5nVGVzdBIMLnRicnBjLkVtcHR5GhcudGJtYXRjaC5QaW5nVGVz",
            "dFJlc3VsdCII2PMYZMjzGAsSPAoIR2V0TWF0Y2gSGC50Ym1hdGNoLkdldE1h",
            "dGNoUmVxdWVzdBoMLnRicnBjLkVtcHR5IgjY8xhkyPMYCxI2Cg5SZXN1bWVH",
            "ZXRNYXRjaBIMLnRicnBjLkVtcHR5GgwudGJycGMuRW1wdHkiCNjzGGTI8xgL",
            "EjYKDkNhbmNlbEdldE1hdGNoEgwudGJycGMuRW1wdHkaDC50YnJwYy5FbXB0",
            "eSII2PMYZMjzGAsSPgoJUmVzZXRHYW1lEhkudGJtYXRjaC5SZXNldEdhbWVS",
            "ZXF1ZXN0GgwudGJycGMuRW1wdHkiCNjzGGTI8xgLEmgKE0dldEdhbWVSZXBs",
            "YXlSZWNvcmQSIy50Ym1hdGNoLkdldEdhbWVSZXBsYXlSZWNvcmRSZXF1ZXN0",
            "GiIudGJtYXRjaC5HZXRHYW1lUmVwbGF5UmVjb3JkUmVzdWx0IgjY8xhkyPMY",
            "CxJACgxEZXN5bmNSZXBvcnQSHC50Ym1hdGNoLkRlc3luY1JlcG9ydFJlcXVl",
            "c3QaDC50YnJwYy5FbXB0eSIEyPMYABJaChdVcGRhdGVQbGF5ZXJQcmVmZXJl",
            "bmNlcxInLnRibWF0Y2guVXBkYXRlUGxheWVyUHJlZmVyZW5jZXNSZXF1ZXN0",
            "GgwudGJycGMuRW1wdHkiCNjzGGTI8xgLEkcKDkdldFBsYXllclN0YXRzEgwu",
            "dGJycGMuRW1wdHkaHS50Ym1hdGNoLkdldFBsYXllclN0YXRzUmVzdWx0IgjY",
            "8xhkyPMYCxJHCg5HZXRSZWNlbnRHYW1lcxIMLnRicnBjLkVtcHR5Gh0udGJt",
            "YXRjaC5HZXRSZWNlbnRHYW1lc1Jlc3VsdCII2PMYZMjzGAtiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchOutcome), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOutcome), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingMovementType), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingBlockType), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.SkillEstimateType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue.Parser, new[]{ "Tag", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ClientFeatureSet), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ClientFeatureSet.Parser, new[]{ "Feature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr.Parser, new[]{ "HostName", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.VariantSpec), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.VariantSpec.Parser, new[]{ "Specials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec.Parser, new[]{ "TypeName", "SecondaryMeter", "Variants" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions.Parser, new[]{ "StunEnabled", "SuperRefill", "KineticRefill", "ShortCooldowns", "ShowStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingDynamicOptions), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingDynamicOptions.Parser, new[]{ "TrainingOptions", "Characters", "ResetLevel", "OpponentMovement", "OpponentBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.Chat), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.Chat.Parser, new[]{ "Time", "Origin", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions.Parser, new[]{ "Mode", "TrainingOptions" }, null, new[]{ typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Parser, new[]{ "Player", "Options", "MatchId", "DeprecatedGameNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player.Parser, new[]{ "UserId", "Handle", "Character", "Echelon", "Tier" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NextGameConfig), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NextGameConfig.Parser, new[]{ "CharacterSpec", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig.Parser, new[]{ "Slot", "Server", "Secret", "PingScoreThreshold", "SharedKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Parser, new[]{ "Game", "Source", "Player", "PortalUuid", "Type", "BuildVersion", "LobbyId", "DeprecatedEndpoint", "DeprecatedRemoteIp" }, null, new[]{ typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Source) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player.Parser, new[]{ "Endpoint", "RemoteIp", "Rating", "WaitTime", "PingScore", "Echelon", "Tier", "Points" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PingTestResult), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PingTestResult.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.DesyncReportRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.DesyncReportRequest.Parser, new[]{ "MatchId", "Slot", "Bundle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.DesyncReportHeader), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.DesyncReportHeader.Parser, new[]{ "MatchId", "Slot", "ReportPath", "GameConfig", "Timestamp", "BuildVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord.Parser, new[]{ "InputRecord_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReplayRecord), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReplayRecord.Parser, new[]{ "Config", "InputRecord", "GameNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo.Parser, new[]{ "OldFrame", "RollbackFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord.Parser, new[]{ "Input", "RollbackData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackReplayRecord), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackReplayRecord.Parser, new[]{ "Config", "RollbackRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetMatchRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetMatchRequest.Parser, new[]{ "Type", "ArenaId", "Network", "Character", "SkillEstimate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReport), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReport.Parser, new[]{ "WinSlot", "Draw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport.Parser, new[]{ "GameReport", "StartTime", "EndTime", "GameConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReport), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReport.Parser, new[]{ "PlayersAgree", "WinSlot", "Draw", "GameReport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetGameReplayRecordRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetGameReplayRecordRequest.Parser, new[]{ "MatchId", "GameNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetGameReplayRecordResult), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetGameReplayRecordResult.Parser, new[]{ "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats.Parser, new[]{ "TypeName", "XpLevel", "Xp", "Wins", "Losses", "LevelXpMin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats.Parser, new[]{ "XpLevel", "Xp", "Wins", "Losses", "CharStats", "LevelXpMin", "WinStreak", "Echelon", "Tier", "Points", "TierMaxPoints", "RankedStanding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences.Parser, new[]{ "SelectedChar", "LocalPlayerPrefs", "CharPrefs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.UpdatePlayerPreferencesRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.UpdatePlayerPreferencesRequest.Parser, new[]{ "UpdatedPrefs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameResult), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameResult.Parser, new[]{ "MatchId", "GameNumber", "Outcome", "SlotWins", "DurationSecs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchResult), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchResult.Parser, new[]{ "MatchId", "Type", "CharacterTypeName", "Outcome", "PeerDisconnect", "StartTime", "DurationSecs", "GameCount", "GamesWon", "OpponentCharacterTypeName", "OpponentUserId", "OpponentHandle", "DeprecatedHasReplay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchExperience), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchExperience.Parser, new[]{ "PlayerXp", "PlayerLevel", "PlayerLevelXpMin", "PlayerMatchXp", "PlayerWinBonusXp", "PlayerBoostXp", "CharacterStartXp", "CharacterMatchXp", "CharacterWinBonusXp", "CharacterBoostXp", "CharacterLevel", "CharacterLevelXpMin", "RankPoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord.Parser, new[]{ "MatchId", "GameNumber", "Type", "Config", "WinSlot", "StartTime", "DurationSecs", "HasReplay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetPlayerStatsResult), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetPlayerStatsResult.Parser, new[]{ "Stats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetRecentGamesResult), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GetRecentGamesResult.Parser, new[]{ "Game" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameProfile), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameProfile.Parser, new[]{ "AccountId", "Handle", "GivenName", "Locale", "Stats", "PlayerPrefs", "FeatureSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ResetGameRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ResetGameRequest.Parser, new[]{ "MatchId", "CharacterSpec", "TrainingOptions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MatchType {
    [pbr::OriginalName("MATCH_TYPE_ZERO")] Zero = 0,
    /// <summary>
    /// Earn experience, but not ranking points.
    /// </summary>
    [pbr::OriginalName("MT_UNRANKED")] MtUnranked = 1,
    /// <summary>
    /// Earn experience, ranking points adjusted from outcome.
    /// </summary>
    [pbr::OriginalName("MT_RANKED")] MtRanked = 2,
    /// <summary>
    /// Join elimination tournament.
    /// </summary>
    [pbr::OriginalName("MT_TOURNAMENT")] MtTournament = 3,
    /// <summary>
    /// Custom lobby match.
    /// </summary>
    [pbr::OriginalName("MT_LOBBY")] MtLobby = 4,
  }

  /// <summary>
  /// Player-specific outcome enum of a complete match.
  /// </summary>
  public enum MatchOutcome {
    [pbr::OriginalName("MATCH_OUTCOME_ZERO")] Zero = 0,
    [pbr::OriginalName("MO_WON")] MoWon = 1,
    [pbr::OriginalName("MO_LOST")] MoLost = 2,
    [pbr::OriginalName("MO_DISCONNECT")] MoDisconnect = 3,
  }

  /// <summary>
  /// Player-specific outcome enum of a particular game.
  /// </summary>
  public enum GameOutcome {
    [pbr::OriginalName("GAME_OUTCOME_ZERO")] Zero = 0,
    [pbr::OriginalName("GO_WON")] GoWon = 1,
    [pbr::OriginalName("GO_LOST")] GoLost = 2,
    [pbr::OriginalName("GO_DRAW")] GoDraw = 3,
  }

  /// <summary>
  /// How the meter refills in training mode
  /// </summary>
  public enum MeterRefillType {
    [pbr::OriginalName("METER_REFIL_TYPE_ZERO")] MeterRefilTypeZero = 0,
    /// <summary>
    /// Same as in online mode
    /// </summary>
    [pbr::OriginalName("MRT_NORMAL")] MrtNormal = 1,
    /// <summary>
    /// Increase at constant rate
    /// </summary>
    [pbr::OriginalName("MRT_REFILL")] MrtRefill = 2,
    /// <summary>
    /// Max out on reset
    /// </summary>
    [pbr::OriginalName("MRT_MAX")] MrtMax = 3,
  }

  /// <summary>
  /// How the dummy opponent moves
  /// </summary>
  public enum TrainingMovementType {
    [pbr::OriginalName("TRAINING_MOVEMENT_TYPE_ZERO")] Zero = 0,
    /// <summary>
    /// Same as in online mode
    /// </summary>
    [pbr::OriginalName("TMT_STAND")] TmtStand = 1,
    /// <summary>
    /// Increase at constant rate
    /// </summary>
    [pbr::OriginalName("TMT_CROUCH")] TmtCrouch = 2,
    /// <summary>
    /// Max out on reset
    /// </summary>
    [pbr::OriginalName("TMT_JUMP")] TmtJump = 3,
    /// <summary>
    /// Max out on reset
    /// </summary>
    [pbr::OriginalName("TMT_RECORD")] TmtRecord = 11,
    /// <summary>
    /// Max out on reset
    /// </summary>
    [pbr::OriginalName("TMT_PLAYBACK")] TmtPlayback = 12,
  }

  /// <summary>
  /// How the dummy opponent blocks
  /// </summary>
  public enum TrainingBlockType {
    [pbr::OriginalName("TRAINING_BLOCK_TYPE_ZERO")] Zero = 0,
    /// <summary>
    /// Same as in online mode
    /// </summary>
    [pbr::OriginalName("TBT_DONT")] TbtDont = 1,
    /// <summary>
    /// Increase at constant rate
    /// </summary>
    [pbr::OriginalName("TBT_BLOCK")] TbtBlock = 2,
    /// <summary>
    /// Max out on reset
    /// </summary>
    [pbr::OriginalName("TBT_ALWAYS")] TbtAlways = 3,
  }

  /// <summary>
  /// Self-estimate of user's familiarity with/skills at fighting games.
  /// </summary>
  public enum SkillEstimateType {
    [pbr::OriginalName("SET_NONE")] SetNone = 0,
    [pbr::OriginalName("SET_BEGINNER")] SetBeginner = 1,
    [pbr::OriginalName("SET_INTERMEDIATE")] SetIntermediate = 2,
    [pbr::OriginalName("SET_ADVANCED")] SetAdvanced = 3,
    [pbr::OriginalName("SET_THUNDEROUS")] SetThunderous = 4,
  }

  #endregion

  #region Messages
  public sealed partial class FeatureValue : pb::IMessage<FeatureValue> {
    private static readonly pb::MessageParser<FeatureValue> _parser = new pb::MessageParser<FeatureValue>(() => new FeatureValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureValue(FeatureValue other) : this() {
      tag_ = other.tag_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureValue Clone() {
      return new FeatureValue(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    /// <summary>
    /// Feature's unique tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Config value set for the feature, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureValue other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Which client features the server has instructed to enable.
  /// </summary>
  public sealed partial class ClientFeatureSet : pb::IMessage<ClientFeatureSet> {
    private static readonly pb::MessageParser<ClientFeatureSet> _parser = new pb::MessageParser<ClientFeatureSet>(() => new ClientFeatureSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientFeatureSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientFeatureSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientFeatureSet(ClientFeatureSet other) : this() {
      feature_ = other.feature_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientFeatureSet Clone() {
      return new ClientFeatureSet(this);
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue> _repeated_feature_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue> feature_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue>();
    /// <summary>
    /// List of enabled features and config values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.FeatureValue> Feature {
      get { return feature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientFeatureSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientFeatureSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!feature_.Equals(other.feature_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= feature_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      feature_.WriteTo(output, _repeated_feature_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += feature_.CalculateSize(_repeated_feature_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientFeatureSet other) {
      if (other == null) {
        return;
      }
      feature_.Add(other.feature_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            feature_.AddEntriesFrom(input, _repeated_feature_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkAddr : pb::IMessage<NetworkAddr> {
    private static readonly pb::MessageParser<NetworkAddr> _parser = new pb::MessageParser<NetworkAddr>(() => new NetworkAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkAddr(NetworkAddr other) : this() {
      hostName_ = other.hostName_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkAddr Clone() {
      return new NetworkAddr(this);
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 1;
    private string hostName_ = "";
    /// <summary>
    /// Host name or IP address where the client or server can be reached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    /// UDP port on which the client will be listening for a match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostName != other.HostName) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostName);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkAddr other) {
      if (other == null) {
        return;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostName = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Definition of variants selected for a character's moves
  /// </summary>
  public sealed partial class VariantSpec : pb::IMessage<VariantSpec> {
    private static readonly pb::MessageParser<VariantSpec> _parser = new pb::MessageParser<VariantSpec>(() => new VariantSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariantSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSpec(VariantSpec other) : this() {
      specials_ = other.specials_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSpec Clone() {
      return new VariantSpec(this);
    }

    /// <summary>Field number for the "specials" field.</summary>
    public const int SpecialsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_specials_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> specials_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 4-element array for variant ids for special 1, 2, 3 and super
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Specials {
      get { return specials_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariantSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariantSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!specials_.Equals(other.specials_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= specials_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      specials_.WriteTo(output, _repeated_specials_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += specials_.CalculateSize(_repeated_specials_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariantSpec other) {
      if (other == null) {
        return;
      }
      specials_.Add(other.specials_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            specials_.AddEntriesFrom(input, _repeated_specials_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Definition of the character the user intends to play
  /// in the next available match.
  /// </summary>
  public sealed partial class CharacterSpec : pb::IMessage<CharacterSpec> {
    private static readonly pb::MessageParser<CharacterSpec> _parser = new pb::MessageParser<CharacterSpec>(() => new CharacterSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSpec(CharacterSpec other) : this() {
      typeName_ = other.typeName_;
      secondaryMeter_ = other.secondaryMeter_;
      Variants = other.variants_ != null ? other.Variants.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSpec Clone() {
      return new CharacterSpec(this);
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    /// <summary>
    /// Type name of character, e.g. "atl"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secondary_meter" field.</summary>
    public const int SecondaryMeterFieldNumber = 10;
    private int secondaryMeter_;
    /// <summary>
    /// Selected option for secondary meter (defensive or offensive)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondaryMeter {
      get { return secondaryMeter_; }
      set {
        secondaryMeter_ = value;
      }
    }

    /// <summary>Field number for the "variants" field.</summary>
    public const int VariantsFieldNumber = 22;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.VariantSpec variants_;
    /// <summary>
    /// Special move variants selection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.VariantSpec Variants {
      get { return variants_; }
      set {
        variants_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      if (SecondaryMeter != other.SecondaryMeter) return false;
      if (!object.Equals(Variants, other.Variants)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (SecondaryMeter != 0) hash ^= SecondaryMeter.GetHashCode();
      if (variants_ != null) hash ^= Variants.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (SecondaryMeter != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SecondaryMeter);
      }
      if (variants_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Variants);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (SecondaryMeter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondaryMeter);
      }
      if (variants_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Variants);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterSpec other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.SecondaryMeter != 0) {
        SecondaryMeter = other.SecondaryMeter;
      }
      if (other.variants_ != null) {
        if (variants_ == null) {
          variants_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.VariantSpec();
        }
        Variants.MergeFrom(other.Variants);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
          case 80: {
            SecondaryMeter = input.ReadInt32();
            break;
          }
          case 178: {
            if (variants_ == null) {
              variants_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.VariantSpec();
            }
            input.ReadMessage(variants_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Training mode configurable options that are also part of GameConfig
  /// </summary>
  public sealed partial class TrainingGameOptions : pb::IMessage<TrainingGameOptions> {
    private static readonly pb::MessageParser<TrainingGameOptions> _parser = new pb::MessageParser<TrainingGameOptions>(() => new TrainingGameOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainingGameOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingGameOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingGameOptions(TrainingGameOptions other) : this() {
      stunEnabled_ = other.stunEnabled_;
      superRefill_ = other.superRefill_;
      kineticRefill_ = other.kineticRefill_;
      shortCooldowns_ = other.shortCooldowns_;
      showStats_ = other.showStats_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingGameOptions Clone() {
      return new TrainingGameOptions(this);
    }

    /// <summary>Field number for the "stun_enabled" field.</summary>
    public const int StunEnabledFieldNumber = 1;
    private bool stunEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StunEnabled {
      get { return stunEnabled_; }
      set {
        stunEnabled_ = value;
      }
    }

    /// <summary>Field number for the "super_refill" field.</summary>
    public const int SuperRefillFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType superRefill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType SuperRefill {
      get { return superRefill_; }
      set {
        superRefill_ = value;
      }
    }

    /// <summary>Field number for the "kinetic_refill" field.</summary>
    public const int KineticRefillFieldNumber = 3;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType kineticRefill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType KineticRefill {
      get { return kineticRefill_; }
      set {
        kineticRefill_ = value;
      }
    }

    /// <summary>Field number for the "short_cooldowns" field.</summary>
    public const int ShortCooldownsFieldNumber = 4;
    private bool shortCooldowns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShortCooldowns {
      get { return shortCooldowns_; }
      set {
        shortCooldowns_ = value;
      }
    }

    /// <summary>Field number for the "show_stats" field.</summary>
    public const int ShowStatsFieldNumber = 5;
    private bool showStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowStats {
      get { return showStats_; }
      set {
        showStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainingGameOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainingGameOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StunEnabled != other.StunEnabled) return false;
      if (SuperRefill != other.SuperRefill) return false;
      if (KineticRefill != other.KineticRefill) return false;
      if (ShortCooldowns != other.ShortCooldowns) return false;
      if (ShowStats != other.ShowStats) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StunEnabled != false) hash ^= StunEnabled.GetHashCode();
      if (SuperRefill != 0) hash ^= SuperRefill.GetHashCode();
      if (KineticRefill != 0) hash ^= KineticRefill.GetHashCode();
      if (ShortCooldowns != false) hash ^= ShortCooldowns.GetHashCode();
      if (ShowStats != false) hash ^= ShowStats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StunEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(StunEnabled);
      }
      if (SuperRefill != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SuperRefill);
      }
      if (KineticRefill != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) KineticRefill);
      }
      if (ShortCooldowns != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShortCooldowns);
      }
      if (ShowStats != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShowStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StunEnabled != false) {
        size += 1 + 1;
      }
      if (SuperRefill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SuperRefill);
      }
      if (KineticRefill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KineticRefill);
      }
      if (ShortCooldowns != false) {
        size += 1 + 1;
      }
      if (ShowStats != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainingGameOptions other) {
      if (other == null) {
        return;
      }
      if (other.StunEnabled != false) {
        StunEnabled = other.StunEnabled;
      }
      if (other.SuperRefill != 0) {
        SuperRefill = other.SuperRefill;
      }
      if (other.KineticRefill != 0) {
        KineticRefill = other.KineticRefill;
      }
      if (other.ShortCooldowns != false) {
        ShortCooldowns = other.ShortCooldowns;
      }
      if (other.ShowStats != false) {
        ShowStats = other.ShowStats;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StunEnabled = input.ReadBool();
            break;
          }
          case 16: {
            superRefill_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType) input.ReadEnum();
            break;
          }
          case 24: {
            kineticRefill_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MeterRefillType) input.ReadEnum();
            break;
          }
          case 32: {
            ShortCooldowns = input.ReadBool();
            break;
          }
          case 40: {
            ShowStats = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Training mode configurable options
  /// </summary>
  public sealed partial class TrainingDynamicOptions : pb::IMessage<TrainingDynamicOptions> {
    private static readonly pb::MessageParser<TrainingDynamicOptions> _parser = new pb::MessageParser<TrainingDynamicOptions>(() => new TrainingDynamicOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainingDynamicOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingDynamicOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingDynamicOptions(TrainingDynamicOptions other) : this() {
      TrainingOptions = other.trainingOptions_ != null ? other.TrainingOptions.Clone() : null;
      characters_ = other.characters_.Clone();
      resetLevel_ = other.resetLevel_;
      opponentMovement_ = other.opponentMovement_;
      opponentBlock_ = other.opponentBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingDynamicOptions Clone() {
      return new TrainingDynamicOptions(this);
    }

    /// <summary>Field number for the "training_options" field.</summary>
    public const int TrainingOptionsFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions trainingOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions TrainingOptions {
      get { return trainingOptions_; }
      set {
        trainingOptions_ = value;
      }
    }

    /// <summary>Field number for the "characters" field.</summary>
    public const int CharactersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(34, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> characters_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> Characters {
      get { return characters_; }
    }

    /// <summary>Field number for the "reset_level" field.</summary>
    public const int ResetLevelFieldNumber = 5;
    private bool resetLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResetLevel {
      get { return resetLevel_; }
      set {
        resetLevel_ = value;
      }
    }

    /// <summary>Field number for the "opponent_movement" field.</summary>
    public const int OpponentMovementFieldNumber = 20;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingMovementType opponentMovement_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingMovementType OpponentMovement {
      get { return opponentMovement_; }
      set {
        opponentMovement_ = value;
      }
    }

    /// <summary>Field number for the "opponent_block" field.</summary>
    public const int OpponentBlockFieldNumber = 21;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingBlockType opponentBlock_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingBlockType OpponentBlock {
      get { return opponentBlock_; }
      set {
        opponentBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainingDynamicOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainingDynamicOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TrainingOptions, other.TrainingOptions)) return false;
      if(!characters_.Equals(other.characters_)) return false;
      if (ResetLevel != other.ResetLevel) return false;
      if (OpponentMovement != other.OpponentMovement) return false;
      if (OpponentBlock != other.OpponentBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trainingOptions_ != null) hash ^= TrainingOptions.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (ResetLevel != false) hash ^= ResetLevel.GetHashCode();
      if (OpponentMovement != 0) hash ^= OpponentMovement.GetHashCode();
      if (OpponentBlock != 0) hash ^= OpponentBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trainingOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrainingOptions);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (ResetLevel != false) {
        output.WriteRawTag(40);
        output.WriteBool(ResetLevel);
      }
      if (OpponentMovement != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) OpponentMovement);
      }
      if (OpponentBlock != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) OpponentBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trainingOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingOptions);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (ResetLevel != false) {
        size += 1 + 1;
      }
      if (OpponentMovement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpponentMovement);
      }
      if (OpponentBlock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpponentBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainingDynamicOptions other) {
      if (other == null) {
        return;
      }
      if (other.trainingOptions_ != null) {
        if (trainingOptions_ == null) {
          trainingOptions_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions();
        }
        TrainingOptions.MergeFrom(other.TrainingOptions);
      }
      characters_.Add(other.characters_);
      if (other.ResetLevel != false) {
        ResetLevel = other.ResetLevel;
      }
      if (other.OpponentMovement != 0) {
        OpponentMovement = other.OpponentMovement;
      }
      if (other.OpponentBlock != 0) {
        OpponentBlock = other.OpponentBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trainingOptions_ == null) {
              trainingOptions_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions();
            }
            input.ReadMessage(trainingOptions_);
            break;
          }
          case 34: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
          case 40: {
            ResetLevel = input.ReadBool();
            break;
          }
          case 160: {
            opponentMovement_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingMovementType) input.ReadEnum();
            break;
          }
          case 168: {
            opponentBlock_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingBlockType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A single chat stream event.
  /// </summary>
  public sealed partial class Chat : pb::IMessage<Chat> {
    private static readonly pb::MessageParser<Chat> _parser = new pb::MessageParser<Chat>(() => new Chat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat(Chat other) : this() {
      time_ = other.time_;
      origin_ = other.origin_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat Clone() {
      return new Chat(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    /// Unix time the chat was generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private string origin_ = "";
    /// <summary>
    /// Handle of the originating player.  If unset,
    /// system-generated message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Origin {
      get { return origin_; }
      set {
        origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    /// <summary>
    /// Chat text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Origin != other.Origin) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Origin.Length != 0) hash ^= Origin.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (Origin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Origin);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Origin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chat other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Origin.Length != 0) {
        Origin = other.Origin;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            Origin = input.ReadString();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOptions : pb::IMessage<GameOptions> {
    private static readonly pb::MessageParser<GameOptions> _parser = new pb::MessageParser<GameOptions>(() => new GameOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOptions(GameOptions other) : this() {
      mode_ = other.mode_;
      TrainingOptions = other.trainingOptions_ != null ? other.TrainingOptions.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOptions Clone() {
      return new GameOptions(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions.Types.Mode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "training_options" field.</summary>
    public const int TrainingOptionsFieldNumber = 20;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions trainingOptions_;
    /// <summary>
    /// Stage etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions TrainingOptions {
      get { return trainingOptions_; }
      set {
        trainingOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (!object.Equals(TrainingOptions, other.TrainingOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (trainingOptions_ != null) hash ^= TrainingOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (trainingOptions_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(TrainingOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (trainingOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrainingOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOptions other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.trainingOptions_ != null) {
        if (trainingOptions_ == null) {
          trainingOptions_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions();
        }
        TrainingOptions.MergeFrom(other.TrainingOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions.Types.Mode) input.ReadEnum();
            break;
          }
          case 162: {
            if (trainingOptions_ == null) {
              trainingOptions_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions();
            }
            input.ReadMessage(trainingOptions_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("MODE_ZERO")] Zero = 0,
        /// <summary>
        /// Fight to the finish -- best of N games, etc.
        /// </summary>
        [pbr::OriginalName("GM_FIGHT")] GmFight = 1,
        /// <summary>
        /// No one dies -- client exit completes the match.
        /// </summary>
        [pbr::OriginalName("GM_TRAINING")] GmTraining = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Configuration for a single game in a match, suitable for sending
  /// to one of the participating clients.
  /// </summary>
  public sealed partial class GameConfig : pb::IMessage<GameConfig> {
    private static readonly pb::MessageParser<GameConfig> _parser = new pb::MessageParser<GameConfig>(() => new GameConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig(GameConfig other) : this() {
      player_ = other.player_.Clone();
      Options = other.options_ != null ? other.Options.Clone() : null;
      matchId_ = other.matchId_;
      DeprecatedGameNumber_ = other.DeprecatedGameNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig Clone() {
      return new GameConfig(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player> _repeated_player_codec
        = pb::FieldCodec.ForMessage(18, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player> player_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player>();
    /// <summary>
    /// Each player's character info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Types.Player> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 5;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions options_;
    /// <summary>
    /// Global options for this game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private long matchId_;
    /// <summary>
    /// The server-assigned unique ID of the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_game_number" field.</summary>
    public const int DeprecatedGameNumberFieldNumber = 4;
    private int DeprecatedGameNumber_;
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedGameNumber {
      get { return DeprecatedGameNumber_; }
      set {
        DeprecatedGameNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!player_.Equals(other.player_)) return false;
      if (!object.Equals(Options, other.Options)) return false;
      if (MatchId != other.MatchId) return false;
      if (DeprecatedGameNumber != other.DeprecatedGameNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= player_.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (DeprecatedGameNumber != 0) hash ^= DeprecatedGameNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      player_.WriteTo(output, _repeated_player_codec);
      if (MatchId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MatchId);
      }
      if (DeprecatedGameNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeprecatedGameNumber);
      }
      if (options_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += player_.CalculateSize(_repeated_player_codec);
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (DeprecatedGameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedGameNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameConfig other) {
      if (other == null) {
        return;
      }
      player_.Add(other.player_);
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions();
        }
        Options.MergeFrom(other.Options);
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.DeprecatedGameNumber != 0) {
        DeprecatedGameNumber = other.DeprecatedGameNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 24: {
            MatchId = input.ReadInt64();
            break;
          }
          case 32: {
            DeprecatedGameNumber = input.ReadInt32();
            break;
          }
          case 42: {
            if (options_ == null) {
              options_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player> {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          userId_ = other.userId_;
          handle_ = other.handle_;
          Character = other.character_ != null ? other.Character.Clone() : null;
          echelon_ = other.echelon_;
          tier_ = other.tier_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private long userId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UserId {
          get { return userId_; }
          set {
            userId_ = value;
          }
        }

        /// <summary>Field number for the "handle" field.</summary>
        public const int HandleFieldNumber = 2;
        private string handle_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Handle {
          get { return handle_; }
          set {
            handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "character" field.</summary>
        public const int CharacterFieldNumber = 3;
        private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec character_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec Character {
          get { return character_; }
          set {
            character_ = value;
          }
        }

        /// <summary>Field number for the "echelon" field.</summary>
        public const int EchelonFieldNumber = 10;
        private int echelon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Echelon {
          get { return echelon_; }
          set {
            echelon_ = value;
          }
        }

        /// <summary>Field number for the "tier" field.</summary>
        public const int TierFieldNumber = 11;
        private int tier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Tier {
          get { return tier_; }
          set {
            tier_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (Handle != other.Handle) return false;
          if (!object.Equals(Character, other.Character)) return false;
          if (Echelon != other.Echelon) return false;
          if (Tier != other.Tier) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UserId != 0L) hash ^= UserId.GetHashCode();
          if (Handle.Length != 0) hash ^= Handle.GetHashCode();
          if (character_ != null) hash ^= Character.GetHashCode();
          if (Echelon != 0) hash ^= Echelon.GetHashCode();
          if (Tier != 0) hash ^= Tier.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UserId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(UserId);
          }
          if (Handle.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Handle);
          }
          if (character_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Character);
          }
          if (Echelon != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(Echelon);
          }
          if (Tier != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(Tier);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UserId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
          }
          if (Handle.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
          }
          if (character_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
          }
          if (Echelon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Echelon);
          }
          if (Tier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tier);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.UserId != 0L) {
            UserId = other.UserId;
          }
          if (other.Handle.Length != 0) {
            Handle = other.Handle;
          }
          if (other.character_ != null) {
            if (character_ == null) {
              character_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
            }
            Character.MergeFrom(other.Character);
          }
          if (other.Echelon != 0) {
            Echelon = other.Echelon;
          }
          if (other.Tier != 0) {
            Tier = other.Tier;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                UserId = input.ReadInt64();
                break;
              }
              case 18: {
                Handle = input.ReadString();
                break;
              }
              case 26: {
                if (character_ == null) {
                  character_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
                }
                input.ReadMessage(character_);
                break;
              }
              case 80: {
                Echelon = input.ReadInt32();
                break;
              }
              case 88: {
                Tier = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Configuration for the next game in a match, allowing for users to
  /// change their character specs.
  /// </summary>
  public sealed partial class NextGameConfig : pb::IMessage<NextGameConfig> {
    private static readonly pb::MessageParser<NextGameConfig> _parser = new pb::MessageParser<NextGameConfig>(() => new NextGameConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextGameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextGameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextGameConfig(NextGameConfig other) : this() {
      characterSpec_ = other.characterSpec_.Clone();
      Options = other.options_ != null ? other.Options.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextGameConfig Clone() {
      return new NextGameConfig(this);
    }

    /// <summary>Field number for the "character_spec" field.</summary>
    public const int CharacterSpecFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> _repeated_characterSpec_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> characterSpec_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec>();
    /// <summary>
    /// The new character specs to use for the next game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> CharacterSpec {
      get { return characterSpec_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions options_;
    /// <summary>
    /// Proposed game options for the next game.
    /// May only be specified during a training match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextGameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextGameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!characterSpec_.Equals(other.characterSpec_)) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= characterSpec_.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      characterSpec_.WriteTo(output, _repeated_characterSpec_codec);
      if (options_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += characterSpec_.CalculateSize(_repeated_characterSpec_codec);
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextGameConfig other) {
      if (other == null) {
        return;
      }
      characterSpec_.Add(other.characterSpec_);
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            characterSpec_.AddEntriesFrom(input, _repeated_characterSpec_codec);
            break;
          }
          case 18: {
            if (options_ == null) {
              options_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Connection information for one of the players.
  /// </summary>
  public sealed partial class GameEndpointConfig : pb::IMessage<GameEndpointConfig> {
    private static readonly pb::MessageParser<GameEndpointConfig> _parser = new pb::MessageParser<GameEndpointConfig>(() => new GameEndpointConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEndpointConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndpointConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndpointConfig(GameEndpointConfig other) : this() {
      slot_ = other.slot_;
      Server = other.server_ != null ? other.Server.Clone() : null;
      secret_ = other.secret_;
      pingScoreThreshold_ = other.pingScoreThreshold_;
      sharedKey_ = other.sharedKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndpointConfig Clone() {
      return new GameEndpointConfig(this);
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private int slot_;
    /// <summary>
    /// Which player slot to control (0 = one, 1 = two)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr server_;
    /// <summary>
    /// Server address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 3;
    private ulong secret_;
    /// <summary>
    /// 64-bit secret to gain access to the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Secret {
      get { return secret_; }
      set {
        secret_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_threshold" field.</summary>
    public const int PingScoreThresholdFieldNumber = 4;
    private float pingScoreThreshold_;
    /// <summary>
    /// Ping threshold for the handshake between peers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PingScoreThreshold {
      get { return pingScoreThreshold_; }
      set {
        pingScoreThreshold_ = value;
      }
    }

    /// <summary>Field number for the "shared_key" field.</summary>
    public const int SharedKeyFieldNumber = 5;
    private pb::ByteString sharedKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The 128-bit shared key used to hash client packets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedKey {
      get { return sharedKey_; }
      set {
        sharedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEndpointConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEndpointConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slot != other.Slot) return false;
      if (!object.Equals(Server, other.Server)) return false;
      if (Secret != other.Secret) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PingScoreThreshold, other.PingScoreThreshold)) return false;
      if (SharedKey != other.SharedKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (server_ != null) hash ^= Server.GetHashCode();
      if (Secret != 0UL) hash ^= Secret.GetHashCode();
      if (PingScoreThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PingScoreThreshold);
      if (SharedKey.Length != 0) hash ^= SharedKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slot);
      }
      if (server_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Server);
      }
      if (Secret != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(Secret);
      }
      if (PingScoreThreshold != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PingScoreThreshold);
      }
      if (SharedKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SharedKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (Secret != 0UL) {
        size += 1 + 8;
      }
      if (PingScoreThreshold != 0F) {
        size += 1 + 4;
      }
      if (SharedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEndpointConfig other) {
      if (other == null) {
        return;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          server_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.Secret != 0UL) {
        Secret = other.Secret;
      }
      if (other.PingScoreThreshold != 0F) {
        PingScoreThreshold = other.PingScoreThreshold;
      }
      if (other.SharedKey.Length != 0) {
        SharedKey = other.SharedKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slot = input.ReadInt32();
            break;
          }
          case 18: {
            if (server_ == null) {
              server_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr();
            }
            input.ReadMessage(server_);
            break;
          }
          case 25: {
            Secret = input.ReadFixed64();
            break;
          }
          case 37: {
            PingScoreThreshold = input.ReadFloat();
            break;
          }
          case 42: {
            SharedKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server-side record of the game in progress.
  /// </summary>
  public sealed partial class GameDescriptor : pb::IMessage<GameDescriptor> {
    private static readonly pb::MessageParser<GameDescriptor> _parser = new pb::MessageParser<GameDescriptor>(() => new GameDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDescriptor(GameDescriptor other) : this() {
      Game = other.game_ != null ? other.Game.Clone() : null;
      source_ = other.source_;
      player_ = other.player_.Clone();
      portalUuid_ = other.portalUuid_;
      type_ = other.type_;
      buildVersion_ = other.buildVersion_;
      lobbyId_ = other.lobbyId_;
      DeprecatedEndpoint_ = other.DeprecatedEndpoint_.Clone();
      DeprecatedRemoteIp_ = other.DeprecatedRemoteIp_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDescriptor Clone() {
      return new GameDescriptor(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig game_;
    /// <summary>
    /// Game being played.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 8;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Source source_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player> _repeated_player_codec
        = pb::FieldCodec.ForMessage(58, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player> player_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player>();
    /// <summary>
    /// Extra details for each player slot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Player> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "portal_uuid" field.</summary>
    public const int PortalUuidFieldNumber = 3;
    private pb::ByteString portalUuid_ = pb::ByteString.Empty;
    /// <summary>
    /// Portal session in use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PortalUuid {
      get { return portalUuid_; }
      set {
        portalUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType type_ = 0;
    /// <summary>
    /// For source == MATCH_MAKER, queue this match was generated by.
    /// MT_LOBBY indicates a lobby match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 5;
    private string buildVersion_ = "";
    /// <summary>
    /// Build version of the matched clients.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 9;
    private long lobbyId_;
    /// <summary>
    /// For source == LOBBY, lobby ID of the owning lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_endpoint" field.</summary>
    public const int DeprecatedEndpointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig> _repeated_DeprecatedEndpoint_codec
        = pb::FieldCodec.ForMessage(18, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig> DeprecatedEndpoint_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig> DeprecatedEndpoint {
      get { return DeprecatedEndpoint_; }
    }

    /// <summary>Field number for the "__deprecated_remote_ip" field.</summary>
    public const int DeprecatedRemoteIpFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_DeprecatedRemoteIp_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> DeprecatedRemoteIp_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeprecatedRemoteIp {
      get { return DeprecatedRemoteIp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Game, other.Game)) return false;
      if (Source != other.Source) return false;
      if(!player_.Equals(other.player_)) return false;
      if (PortalUuid != other.PortalUuid) return false;
      if (Type != other.Type) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (LobbyId != other.LobbyId) return false;
      if(!DeprecatedEndpoint_.Equals(other.DeprecatedEndpoint_)) return false;
      if(!DeprecatedRemoteIp_.Equals(other.DeprecatedRemoteIp_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_ != null) hash ^= Game.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      hash ^= player_.GetHashCode();
      if (PortalUuid.Length != 0) hash ^= PortalUuid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (LobbyId != 0L) hash ^= LobbyId.GetHashCode();
      hash ^= DeprecatedEndpoint_.GetHashCode();
      hash ^= DeprecatedRemoteIp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      DeprecatedEndpoint_.WriteTo(output, _repeated_DeprecatedEndpoint_codec);
      if (PortalUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PortalUuid);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BuildVersion);
      }
      DeprecatedRemoteIp_.WriteTo(output, _repeated_DeprecatedRemoteIp_codec);
      player_.WriteTo(output, _repeated_player_codec);
      if (Source != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Source);
      }
      if (LobbyId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LobbyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      if (PortalUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PortalUuid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (LobbyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyId);
      }
      size += DeprecatedEndpoint_.CalculateSize(_repeated_DeprecatedEndpoint_codec);
      size += DeprecatedRemoteIp_.CalculateSize(_repeated_DeprecatedRemoteIp_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          game_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
        }
        Game.MergeFrom(other.Game);
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      player_.Add(other.player_);
      if (other.PortalUuid.Length != 0) {
        PortalUuid = other.PortalUuid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.LobbyId != 0L) {
        LobbyId = other.LobbyId;
      }
      DeprecatedEndpoint_.Add(other.DeprecatedEndpoint_);
      DeprecatedRemoteIp_.Add(other.DeprecatedRemoteIp_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (game_ == null) {
              game_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
            }
            input.ReadMessage(game_);
            break;
          }
          case 18: {
            DeprecatedEndpoint_.AddEntriesFrom(input, _repeated_DeprecatedEndpoint_codec);
            break;
          }
          case 26: {
            PortalUuid = input.ReadBytes();
            break;
          }
          case 32: {
            type_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 42: {
            BuildVersion = input.ReadString();
            break;
          }
          case 50: {
            DeprecatedRemoteIp_.AddEntriesFrom(input, _repeated_DeprecatedRemoteIp_codec);
            break;
          }
          case 58: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 64: {
            source_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Types.Source) input.ReadEnum();
            break;
          }
          case 72: {
            LobbyId = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Source {
        [pbr::OriginalName("SOURCE_ZERO")] Zero = 0,
        /// <summary>
        /// Match by blind-queue rating match-maker.
        /// </summary>
        [pbr::OriginalName("MATCH_MAKER")] MatchMaker = 1,
        /// <summary>
        /// Matched by user lobby.
        /// </summary>
        [pbr::OriginalName("LOBBY")] Lobby = 2,
      }

      public sealed partial class Player : pb::IMessage<Player> {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          Endpoint = other.endpoint_ != null ? other.Endpoint.Clone() : null;
          remoteIp_ = other.remoteIp_;
          rating_ = other.rating_;
          waitTime_ = other.waitTime_;
          pingScore_ = other.pingScore_;
          echelon_ = other.echelon_;
          tier_ = other.tier_;
          points_ = other.points_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "endpoint" field.</summary>
        public const int EndpointFieldNumber = 1;
        private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig endpoint_;
        /// <summary>
        /// GameEndpointConfig player is using to connect to Portal.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig Endpoint {
          get { return endpoint_; }
          set {
            endpoint_ = value;
          }
        }

        /// <summary>Field number for the "remote_ip" field.</summary>
        public const int RemoteIpFieldNumber = 2;
        private string remoteIp_ = "";
        /// <summary>
        /// Remote IP of the player.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemoteIp {
          get { return remoteIp_; }
          set {
            remoteIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rating" field.</summary>
        public const int RatingFieldNumber = 3;
        private float rating_;
        /// <summary>
        /// Rating used to create the match.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rating {
          get { return rating_; }
          set {
            rating_ = value;
          }
        }

        /// <summary>Field number for the "wait_time" field.</summary>
        public const int WaitTimeFieldNumber = 5;
        private float waitTime_;
        /// <summary>
        /// How long waiting in the match queue, in seconds.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float WaitTime {
          get { return waitTime_; }
          set {
            waitTime_ = value;
          }
        }

        /// <summary>Field number for the "ping_score" field.</summary>
        public const int PingScoreFieldNumber = 6;
        private float pingScore_;
        /// <summary>
        /// The ping score to the opponent in the match. 0 if no existing ping score.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PingScore {
          get { return pingScore_; }
          set {
            pingScore_ = value;
          }
        }

        /// <summary>Field number for the "echelon" field.</summary>
        public const int EchelonFieldNumber = 10;
        private int echelon_;
        /// <summary>
        /// Ranking values used to make the match.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Echelon {
          get { return echelon_; }
          set {
            echelon_ = value;
          }
        }

        /// <summary>Field number for the "tier" field.</summary>
        public const int TierFieldNumber = 11;
        private int tier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Tier {
          get { return tier_; }
          set {
            tier_ = value;
          }
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 12;
        private int points_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Points {
          get { return points_; }
          set {
            points_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Endpoint, other.Endpoint)) return false;
          if (RemoteIp != other.RemoteIp) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rating, other.Rating)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WaitTime, other.WaitTime)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PingScore, other.PingScore)) return false;
          if (Echelon != other.Echelon) return false;
          if (Tier != other.Tier) return false;
          if (Points != other.Points) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (endpoint_ != null) hash ^= Endpoint.GetHashCode();
          if (RemoteIp.Length != 0) hash ^= RemoteIp.GetHashCode();
          if (Rating != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rating);
          if (WaitTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WaitTime);
          if (PingScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PingScore);
          if (Echelon != 0) hash ^= Echelon.GetHashCode();
          if (Tier != 0) hash ^= Tier.GetHashCode();
          if (Points != 0) hash ^= Points.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (endpoint_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Endpoint);
          }
          if (RemoteIp.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RemoteIp);
          }
          if (Rating != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Rating);
          }
          if (WaitTime != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(WaitTime);
          }
          if (PingScore != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(PingScore);
          }
          if (Echelon != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(Echelon);
          }
          if (Tier != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(Tier);
          }
          if (Points != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(Points);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (endpoint_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Endpoint);
          }
          if (RemoteIp.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteIp);
          }
          if (Rating != 0F) {
            size += 1 + 4;
          }
          if (WaitTime != 0F) {
            size += 1 + 4;
          }
          if (PingScore != 0F) {
            size += 1 + 4;
          }
          if (Echelon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Echelon);
          }
          if (Tier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tier);
          }
          if (Points != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.endpoint_ != null) {
            if (endpoint_ == null) {
              endpoint_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig();
            }
            Endpoint.MergeFrom(other.Endpoint);
          }
          if (other.RemoteIp.Length != 0) {
            RemoteIp = other.RemoteIp;
          }
          if (other.Rating != 0F) {
            Rating = other.Rating;
          }
          if (other.WaitTime != 0F) {
            WaitTime = other.WaitTime;
          }
          if (other.PingScore != 0F) {
            PingScore = other.PingScore;
          }
          if (other.Echelon != 0) {
            Echelon = other.Echelon;
          }
          if (other.Tier != 0) {
            Tier = other.Tier;
          }
          if (other.Points != 0) {
            Points = other.Points;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (endpoint_ == null) {
                  endpoint_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig();
                }
                input.ReadMessage(endpoint_);
                break;
              }
              case 18: {
                RemoteIp = input.ReadString();
                break;
              }
              case 29: {
                Rating = input.ReadFloat();
                break;
              }
              case 45: {
                WaitTime = input.ReadFloat();
                break;
              }
              case 53: {
                PingScore = input.ReadFloat();
                break;
              }
              case 80: {
                Echelon = input.ReadInt32();
                break;
              }
              case 88: {
                Tier = input.ReadInt32();
                break;
              }
              case 96: {
                Points = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PingTestResult : pb::IMessage<PingTestResult> {
    private static readonly pb::MessageParser<PingTestResult> _parser = new pb::MessageParser<PingTestResult>(() => new PingTestResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingTestResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestResult(PingTestResult other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestResult Clone() {
      return new PingTestResult(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig config_;
    /// <summary>
    /// Server to use for an immediate latency test.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingTestResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingTestResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingTestResult other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameEndpointConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesyncReportRequest : pb::IMessage<DesyncReportRequest> {
    private static readonly pb::MessageParser<DesyncReportRequest> _parser = new pb::MessageParser<DesyncReportRequest>(() => new DesyncReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesyncReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportRequest(DesyncReportRequest other) : this() {
      matchId_ = other.matchId_;
      slot_ = other.slot_;
      bundle_ = other.bundle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportRequest Clone() {
      return new DesyncReportRequest(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 3;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "bundle" field.</summary>
    public const int BundleFieldNumber = 4;
    private pb::ByteString bundle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bundle {
      get { return bundle_; }
      set {
        bundle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesyncReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesyncReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Slot != other.Slot) return false;
      if (Bundle != other.Bundle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (Bundle.Length != 0) hash ^= Bundle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MatchId);
      }
      if (Slot != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Slot);
      }
      if (Bundle.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Bundle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (Bundle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bundle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesyncReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.Bundle.Length != 0) {
        Bundle = other.Bundle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            MatchId = input.ReadInt64();
            break;
          }
          case 24: {
            Slot = input.ReadInt32();
            break;
          }
          case 34: {
            Bundle = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Internal-only type for tracking pending desyncs.
  /// </summary>
  public sealed partial class DesyncReportHeader : pb::IMessage<DesyncReportHeader> {
    private static readonly pb::MessageParser<DesyncReportHeader> _parser = new pb::MessageParser<DesyncReportHeader>(() => new DesyncReportHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesyncReportHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportHeader(DesyncReportHeader other) : this() {
      matchId_ = other.matchId_;
      slot_ = other.slot_;
      reportPath_ = other.reportPath_;
      GameConfig = other.gameConfig_ != null ? other.GameConfig.Clone() : null;
      timestamp_ = other.timestamp_;
      buildVersion_ = other.buildVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportHeader Clone() {
      return new DesyncReportHeader(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "report_path" field.</summary>
    public const int ReportPathFieldNumber = 3;
    private string reportPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportPath {
      get { return reportPath_; }
      set {
        reportPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig gameConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig GameConfig {
      get { return gameConfig_; }
      set {
        gameConfig_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 6;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesyncReportHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesyncReportHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Slot != other.Slot) return false;
      if (ReportPath != other.ReportPath) return false;
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (BuildVersion != other.BuildVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (ReportPath.Length != 0) hash ^= ReportPath.GetHashCode();
      if (gameConfig_ != null) hash ^= GameConfig.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (Slot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Slot);
      }
      if (ReportPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReportPath);
      }
      if (gameConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GameConfig);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BuildVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (ReportPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportPath);
      }
      if (gameConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesyncReportHeader other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.ReportPath.Length != 0) {
        ReportPath = other.ReportPath;
      }
      if (other.gameConfig_ != null) {
        if (gameConfig_ == null) {
          gameConfig_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
        }
        GameConfig.MergeFrom(other.GameConfig);
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            Slot = input.ReadInt32();
            break;
          }
          case 26: {
            ReportPath = input.ReadString();
            break;
          }
          case 34: {
            if (gameConfig_ == null) {
              gameConfig_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
            }
            input.ReadMessage(gameConfig_);
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 50: {
            BuildVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The InputRecord is a serialized version of both player's inputs
  /// </summary>
  public sealed partial class InputRecord : pb::IMessage<InputRecord> {
    private static readonly pb::MessageParser<InputRecord> _parser = new pb::MessageParser<InputRecord>(() => new InputRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRecord(InputRecord other) : this() {
      inputRecord_ = other.inputRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRecord Clone() {
      return new InputRecord(this);
    }

    /// <summary>Field number for the "input_record" field.</summary>
    public const int InputRecord_FieldNumber = 1;
    private pb::ByteString inputRecord_ = pb::ByteString.Empty;
    /// <summary>
    /// Input record blob. Engine knows how to decode it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InputRecord_ {
      get { return inputRecord_; }
      set {
        inputRecord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputRecord_ != other.InputRecord_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputRecord_.Length != 0) hash ^= InputRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputRecord_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(InputRecord_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputRecord_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InputRecord_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputRecord other) {
      if (other == null) {
        return;
      }
      if (other.InputRecord_.Length != 0) {
        InputRecord_ = other.InputRecord_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InputRecord_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GameReplayRecord allows us to replay the game.
  /// </summary>
  public sealed partial class GameReplayRecord : pb::IMessage<GameReplayRecord> {
    private static readonly pb::MessageParser<GameReplayRecord> _parser = new pb::MessageParser<GameReplayRecord>(() => new GameReplayRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameReplayRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplayRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplayRecord(GameReplayRecord other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      InputRecord = other.inputRecord_ != null ? other.InputRecord.Clone() : null;
      gameNumber_ = other.gameNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplayRecord Clone() {
      return new GameReplayRecord(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig config_;
    /// <summary>
    /// Initial config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "input_record" field.</summary>
    public const int InputRecordFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord inputRecord_;
    /// <summary>
    /// P1 and P2 inputs for all the frames that matter (between GGPO Ready and confirmed last hit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord InputRecord {
      get { return inputRecord_; }
      set {
        inputRecord_ = value;
      }
    }

    /// <summary>Field number for the "game_number" field.</summary>
    public const int GameNumberFieldNumber = 3;
    private int gameNumber_;
    /// <summary>
    /// Game number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameNumber {
      get { return gameNumber_; }
      set {
        gameNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameReplayRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameReplayRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(InputRecord, other.InputRecord)) return false;
      if (GameNumber != other.GameNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (inputRecord_ != null) hash ^= InputRecord.GetHashCode();
      if (GameNumber != 0) hash ^= GameNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (inputRecord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InputRecord);
      }
      if (GameNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (inputRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputRecord);
      }
      if (GameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameReplayRecord other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.inputRecord_ != null) {
        if (inputRecord_ == null) {
          inputRecord_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord();
        }
        InputRecord.MergeFrom(other.InputRecord);
      }
      if (other.GameNumber != 0) {
        GameNumber = other.GameNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 18: {
            if (inputRecord_ == null) {
              inputRecord_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord();
            }
            input.ReadMessage(inputRecord_);
            break;
          }
          case 24: {
            GameNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RollbackInfo : pb::IMessage<RollbackInfo> {
    private static readonly pb::MessageParser<RollbackInfo> _parser = new pb::MessageParser<RollbackInfo>(() => new RollbackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RollbackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackInfo(RollbackInfo other) : this() {
      oldFrame_ = other.oldFrame_;
      rollbackFrame_ = other.rollbackFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackInfo Clone() {
      return new RollbackInfo(this);
    }

    /// <summary>Field number for the "old_frame" field.</summary>
    public const int OldFrameFieldNumber = 1;
    private int oldFrame_;
    /// <summary>
    /// The frame before the rollback
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldFrame {
      get { return oldFrame_; }
      set {
        oldFrame_ = value;
      }
    }

    /// <summary>Field number for the "rollback_frame" field.</summary>
    public const int RollbackFrameFieldNumber = 2;
    private int rollbackFrame_;
    /// <summary>
    /// The frame to roll back to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RollbackFrame {
      get { return rollbackFrame_; }
      set {
        rollbackFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RollbackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RollbackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldFrame != other.OldFrame) return false;
      if (RollbackFrame != other.RollbackFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OldFrame != 0) hash ^= OldFrame.GetHashCode();
      if (RollbackFrame != 0) hash ^= RollbackFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OldFrame);
      }
      if (RollbackFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RollbackFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldFrame);
      }
      if (RollbackFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RollbackFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RollbackInfo other) {
      if (other == null) {
        return;
      }
      if (other.OldFrame != 0) {
        OldFrame = other.OldFrame;
      }
      if (other.RollbackFrame != 0) {
        RollbackFrame = other.RollbackFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OldFrame = input.ReadInt32();
            break;
          }
          case 16: {
            RollbackFrame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RollbackInputRecord : pb::IMessage<RollbackInputRecord> {
    private static readonly pb::MessageParser<RollbackInputRecord> _parser = new pb::MessageParser<RollbackInputRecord>(() => new RollbackInputRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RollbackInputRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackInputRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackInputRecord(RollbackInputRecord other) : this() {
      Input = other.input_ != null ? other.Input.Clone() : null;
      rollbackData_ = other.rollbackData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackInputRecord Clone() {
      return new RollbackInputRecord(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord input_;
    /// <summary>
    /// Both players inputs, including for frames that we later rolled back from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "rollback_data" field.</summary>
    public const int RollbackDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo> _repeated_rollbackData_codec
        = pb::FieldCodec.ForMessage(18, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo> rollbackData_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo>();
    /// <summary>
    /// Information about rollbacks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInfo> RollbackData {
      get { return rollbackData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RollbackInputRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RollbackInputRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!rollbackData_.Equals(other.rollbackData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= rollbackData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      rollbackData_.WriteTo(output, _repeated_rollbackData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += rollbackData_.CalculateSize(_repeated_rollbackData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RollbackInputRecord other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          input_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord();
        }
        Input.MergeFrom(other.Input);
      }
      rollbackData_.Add(other.rollbackData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              input_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.InputRecord();
            }
            input.ReadMessage(input_);
            break;
          }
          case 18: {
            rollbackData_.AddEntriesFrom(input, _repeated_rollbackData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Rollbacks count, so P1 and P2 need their own
  /// RollbackInputRecord since their rollback histories are different.
  /// </summary>
  public sealed partial class RollbackReplayRecord : pb::IMessage<RollbackReplayRecord> {
    private static readonly pb::MessageParser<RollbackReplayRecord> _parser = new pb::MessageParser<RollbackReplayRecord>(() => new RollbackReplayRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RollbackReplayRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackReplayRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackReplayRecord(RollbackReplayRecord other) : this() {
      config_ = other.config_.Clone();
      rollbackRecord_ = other.rollbackRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackReplayRecord Clone() {
      return new RollbackReplayRecord(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig> _repeated_config_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig> config_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig>();
    /// <summary>
    /// Initial config for each game in a match
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig> Config {
      get { return config_; }
    }

    /// <summary>Field number for the "rollback_record" field.</summary>
    public const int RollbackRecordFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord> _repeated_rollbackRecord_codec
        = pb::FieldCodec.ForMessage(18, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord> rollbackRecord_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord>();
    /// <summary>
    /// P1 and P2's inputs with rollbacks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.RollbackInputRecord> RollbackRecord {
      get { return rollbackRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RollbackReplayRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RollbackReplayRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!config_.Equals(other.config_)) return false;
      if(!rollbackRecord_.Equals(other.rollbackRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= config_.GetHashCode();
      hash ^= rollbackRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      config_.WriteTo(output, _repeated_config_codec);
      rollbackRecord_.WriteTo(output, _repeated_rollbackRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += config_.CalculateSize(_repeated_config_codec);
      size += rollbackRecord_.CalculateSize(_repeated_rollbackRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RollbackReplayRecord other) {
      if (other == null) {
        return;
      }
      config_.Add(other.config_);
      rollbackRecord_.Add(other.rollbackRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            config_.AddEntriesFrom(input, _repeated_config_codec);
            break;
          }
          case 18: {
            rollbackRecord_.AddEntriesFrom(input, _repeated_rollbackRecord_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchRequest : pb::IMessage<GetMatchRequest> {
    private static readonly pb::MessageParser<GetMatchRequest> _parser = new pb::MessageParser<GetMatchRequest>(() => new GetMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchRequest(GetMatchRequest other) : this() {
      type_ = other.type_;
      arenaId_ = other.arenaId_;
      Network = other.network_ != null ? other.Network.Clone() : null;
      Character = other.character_ != null ? other.Character.Clone() : null;
      skillEstimate_ = other.skillEstimate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchRequest Clone() {
      return new GetMatchRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType type_ = 0;
    /// <summary>
    /// Type of match requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "arena_id" field.</summary>
    public const int ArenaIdFieldNumber = 2;
    private long arenaId_;
    /// <summary>
    /// If MT_TOURNAMENT, arena ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ArenaId {
      get { return arenaId_; }
      set {
        arenaId_ = value;
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 10;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr network_;
    /// <summary>
    /// Client's claimed network address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 11;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec character_;
    /// <summary>
    /// Client's desired character loadout for the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "skill_estimate" field.</summary>
    public const int SkillEstimateFieldNumber = 15;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.SkillEstimateType skillEstimate_ = 0;
    /// <summary>
    /// Client's approximation of their skill. Only taken into account
    /// after first login/first match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.SkillEstimateType SkillEstimate {
      get { return skillEstimate_; }
      set {
        skillEstimate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ArenaId != other.ArenaId) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (!object.Equals(Character, other.Character)) return false;
      if (SkillEstimate != other.SkillEstimate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ArenaId != 0L) hash ^= ArenaId.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (character_ != null) hash ^= Character.GetHashCode();
      if (SkillEstimate != 0) hash ^= SkillEstimate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (ArenaId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ArenaId);
      }
      if (network_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Network);
      }
      if (character_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Character);
      }
      if (SkillEstimate != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) SkillEstimate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ArenaId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ArenaId);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (SkillEstimate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkillEstimate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ArenaId != 0L) {
        ArenaId = other.ArenaId;
      }
      if (other.network_ != null) {
        if (network_ == null) {
          network_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr();
        }
        Network.MergeFrom(other.Network);
      }
      if (other.character_ != null) {
        if (character_ == null) {
          character_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
        }
        Character.MergeFrom(other.Character);
      }
      if (other.SkillEstimate != 0) {
        SkillEstimate = other.SkillEstimate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 16: {
            ArenaId = input.ReadInt64();
            break;
          }
          case 82: {
            if (network_ == null) {
              network_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr();
            }
            input.ReadMessage(network_);
            break;
          }
          case 90: {
            if (character_ == null) {
              character_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
            }
            input.ReadMessage(character_);
            break;
          }
          case 120: {
            skillEstimate_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.SkillEstimateType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GameReport is serialized in the Goodbye packet send to portal
  /// immediately upon determination of the game outcome.
  /// Iff both players sent the same GameReport, the game outcome is considered valid
  /// and the match will proceed.
  /// The serialized size of this proto should not exceed PORTAL_MAX_OUTCOME_SIZE.
  /// </summary>
  public sealed partial class GameReport : pb::IMessage<GameReport> {
    private static readonly pb::MessageParser<GameReport> _parser = new pb::MessageParser<GameReport>(() => new GameReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReport(GameReport other) : this() {
      winSlot_ = other.winSlot_;
      draw_ = other.draw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReport Clone() {
      return new GameReport(this);
    }

    /// <summary>Field number for the "win_slot" field.</summary>
    public const int WinSlotFieldNumber = 1;
    private int winSlot_;
    /// <summary>
    /// Player slot (0, 1) that won the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinSlot {
      get { return winSlot_; }
      set {
        winSlot_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 2;
    private bool draw_;
    /// <summary>
    /// Was match a draw?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinSlot != other.WinSlot) return false;
      if (Draw != other.Draw) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinSlot != 0) hash ^= WinSlot.GetHashCode();
      if (Draw != false) hash ^= Draw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinSlot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinSlot);
      }
      if (Draw != false) {
        output.WriteRawTag(16);
        output.WriteBool(Draw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSlot);
      }
      if (Draw != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameReport other) {
      if (other == null) {
        return;
      }
      if (other.WinSlot != 0) {
        WinSlot = other.WinSlot;
      }
      if (other.Draw != false) {
        Draw = other.Draw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinSlot = input.ReadInt32();
            break;
          }
          case 16: {
            Draw = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The report sent from portal to TBMatch to record information about a game.
  /// It's a superset of GameReport
  /// </summary>
  public sealed partial class PortalGameReport : pb::IMessage<PortalGameReport> {
    private static readonly pb::MessageParser<PortalGameReport> _parser = new pb::MessageParser<PortalGameReport>(() => new PortalGameReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PortalGameReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortalGameReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortalGameReport(PortalGameReport other) : this() {
      GameReport = other.gameReport_ != null ? other.GameReport.Clone() : null;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      GameConfig = other.gameConfig_ != null ? other.GameConfig.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortalGameReport Clone() {
      return new PortalGameReport(this);
    }

    /// <summary>Field number for the "game_report" field.</summary>
    public const int GameReportFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReport gameReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReport GameReport {
      get { return gameReport_; }
      set {
        gameReport_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NextGameConfig gameConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NextGameConfig GameConfig {
      get { return gameConfig_; }
      set {
        gameConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PortalGameReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PortalGameReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameReport, other.GameReport)) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameReport_ != null) hash ^= GameReport.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (gameConfig_ != null) hash ^= GameConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameReport_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameReport);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTime);
      }
      if (gameConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GameConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameReport);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (gameConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PortalGameReport other) {
      if (other == null) {
        return;
      }
      if (other.gameReport_ != null) {
        if (gameReport_ == null) {
          gameReport_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReport();
        }
        GameReport.MergeFrom(other.GameReport);
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.gameConfig_ != null) {
        if (gameConfig_ == null) {
          gameConfig_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NextGameConfig();
        }
        GameConfig.MergeFrom(other.GameConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameReport_ == null) {
              gameReport_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReport();
            }
            input.ReadMessage(gameReport_);
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            EndTime = input.ReadInt64();
            break;
          }
          case 34: {
            if (gameConfig_ == null) {
              gameConfig_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NextGameConfig();
            }
            input.ReadMessage(gameConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The MatchReport is sent from portal to TBMatch.
  /// </summary>
  public sealed partial class MatchReport : pb::IMessage<MatchReport> {
    private static readonly pb::MessageParser<MatchReport> _parser = new pb::MessageParser<MatchReport>(() => new MatchReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchReport(MatchReport other) : this() {
      playersAgree_ = other.playersAgree_;
      winSlot_ = other.winSlot_;
      draw_ = other.draw_;
      gameReport_ = other.gameReport_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchReport Clone() {
      return new MatchReport(this);
    }

    /// <summary>Field number for the "players_agree" field.</summary>
    public const int PlayersAgreeFieldNumber = 1;
    private bool playersAgree_;
    /// <summary>
    /// Did the players have the same reported results?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayersAgree {
      get { return playersAgree_; }
      set {
        playersAgree_ = value;
      }
    }

    /// <summary>Field number for the "win_slot" field.</summary>
    public const int WinSlotFieldNumber = 2;
    private int winSlot_;
    /// <summary>
    /// Player slot (0, 1) that won the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinSlot {
      get { return winSlot_; }
      set {
        winSlot_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 3;
    private bool draw_;
    /// <summary>
    /// Was match a draw?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    /// <summary>Field number for the "game_report" field.</summary>
    public const int GameReportFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport> _repeated_gameReport_codec
        = pb::FieldCodec.ForMessage(34, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport> gameReport_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport>();
    /// <summary>
    /// The game reports for the individual games
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PortalGameReport> GameReport {
      get { return gameReport_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayersAgree != other.PlayersAgree) return false;
      if (WinSlot != other.WinSlot) return false;
      if (Draw != other.Draw) return false;
      if(!gameReport_.Equals(other.gameReport_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayersAgree != false) hash ^= PlayersAgree.GetHashCode();
      if (WinSlot != 0) hash ^= WinSlot.GetHashCode();
      if (Draw != false) hash ^= Draw.GetHashCode();
      hash ^= gameReport_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayersAgree != false) {
        output.WriteRawTag(8);
        output.WriteBool(PlayersAgree);
      }
      if (WinSlot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinSlot);
      }
      if (Draw != false) {
        output.WriteRawTag(24);
        output.WriteBool(Draw);
      }
      gameReport_.WriteTo(output, _repeated_gameReport_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayersAgree != false) {
        size += 1 + 1;
      }
      if (WinSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSlot);
      }
      if (Draw != false) {
        size += 1 + 1;
      }
      size += gameReport_.CalculateSize(_repeated_gameReport_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchReport other) {
      if (other == null) {
        return;
      }
      if (other.PlayersAgree != false) {
        PlayersAgree = other.PlayersAgree;
      }
      if (other.WinSlot != 0) {
        WinSlot = other.WinSlot;
      }
      if (other.Draw != false) {
        Draw = other.Draw;
      }
      gameReport_.Add(other.gameReport_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayersAgree = input.ReadBool();
            break;
          }
          case 16: {
            WinSlot = input.ReadInt32();
            break;
          }
          case 24: {
            Draw = input.ReadBool();
            break;
          }
          case 34: {
            gameReport_.AddEntriesFrom(input, _repeated_gameReport_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGameReplayRecordRequest : pb::IMessage<GetGameReplayRecordRequest> {
    private static readonly pb::MessageParser<GetGameReplayRecordRequest> _parser = new pb::MessageParser<GetGameReplayRecordRequest>(() => new GetGameReplayRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameReplayRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameReplayRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameReplayRecordRequest(GetGameReplayRecordRequest other) : this() {
      matchId_ = other.matchId_;
      gameNumber_ = other.gameNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameReplayRecordRequest Clone() {
      return new GetGameReplayRecordRequest(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    /// <summary>
    /// Match to fetch replay for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "game_number" field.</summary>
    public const int GameNumberFieldNumber = 2;
    private int gameNumber_;
    /// <summary>
    /// Game number of the replay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameNumber {
      get { return gameNumber_; }
      set {
        gameNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameReplayRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameReplayRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameNumber != other.GameNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (GameNumber != 0) hash ^= GameNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (GameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (GameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameReplayRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.GameNumber != 0) {
        GameNumber = other.GameNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            GameNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGameReplayRecordResult : pb::IMessage<GetGameReplayRecordResult> {
    private static readonly pb::MessageParser<GetGameReplayRecordResult> _parser = new pb::MessageParser<GetGameReplayRecordResult>(() => new GetGameReplayRecordResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameReplayRecordResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameReplayRecordResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameReplayRecordResult(GetGameReplayRecordResult other) : this() {
      Record = other.record_ != null ? other.Record.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameReplayRecordResult Clone() {
      return new GetGameReplayRecordResult(this);
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReplayRecord record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReplayRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameReplayRecordResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameReplayRecordResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Record, other.Record)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (record_ != null) hash ^= Record.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameReplayRecordResult other) {
      if (other == null) {
        return;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          record_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReplayRecord();
        }
        Record.MergeFrom(other.Record);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (record_ == null) {
              record_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameReplayRecord();
            }
            input.ReadMessage(record_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterStats : pb::IMessage<CharacterStats> {
    private static readonly pb::MessageParser<CharacterStats> _parser = new pb::MessageParser<CharacterStats>(() => new CharacterStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStats(CharacterStats other) : this() {
      typeName_ = other.typeName_;
      xpLevel_ = other.xpLevel_;
      xp_ = other.xp_;
      wins_ = other.wins_;
      losses_ = other.losses_;
      levelXpMin_ = other.levelXpMin_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStats Clone() {
      return new CharacterStats(this);
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    /// <summary>
    /// Type name of the game character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xp_level" field.</summary>
    public const int XpLevelFieldNumber = 2;
    private int xpLevel_;
    /// <summary>
    /// Experience level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XpLevel {
      get { return xpLevel_; }
      set {
        xpLevel_ = value;
      }
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 3;
    private int xp_;
    /// <summary>
    /// Total experience points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Xp {
      get { return xp_; }
      set {
        xp_ = value;
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 4;
    private int wins_;
    /// <summary>
    /// Total wins &amp; losses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wins {
      get { return wins_; }
      set {
        wins_ = value;
      }
    }

    /// <summary>Field number for the "losses" field.</summary>
    public const int LossesFieldNumber = 5;
    private int losses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Losses {
      get { return losses_; }
      set {
        losses_ = value;
      }
    }

    /// <summary>Field number for the "level_xp_min" field.</summary>
    public const int LevelXpMinFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_levelXpMin_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> levelXpMin_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Total experience point thresholds for the current and subsequent levels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelXpMin {
      get { return levelXpMin_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      if (XpLevel != other.XpLevel) return false;
      if (Xp != other.Xp) return false;
      if (Wins != other.Wins) return false;
      if (Losses != other.Losses) return false;
      if(!levelXpMin_.Equals(other.levelXpMin_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (XpLevel != 0) hash ^= XpLevel.GetHashCode();
      if (Xp != 0) hash ^= Xp.GetHashCode();
      if (Wins != 0) hash ^= Wins.GetHashCode();
      if (Losses != 0) hash ^= Losses.GetHashCode();
      hash ^= levelXpMin_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (XpLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(XpLevel);
      }
      if (Xp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Xp);
      }
      if (Wins != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Wins);
      }
      if (Losses != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Losses);
      }
      levelXpMin_.WriteTo(output, _repeated_levelXpMin_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (XpLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XpLevel);
      }
      if (Xp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Xp);
      }
      if (Wins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wins);
      }
      if (Losses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Losses);
      }
      size += levelXpMin_.CalculateSize(_repeated_levelXpMin_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterStats other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.XpLevel != 0) {
        XpLevel = other.XpLevel;
      }
      if (other.Xp != 0) {
        Xp = other.Xp;
      }
      if (other.Wins != 0) {
        Wins = other.Wins;
      }
      if (other.Losses != 0) {
        Losses = other.Losses;
      }
      levelXpMin_.Add(other.levelXpMin_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
          case 16: {
            XpLevel = input.ReadInt32();
            break;
          }
          case 24: {
            Xp = input.ReadInt32();
            break;
          }
          case 32: {
            Wins = input.ReadInt32();
            break;
          }
          case 40: {
            Losses = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            levelXpMin_.AddEntriesFrom(input, _repeated_levelXpMin_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerStats : pb::IMessage<PlayerStats> {
    private static readonly pb::MessageParser<PlayerStats> _parser = new pb::MessageParser<PlayerStats>(() => new PlayerStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStats(PlayerStats other) : this() {
      xpLevel_ = other.xpLevel_;
      xp_ = other.xp_;
      wins_ = other.wins_;
      losses_ = other.losses_;
      charStats_ = other.charStats_.Clone();
      levelXpMin_ = other.levelXpMin_.Clone();
      winStreak_ = other.winStreak_;
      echelon_ = other.echelon_;
      tier_ = other.tier_;
      points_ = other.points_;
      tierMaxPoints_ = other.tierMaxPoints_;
      rankedStanding_ = other.rankedStanding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStats Clone() {
      return new PlayerStats(this);
    }

    /// <summary>Field number for the "xp_level" field.</summary>
    public const int XpLevelFieldNumber = 1;
    private int xpLevel_;
    /// <summary>
    /// Experience level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XpLevel {
      get { return xpLevel_; }
      set {
        xpLevel_ = value;
      }
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 2;
    private int xp_;
    /// <summary>
    /// Total experience points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Xp {
      get { return xp_; }
      set {
        xp_ = value;
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 3;
    private int wins_;
    /// <summary>
    /// Total wins &amp; losses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wins {
      get { return wins_; }
      set {
        wins_ = value;
      }
    }

    /// <summary>Field number for the "losses" field.</summary>
    public const int LossesFieldNumber = 4;
    private int losses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Losses {
      get { return losses_; }
      set {
        losses_ = value;
      }
    }

    /// <summary>Field number for the "char_stats" field.</summary>
    public const int CharStatsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats> _repeated_charStats_codec
        = pb::FieldCodec.ForMessage(42, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats> charStats_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats>();
    /// <summary>
    /// Stats for each character.  Any not present
    /// are assumed to be level 1 with 0 exp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterStats> CharStats {
      get { return charStats_; }
    }

    /// <summary>Field number for the "level_xp_min" field.</summary>
    public const int LevelXpMinFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_levelXpMin_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> levelXpMin_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Total experience point thresholds for the current and subsequent levels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelXpMin {
      get { return levelXpMin_; }
    }

    /// <summary>Field number for the "win_streak" field.</summary>
    public const int WinStreakFieldNumber = 10;
    private int winStreak_;
    /// <summary>
    /// Number of consecutive wins.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinStreak {
      get { return winStreak_; }
      set {
        winStreak_ = value;
      }
    }

    /// <summary>Field number for the "echelon" field.</summary>
    public const int EchelonFieldNumber = 20;
    private int echelon_;
    /// <summary>
    /// Echelon index (0=Carbon, etc.)  Display: "msg.rank.echelon.%d"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Echelon {
      get { return echelon_; }
      set {
        echelon_ = value;
      }
    }

    /// <summary>Field number for the "tier" field.</summary>
    public const int TierFieldNumber = 21;
    private int tier_;
    /// <summary>
    /// Tier index within echelon (0=I, 1=II, etc.)  Display: "msg.rank.tier.%d"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tier {
      get { return tier_; }
      set {
        tier_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 22;
    private int points_;
    /// <summary>
    /// Points within tier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    /// <summary>Field number for the "tier_max_points" field.</summary>
    public const int TierMaxPointsFieldNumber = 23;
    private int tierMaxPoints_;
    /// <summary>
    /// Number of points required before next tier can be reached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TierMaxPoints {
      get { return tierMaxPoints_; }
      set {
        tierMaxPoints_ = value;
      }
    }

    /// <summary>Field number for the "ranked_standing" field.</summary>
    public const int RankedStandingFieldNumber = 24;
    private int rankedStanding_;
    /// <summary>
    /// Player's standing in the echelon (only valid for highest echelon)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankedStanding {
      get { return rankedStanding_; }
      set {
        rankedStanding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XpLevel != other.XpLevel) return false;
      if (Xp != other.Xp) return false;
      if (Wins != other.Wins) return false;
      if (Losses != other.Losses) return false;
      if(!charStats_.Equals(other.charStats_)) return false;
      if(!levelXpMin_.Equals(other.levelXpMin_)) return false;
      if (WinStreak != other.WinStreak) return false;
      if (Echelon != other.Echelon) return false;
      if (Tier != other.Tier) return false;
      if (Points != other.Points) return false;
      if (TierMaxPoints != other.TierMaxPoints) return false;
      if (RankedStanding != other.RankedStanding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XpLevel != 0) hash ^= XpLevel.GetHashCode();
      if (Xp != 0) hash ^= Xp.GetHashCode();
      if (Wins != 0) hash ^= Wins.GetHashCode();
      if (Losses != 0) hash ^= Losses.GetHashCode();
      hash ^= charStats_.GetHashCode();
      hash ^= levelXpMin_.GetHashCode();
      if (WinStreak != 0) hash ^= WinStreak.GetHashCode();
      if (Echelon != 0) hash ^= Echelon.GetHashCode();
      if (Tier != 0) hash ^= Tier.GetHashCode();
      if (Points != 0) hash ^= Points.GetHashCode();
      if (TierMaxPoints != 0) hash ^= TierMaxPoints.GetHashCode();
      if (RankedStanding != 0) hash ^= RankedStanding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XpLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(XpLevel);
      }
      if (Xp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Xp);
      }
      if (Wins != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Wins);
      }
      if (Losses != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Losses);
      }
      charStats_.WriteTo(output, _repeated_charStats_codec);
      levelXpMin_.WriteTo(output, _repeated_levelXpMin_codec);
      if (WinStreak != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WinStreak);
      }
      if (Echelon != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Echelon);
      }
      if (Tier != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Tier);
      }
      if (Points != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Points);
      }
      if (TierMaxPoints != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TierMaxPoints);
      }
      if (RankedStanding != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(RankedStanding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XpLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XpLevel);
      }
      if (Xp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Xp);
      }
      if (Wins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wins);
      }
      if (Losses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Losses);
      }
      size += charStats_.CalculateSize(_repeated_charStats_codec);
      size += levelXpMin_.CalculateSize(_repeated_levelXpMin_codec);
      if (WinStreak != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinStreak);
      }
      if (Echelon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Echelon);
      }
      if (Tier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tier);
      }
      if (Points != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (TierMaxPoints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TierMaxPoints);
      }
      if (RankedStanding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankedStanding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerStats other) {
      if (other == null) {
        return;
      }
      if (other.XpLevel != 0) {
        XpLevel = other.XpLevel;
      }
      if (other.Xp != 0) {
        Xp = other.Xp;
      }
      if (other.Wins != 0) {
        Wins = other.Wins;
      }
      if (other.Losses != 0) {
        Losses = other.Losses;
      }
      charStats_.Add(other.charStats_);
      levelXpMin_.Add(other.levelXpMin_);
      if (other.WinStreak != 0) {
        WinStreak = other.WinStreak;
      }
      if (other.Echelon != 0) {
        Echelon = other.Echelon;
      }
      if (other.Tier != 0) {
        Tier = other.Tier;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      if (other.TierMaxPoints != 0) {
        TierMaxPoints = other.TierMaxPoints;
      }
      if (other.RankedStanding != 0) {
        RankedStanding = other.RankedStanding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            XpLevel = input.ReadInt32();
            break;
          }
          case 16: {
            Xp = input.ReadInt32();
            break;
          }
          case 24: {
            Wins = input.ReadInt32();
            break;
          }
          case 32: {
            Losses = input.ReadInt32();
            break;
          }
          case 42: {
            charStats_.AddEntriesFrom(input, _repeated_charStats_codec);
            break;
          }
          case 50:
          case 48: {
            levelXpMin_.AddEntriesFrom(input, _repeated_levelXpMin_codec);
            break;
          }
          case 80: {
            WinStreak = input.ReadInt32();
            break;
          }
          case 160: {
            Echelon = input.ReadInt32();
            break;
          }
          case 168: {
            Tier = input.ReadInt32();
            break;
          }
          case 176: {
            Points = input.ReadInt32();
            break;
          }
          case 184: {
            TierMaxPoints = input.ReadInt32();
            break;
          }
          case 192: {
            RankedStanding = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPreferences : pb::IMessage<PlayerPreferences> {
    private static readonly pb::MessageParser<PlayerPreferences> _parser = new pb::MessageParser<PlayerPreferences>(() => new PlayerPreferences());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPreferences> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPreferences() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPreferences(PlayerPreferences other) : this() {
      selectedChar_ = other.selectedChar_;
      localPlayerPrefs_ = other.localPlayerPrefs_;
      charPrefs_ = other.charPrefs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPreferences Clone() {
      return new PlayerPreferences(this);
    }

    /// <summary>Field number for the "selected_char" field.</summary>
    public const int SelectedCharFieldNumber = 1;
    private string selectedChar_ = "";
    /// <summary>
    /// The last character the player selected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectedChar {
      get { return selectedChar_; }
      set {
        selectedChar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_player_prefs" field.</summary>
    public const int LocalPlayerPrefsFieldNumber = 2;
    private pb::ByteString localPlayerPrefs_ = pb::ByteString.Empty;
    /// <summary>
    /// Serialized tbui LocalPlayerPreferences proto for local information that the server
    /// doesn't care about.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LocalPlayerPrefs {
      get { return localPlayerPrefs_; }
      set {
        localPlayerPrefs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "char_prefs" field.</summary>
    public const int CharPrefsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> _repeated_charPrefs_codec
        = pb::FieldCodec.ForMessage(82, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> charPrefs_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec>();
    /// <summary>
    /// Character-specific preferences
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec> CharPrefs {
      get { return charPrefs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPreferences);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPreferences other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectedChar != other.SelectedChar) return false;
      if (LocalPlayerPrefs != other.LocalPlayerPrefs) return false;
      if(!charPrefs_.Equals(other.charPrefs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelectedChar.Length != 0) hash ^= SelectedChar.GetHashCode();
      if (LocalPlayerPrefs.Length != 0) hash ^= LocalPlayerPrefs.GetHashCode();
      hash ^= charPrefs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectedChar.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SelectedChar);
      }
      if (LocalPlayerPrefs.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(LocalPlayerPrefs);
      }
      charPrefs_.WriteTo(output, _repeated_charPrefs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectedChar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedChar);
      }
      if (LocalPlayerPrefs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalPlayerPrefs);
      }
      size += charPrefs_.CalculateSize(_repeated_charPrefs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPreferences other) {
      if (other == null) {
        return;
      }
      if (other.SelectedChar.Length != 0) {
        SelectedChar = other.SelectedChar;
      }
      if (other.LocalPlayerPrefs.Length != 0) {
        LocalPlayerPrefs = other.LocalPlayerPrefs;
      }
      charPrefs_.Add(other.charPrefs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SelectedChar = input.ReadString();
            break;
          }
          case 18: {
            LocalPlayerPrefs = input.ReadBytes();
            break;
          }
          case 82: {
            charPrefs_.AddEntriesFrom(input, _repeated_charPrefs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePlayerPreferencesRequest : pb::IMessage<UpdatePlayerPreferencesRequest> {
    private static readonly pb::MessageParser<UpdatePlayerPreferencesRequest> _parser = new pb::MessageParser<UpdatePlayerPreferencesRequest>(() => new UpdatePlayerPreferencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerPreferencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPreferencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPreferencesRequest(UpdatePlayerPreferencesRequest other) : this() {
      UpdatedPrefs = other.updatedPrefs_ != null ? other.UpdatedPrefs.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPreferencesRequest Clone() {
      return new UpdatePlayerPreferencesRequest(this);
    }

    /// <summary>Field number for the "updated_prefs" field.</summary>
    public const int UpdatedPrefsFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences updatedPrefs_;
    /// <summary>
    /// New preferences. If setting character preferences, set the entire state (spec and all variants).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences UpdatedPrefs {
      get { return updatedPrefs_; }
      set {
        updatedPrefs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerPreferencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerPreferencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpdatedPrefs, other.UpdatedPrefs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updatedPrefs_ != null) hash ^= UpdatedPrefs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updatedPrefs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpdatedPrefs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updatedPrefs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedPrefs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerPreferencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.updatedPrefs_ != null) {
        if (updatedPrefs_ == null) {
          updatedPrefs_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences();
        }
        UpdatedPrefs.MergeFrom(other.UpdatedPrefs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (updatedPrefs_ == null) {
              updatedPrefs_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences();
            }
            input.ReadMessage(updatedPrefs_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Outcome of a game within a match.
  /// </summary>
  public sealed partial class GameResult : pb::IMessage<GameResult> {
    private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => new GameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult(GameResult other) : this() {
      matchId_ = other.matchId_;
      gameNumber_ = other.gameNumber_;
      outcome_ = other.outcome_;
      slotWins_ = other.slotWins_.Clone();
      durationSecs_ = other.durationSecs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult Clone() {
      return new GameResult(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    /// <summary>
    /// Match ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "game_number" field.</summary>
    public const int GameNumberFieldNumber = 2;
    private int gameNumber_;
    /// <summary>
    /// Game number in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameNumber {
      get { return gameNumber_; }
      set {
        gameNumber_ = value;
      }
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 3;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOutcome outcome_ = 0;
    /// <summary>
    /// Resolution of the game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOutcome Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    /// <summary>Field number for the "slot_wins" field.</summary>
    public const int SlotWinsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_slotWins_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> slotWins_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Number of games in the match each player slot has won.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SlotWins {
      get { return slotWins_; }
    }

    /// <summary>Field number for the "duration_secs" field.</summary>
    public const int DurationSecsFieldNumber = 6;
    private int durationSecs_;
    /// <summary>
    /// Game duration in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationSecs {
      get { return durationSecs_; }
      set {
        durationSecs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameNumber != other.GameNumber) return false;
      if (Outcome != other.Outcome) return false;
      if(!slotWins_.Equals(other.slotWins_)) return false;
      if (DurationSecs != other.DurationSecs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (GameNumber != 0) hash ^= GameNumber.GetHashCode();
      if (Outcome != 0) hash ^= Outcome.GetHashCode();
      hash ^= slotWins_.GetHashCode();
      if (DurationSecs != 0) hash ^= DurationSecs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (GameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameNumber);
      }
      if (Outcome != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Outcome);
      }
      slotWins_.WriteTo(output, _repeated_slotWins_codec);
      if (DurationSecs != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DurationSecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (GameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameNumber);
      }
      if (Outcome != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
      }
      size += slotWins_.CalculateSize(_repeated_slotWins_codec);
      if (DurationSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSecs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResult other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.GameNumber != 0) {
        GameNumber = other.GameNumber;
      }
      if (other.Outcome != 0) {
        Outcome = other.Outcome;
      }
      slotWins_.Add(other.slotWins_);
      if (other.DurationSecs != 0) {
        DurationSecs = other.DurationSecs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            GameNumber = input.ReadInt32();
            break;
          }
          case 24: {
            outcome_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameOutcome) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            slotWins_.AddEntriesFrom(input, _repeated_slotWins_codec);
            break;
          }
          case 48: {
            DurationSecs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchResult : pb::IMessage<MatchResult> {
    private static readonly pb::MessageParser<MatchResult> _parser = new pb::MessageParser<MatchResult>(() => new MatchResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchResult(MatchResult other) : this() {
      matchId_ = other.matchId_;
      type_ = other.type_;
      characterTypeName_ = other.characterTypeName_;
      outcome_ = other.outcome_;
      peerDisconnect_ = other.peerDisconnect_;
      startTime_ = other.startTime_;
      durationSecs_ = other.durationSecs_;
      gameCount_ = other.gameCount_;
      gamesWon_ = other.gamesWon_;
      opponentCharacterTypeName_ = other.opponentCharacterTypeName_;
      opponentUserId_ = other.opponentUserId_;
      opponentHandle_ = other.opponentHandle_;
      DeprecatedHasReplay_ = other.DeprecatedHasReplay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchResult Clone() {
      return new MatchResult(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    /// <summary>
    /// Match ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType type_ = 0;
    /// <summary>
    /// Type of match played.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "character_type_name" field.</summary>
    public const int CharacterTypeNameFieldNumber = 3;
    private string characterTypeName_ = "";
    /// <summary>
    /// Character played.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterTypeName {
      get { return characterTypeName_; }
      set {
        characterTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchOutcome outcome_ = 0;
    /// <summary>
    /// Won or lost?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchOutcome Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    /// <summary>Field number for the "peer_disconnect" field.</summary>
    public const int PeerDisconnectFieldNumber = 5;
    private bool peerDisconnect_;
    /// <summary>
    /// True if we won because the opponent disconnected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PeerDisconnect {
      get { return peerDisconnect_; }
      set {
        peerDisconnect_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private string startTime_ = "";
    /// <summary>
    /// Match start time (RFC3339 string).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration_secs" field.</summary>
    public const int DurationSecsFieldNumber = 7;
    private int durationSecs_;
    /// <summary>
    /// Match duration in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationSecs {
      get { return durationSecs_; }
      set {
        durationSecs_ = value;
      }
    }

    /// <summary>Field number for the "game_count" field.</summary>
    public const int GameCountFieldNumber = 8;
    private int gameCount_;
    /// <summary>
    /// Number of games played and won.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameCount {
      get { return gameCount_; }
      set {
        gameCount_ = value;
      }
    }

    /// <summary>Field number for the "games_won" field.</summary>
    public const int GamesWonFieldNumber = 9;
    private int gamesWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamesWon {
      get { return gamesWon_; }
      set {
        gamesWon_ = value;
      }
    }

    /// <summary>Field number for the "opponent_character_type_name" field.</summary>
    public const int OpponentCharacterTypeNameFieldNumber = 20;
    private string opponentCharacterTypeName_ = "";
    /// <summary>
    /// Opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentCharacterTypeName {
      get { return opponentCharacterTypeName_; }
      set {
        opponentCharacterTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "opponent_user_id" field.</summary>
    public const int OpponentUserIdFieldNumber = 21;
    private long opponentUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpponentUserId {
      get { return opponentUserId_; }
      set {
        opponentUserId_ = value;
      }
    }

    /// <summary>Field number for the "opponent_handle" field.</summary>
    public const int OpponentHandleFieldNumber = 22;
    private string opponentHandle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentHandle {
      get { return opponentHandle_; }
      set {
        opponentHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "__deprecated_has_replay" field.</summary>
    public const int DeprecatedHasReplayFieldNumber = 30;
    private bool DeprecatedHasReplay_;
    /// <summary>
    /// Deprecated fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeprecatedHasReplay {
      get { return DeprecatedHasReplay_; }
      set {
        DeprecatedHasReplay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Type != other.Type) return false;
      if (CharacterTypeName != other.CharacterTypeName) return false;
      if (Outcome != other.Outcome) return false;
      if (PeerDisconnect != other.PeerDisconnect) return false;
      if (StartTime != other.StartTime) return false;
      if (DurationSecs != other.DurationSecs) return false;
      if (GameCount != other.GameCount) return false;
      if (GamesWon != other.GamesWon) return false;
      if (OpponentCharacterTypeName != other.OpponentCharacterTypeName) return false;
      if (OpponentUserId != other.OpponentUserId) return false;
      if (OpponentHandle != other.OpponentHandle) return false;
      if (DeprecatedHasReplay != other.DeprecatedHasReplay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CharacterTypeName.Length != 0) hash ^= CharacterTypeName.GetHashCode();
      if (Outcome != 0) hash ^= Outcome.GetHashCode();
      if (PeerDisconnect != false) hash ^= PeerDisconnect.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (DurationSecs != 0) hash ^= DurationSecs.GetHashCode();
      if (GameCount != 0) hash ^= GameCount.GetHashCode();
      if (GamesWon != 0) hash ^= GamesWon.GetHashCode();
      if (OpponentCharacterTypeName.Length != 0) hash ^= OpponentCharacterTypeName.GetHashCode();
      if (OpponentUserId != 0L) hash ^= OpponentUserId.GetHashCode();
      if (OpponentHandle.Length != 0) hash ^= OpponentHandle.GetHashCode();
      if (DeprecatedHasReplay != false) hash ^= DeprecatedHasReplay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (CharacterTypeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CharacterTypeName);
      }
      if (Outcome != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Outcome);
      }
      if (PeerDisconnect != false) {
        output.WriteRawTag(40);
        output.WriteBool(PeerDisconnect);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StartTime);
      }
      if (DurationSecs != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DurationSecs);
      }
      if (GameCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GameCount);
      }
      if (GamesWon != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GamesWon);
      }
      if (OpponentCharacterTypeName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(OpponentCharacterTypeName);
      }
      if (OpponentUserId != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(OpponentUserId);
      }
      if (OpponentHandle.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(OpponentHandle);
      }
      if (DeprecatedHasReplay != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(DeprecatedHasReplay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CharacterTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterTypeName);
      }
      if (Outcome != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
      }
      if (PeerDisconnect != false) {
        size += 1 + 1;
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (DurationSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSecs);
      }
      if (GameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameCount);
      }
      if (GamesWon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamesWon);
      }
      if (OpponentCharacterTypeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OpponentCharacterTypeName);
      }
      if (OpponentUserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OpponentUserId);
      }
      if (OpponentHandle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OpponentHandle);
      }
      if (DeprecatedHasReplay != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchResult other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CharacterTypeName.Length != 0) {
        CharacterTypeName = other.CharacterTypeName;
      }
      if (other.Outcome != 0) {
        Outcome = other.Outcome;
      }
      if (other.PeerDisconnect != false) {
        PeerDisconnect = other.PeerDisconnect;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.DurationSecs != 0) {
        DurationSecs = other.DurationSecs;
      }
      if (other.GameCount != 0) {
        GameCount = other.GameCount;
      }
      if (other.GamesWon != 0) {
        GamesWon = other.GamesWon;
      }
      if (other.OpponentCharacterTypeName.Length != 0) {
        OpponentCharacterTypeName = other.OpponentCharacterTypeName;
      }
      if (other.OpponentUserId != 0L) {
        OpponentUserId = other.OpponentUserId;
      }
      if (other.OpponentHandle.Length != 0) {
        OpponentHandle = other.OpponentHandle;
      }
      if (other.DeprecatedHasReplay != false) {
        DeprecatedHasReplay = other.DeprecatedHasReplay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            type_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 26: {
            CharacterTypeName = input.ReadString();
            break;
          }
          case 32: {
            outcome_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchOutcome) input.ReadEnum();
            break;
          }
          case 40: {
            PeerDisconnect = input.ReadBool();
            break;
          }
          case 50: {
            StartTime = input.ReadString();
            break;
          }
          case 56: {
            DurationSecs = input.ReadInt32();
            break;
          }
          case 64: {
            GameCount = input.ReadInt32();
            break;
          }
          case 72: {
            GamesWon = input.ReadInt32();
            break;
          }
          case 162: {
            OpponentCharacterTypeName = input.ReadString();
            break;
          }
          case 168: {
            OpponentUserId = input.ReadInt64();
            break;
          }
          case 178: {
            OpponentHandle = input.ReadString();
            break;
          }
          case 240: {
            DeprecatedHasReplay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchExperience : pb::IMessage<MatchExperience> {
    private static readonly pb::MessageParser<MatchExperience> _parser = new pb::MessageParser<MatchExperience>(() => new MatchExperience());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchExperience> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchExperience() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchExperience(MatchExperience other) : this() {
      playerXp_ = other.playerXp_;
      playerLevel_ = other.playerLevel_;
      playerLevelXpMin_ = other.playerLevelXpMin_.Clone();
      playerMatchXp_ = other.playerMatchXp_;
      playerWinBonusXp_ = other.playerWinBonusXp_;
      playerBoostXp_ = other.playerBoostXp_;
      characterStartXp_ = other.characterStartXp_;
      characterMatchXp_ = other.characterMatchXp_;
      characterWinBonusXp_ = other.characterWinBonusXp_;
      characterBoostXp_ = other.characterBoostXp_;
      characterLevel_ = other.characterLevel_;
      characterLevelXpMin_ = other.characterLevelXpMin_.Clone();
      rankPoints_ = other.rankPoints_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchExperience Clone() {
      return new MatchExperience(this);
    }

    /// <summary>Field number for the "player_xp" field.</summary>
    public const int PlayerXpFieldNumber = 10;
    private int playerXp_;
    /// <summary>
    /// Starting player total XP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerXp {
      get { return playerXp_; }
      set {
        playerXp_ = value;
      }
    }

    /// <summary>Field number for the "player_level" field.</summary>
    public const int PlayerLevelFieldNumber = 11;
    private int playerLevel_;
    /// <summary>
    /// Starting player level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "player_level_xp_min" field.</summary>
    public const int PlayerLevelXpMinFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_playerLevelXpMin_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> playerLevelXpMin_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Experience thresholds for current player level (index 0),
    /// plus a few more in case the player levels up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerLevelXpMin {
      get { return playerLevelXpMin_; }
    }

    /// <summary>Field number for the "player_match_xp" field.</summary>
    public const int PlayerMatchXpFieldNumber = 21;
    private int playerMatchXp_;
    /// <summary>
    /// XP earned from the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerMatchXp {
      get { return playerMatchXp_; }
      set {
        playerMatchXp_ = value;
      }
    }

    /// <summary>Field number for the "player_win_bonus_xp" field.</summary>
    public const int PlayerWinBonusXpFieldNumber = 22;
    private int playerWinBonusXp_;
    /// <summary>
    /// XP bonus for winning.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerWinBonusXp {
      get { return playerWinBonusXp_; }
      set {
        playerWinBonusXp_ = value;
      }
    }

    /// <summary>Field number for the "player_boost_xp" field.</summary>
    public const int PlayerBoostXpFieldNumber = 23;
    private int playerBoostXp_;
    /// <summary>
    /// XP boost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBoostXp {
      get { return playerBoostXp_; }
      set {
        playerBoostXp_ = value;
      }
    }

    /// <summary>Field number for the "character_start_xp" field.</summary>
    public const int CharacterStartXpFieldNumber = 30;
    private int characterStartXp_;
    /// <summary>
    /// Original character XP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterStartXp {
      get { return characterStartXp_; }
      set {
        characterStartXp_ = value;
      }
    }

    /// <summary>Field number for the "character_match_xp" field.</summary>
    public const int CharacterMatchXpFieldNumber = 31;
    private int characterMatchXp_;
    /// <summary>
    /// XP earned by character from the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterMatchXp {
      get { return characterMatchXp_; }
      set {
        characterMatchXp_ = value;
      }
    }

    /// <summary>Field number for the "character_win_bonus_xp" field.</summary>
    public const int CharacterWinBonusXpFieldNumber = 32;
    private int characterWinBonusXp_;
    /// <summary>
    /// Character XP bonus for winning.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterWinBonusXp {
      get { return characterWinBonusXp_; }
      set {
        characterWinBonusXp_ = value;
      }
    }

    /// <summary>Field number for the "character_boost_xp" field.</summary>
    public const int CharacterBoostXpFieldNumber = 33;
    private int characterBoostXp_;
    /// <summary>
    /// character XP boost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterBoostXp {
      get { return characterBoostXp_; }
      set {
        characterBoostXp_ = value;
      }
    }

    /// <summary>Field number for the "character_level" field.</summary>
    public const int CharacterLevelFieldNumber = 35;
    private int characterLevel_;
    /// <summary>
    /// Starting character level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterLevel {
      get { return characterLevel_; }
      set {
        characterLevel_ = value;
      }
    }

    /// <summary>Field number for the "character_level_xp_min" field.</summary>
    public const int CharacterLevelXpMinFieldNumber = 34;
    private static readonly pb::FieldCodec<int> _repeated_characterLevelXpMin_codec
        = pb::FieldCodec.ForInt32(274);
    private readonly pbc::RepeatedField<int> characterLevelXpMin_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Experience thresholds for current character level (index 0),
    /// plus a few more in case the character levels up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CharacterLevelXpMin {
      get { return characterLevelXpMin_; }
    }

    /// <summary>Field number for the "rank_points" field.</summary>
    public const int RankPointsFieldNumber = 40;
    private int rankPoints_;
    /// <summary>
    /// Ranking tier points awarded. Could be 0 or negative.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankPoints {
      get { return rankPoints_; }
      set {
        rankPoints_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchExperience);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchExperience other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerXp != other.PlayerXp) return false;
      if (PlayerLevel != other.PlayerLevel) return false;
      if(!playerLevelXpMin_.Equals(other.playerLevelXpMin_)) return false;
      if (PlayerMatchXp != other.PlayerMatchXp) return false;
      if (PlayerWinBonusXp != other.PlayerWinBonusXp) return false;
      if (PlayerBoostXp != other.PlayerBoostXp) return false;
      if (CharacterStartXp != other.CharacterStartXp) return false;
      if (CharacterMatchXp != other.CharacterMatchXp) return false;
      if (CharacterWinBonusXp != other.CharacterWinBonusXp) return false;
      if (CharacterBoostXp != other.CharacterBoostXp) return false;
      if (CharacterLevel != other.CharacterLevel) return false;
      if(!characterLevelXpMin_.Equals(other.characterLevelXpMin_)) return false;
      if (RankPoints != other.RankPoints) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerXp != 0) hash ^= PlayerXp.GetHashCode();
      if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
      hash ^= playerLevelXpMin_.GetHashCode();
      if (PlayerMatchXp != 0) hash ^= PlayerMatchXp.GetHashCode();
      if (PlayerWinBonusXp != 0) hash ^= PlayerWinBonusXp.GetHashCode();
      if (PlayerBoostXp != 0) hash ^= PlayerBoostXp.GetHashCode();
      if (CharacterStartXp != 0) hash ^= CharacterStartXp.GetHashCode();
      if (CharacterMatchXp != 0) hash ^= CharacterMatchXp.GetHashCode();
      if (CharacterWinBonusXp != 0) hash ^= CharacterWinBonusXp.GetHashCode();
      if (CharacterBoostXp != 0) hash ^= CharacterBoostXp.GetHashCode();
      if (CharacterLevel != 0) hash ^= CharacterLevel.GetHashCode();
      hash ^= characterLevelXpMin_.GetHashCode();
      if (RankPoints != 0) hash ^= RankPoints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerXp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PlayerXp);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PlayerLevel);
      }
      playerLevelXpMin_.WriteTo(output, _repeated_playerLevelXpMin_codec);
      if (PlayerMatchXp != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PlayerMatchXp);
      }
      if (PlayerWinBonusXp != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(PlayerWinBonusXp);
      }
      if (PlayerBoostXp != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PlayerBoostXp);
      }
      if (CharacterStartXp != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(CharacterStartXp);
      }
      if (CharacterMatchXp != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(CharacterMatchXp);
      }
      if (CharacterWinBonusXp != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(CharacterWinBonusXp);
      }
      if (CharacterBoostXp != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(CharacterBoostXp);
      }
      characterLevelXpMin_.WriteTo(output, _repeated_characterLevelXpMin_codec);
      if (CharacterLevel != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(CharacterLevel);
      }
      if (RankPoints != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(RankPoints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerXp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerXp);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      size += playerLevelXpMin_.CalculateSize(_repeated_playerLevelXpMin_codec);
      if (PlayerMatchXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerMatchXp);
      }
      if (PlayerWinBonusXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerWinBonusXp);
      }
      if (PlayerBoostXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBoostXp);
      }
      if (CharacterStartXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterStartXp);
      }
      if (CharacterMatchXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterMatchXp);
      }
      if (CharacterWinBonusXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterWinBonusXp);
      }
      if (CharacterBoostXp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterBoostXp);
      }
      if (CharacterLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterLevel);
      }
      size += characterLevelXpMin_.CalculateSize(_repeated_characterLevelXpMin_codec);
      if (RankPoints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankPoints);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchExperience other) {
      if (other == null) {
        return;
      }
      if (other.PlayerXp != 0) {
        PlayerXp = other.PlayerXp;
      }
      if (other.PlayerLevel != 0) {
        PlayerLevel = other.PlayerLevel;
      }
      playerLevelXpMin_.Add(other.playerLevelXpMin_);
      if (other.PlayerMatchXp != 0) {
        PlayerMatchXp = other.PlayerMatchXp;
      }
      if (other.PlayerWinBonusXp != 0) {
        PlayerWinBonusXp = other.PlayerWinBonusXp;
      }
      if (other.PlayerBoostXp != 0) {
        PlayerBoostXp = other.PlayerBoostXp;
      }
      if (other.CharacterStartXp != 0) {
        CharacterStartXp = other.CharacterStartXp;
      }
      if (other.CharacterMatchXp != 0) {
        CharacterMatchXp = other.CharacterMatchXp;
      }
      if (other.CharacterWinBonusXp != 0) {
        CharacterWinBonusXp = other.CharacterWinBonusXp;
      }
      if (other.CharacterBoostXp != 0) {
        CharacterBoostXp = other.CharacterBoostXp;
      }
      if (other.CharacterLevel != 0) {
        CharacterLevel = other.CharacterLevel;
      }
      characterLevelXpMin_.Add(other.characterLevelXpMin_);
      if (other.RankPoints != 0) {
        RankPoints = other.RankPoints;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            PlayerXp = input.ReadInt32();
            break;
          }
          case 88: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            playerLevelXpMin_.AddEntriesFrom(input, _repeated_playerLevelXpMin_codec);
            break;
          }
          case 168: {
            PlayerMatchXp = input.ReadInt32();
            break;
          }
          case 176: {
            PlayerWinBonusXp = input.ReadInt32();
            break;
          }
          case 184: {
            PlayerBoostXp = input.ReadInt32();
            break;
          }
          case 240: {
            CharacterStartXp = input.ReadInt32();
            break;
          }
          case 248: {
            CharacterMatchXp = input.ReadInt32();
            break;
          }
          case 256: {
            CharacterWinBonusXp = input.ReadInt32();
            break;
          }
          case 264: {
            CharacterBoostXp = input.ReadInt32();
            break;
          }
          case 274:
          case 272: {
            characterLevelXpMin_.AddEntriesFrom(input, _repeated_characterLevelXpMin_codec);
            break;
          }
          case 280: {
            CharacterLevel = input.ReadInt32();
            break;
          }
          case 320: {
            RankPoints = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information about a previously played game.
  /// </summary>
  public sealed partial class GameRecord : pb::IMessage<GameRecord> {
    private static readonly pb::MessageParser<GameRecord> _parser = new pb::MessageParser<GameRecord>(() => new GameRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord(GameRecord other) : this() {
      matchId_ = other.matchId_;
      gameNumber_ = other.gameNumber_;
      type_ = other.type_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      winSlot_ = other.winSlot_;
      startTime_ = other.startTime_;
      durationSecs_ = other.durationSecs_;
      hasReplay_ = other.hasReplay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord Clone() {
      return new GameRecord(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "game_number" field.</summary>
    public const int GameNumberFieldNumber = 2;
    private int gameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameNumber {
      get { return gameNumber_; }
      set {
        gameNumber_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType type_ = 0;
    /// <summary>
    /// Type of match the game belonged to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig config_;
    /// <summary>
    /// Match start conditions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "win_slot" field.</summary>
    public const int WinSlotFieldNumber = 5;
    private int winSlot_;
    /// <summary>
    /// Which slot won the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinSlot {
      get { return winSlot_; }
      set {
        winSlot_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private string startTime_ = "";
    /// <summary>
    /// Game start time (RFC3339 string).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration_secs" field.</summary>
    public const int DurationSecsFieldNumber = 7;
    private int durationSecs_;
    /// <summary>
    /// Game duration in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationSecs {
      get { return durationSecs_; }
      set {
        durationSecs_ = value;
      }
    }

    /// <summary>Field number for the "has_replay" field.</summary>
    public const int HasReplayFieldNumber = 10;
    private bool hasReplay_;
    /// <summary>
    /// Is replay data available?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplay {
      get { return hasReplay_; }
      set {
        hasReplay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameNumber != other.GameNumber) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (WinSlot != other.WinSlot) return false;
      if (StartTime != other.StartTime) return false;
      if (DurationSecs != other.DurationSecs) return false;
      if (HasReplay != other.HasReplay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (GameNumber != 0) hash ^= GameNumber.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (WinSlot != 0) hash ^= WinSlot.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (DurationSecs != 0) hash ^= DurationSecs.GetHashCode();
      if (HasReplay != false) hash ^= HasReplay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (GameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameNumber);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (config_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Config);
      }
      if (WinSlot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinSlot);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StartTime);
      }
      if (DurationSecs != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DurationSecs);
      }
      if (HasReplay != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasReplay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (GameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameNumber);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (WinSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSlot);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (DurationSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSecs);
      }
      if (HasReplay != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRecord other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.GameNumber != 0) {
        GameNumber = other.GameNumber;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.WinSlot != 0) {
        WinSlot = other.WinSlot;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.DurationSecs != 0) {
        DurationSecs = other.DurationSecs;
      }
      if (other.HasReplay != false) {
        HasReplay = other.HasReplay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            GameNumber = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 34: {
            if (config_ == null) {
              config_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 40: {
            WinSlot = input.ReadInt32();
            break;
          }
          case 50: {
            StartTime = input.ReadString();
            break;
          }
          case 56: {
            DurationSecs = input.ReadInt32();
            break;
          }
          case 80: {
            HasReplay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPlayerStatsResult : pb::IMessage<GetPlayerStatsResult> {
    private static readonly pb::MessageParser<GetPlayerStatsResult> _parser = new pb::MessageParser<GetPlayerStatsResult>(() => new GetPlayerStatsResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerStatsResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerStatsResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerStatsResult(GetPlayerStatsResult other) : this() {
      Stats = other.stats_ != null ? other.Stats.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerStatsResult Clone() {
      return new GetPlayerStatsResult(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerStatsResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerStatsResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stats_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerStatsResult other) {
      if (other == null) {
        return;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stats_ == null) {
              stats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats();
            }
            input.ReadMessage(stats_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRecentGamesResult : pb::IMessage<GetRecentGamesResult> {
    private static readonly pb::MessageParser<GetRecentGamesResult> _parser = new pb::MessageParser<GetRecentGamesResult>(() => new GetRecentGamesResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRecentGamesResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentGamesResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentGamesResult(GetRecentGamesResult other) : this() {
      game_ = other.game_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentGamesResult Clone() {
      return new GetRecentGamesResult(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord> _repeated_game_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord> game_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameRecord> Game {
      get { return game_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRecentGamesResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRecentGamesResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!game_.Equals(other.game_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= game_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      game_.WriteTo(output, _repeated_game_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += game_.CalculateSize(_repeated_game_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRecentGamesResult other) {
      if (other == null) {
        return;
      }
      game_.Add(other.game_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            game_.AddEntriesFrom(input, _repeated_game_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Everything the RT client needs at startup.
  /// </summary>
  public sealed partial class GameProfile : pb::IMessage<GameProfile> {
    private static readonly pb::MessageParser<GameProfile> _parser = new pb::MessageParser<GameProfile>(() => new GameProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameProfile(GameProfile other) : this() {
      accountId_ = other.accountId_;
      handle_ = other.handle_;
      givenName_ = other.givenName_;
      locale_ = other.locale_;
      Stats = other.stats_ != null ? other.Stats.Clone() : null;
      PlayerPrefs = other.playerPrefs_ != null ? other.PlayerPrefs.Clone() : null;
      FeatureSet = other.featureSet_ != null ? other.FeatureSet.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameProfile Clone() {
      return new GameProfile(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "given_name" field.</summary>
    public const int GivenNameFieldNumber = 3;
    private string givenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GivenName {
      get { return givenName_; }
      set {
        givenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 4;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 10;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats stats_;
    /// <summary>
    /// Player and character experience
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "player_prefs" field.</summary>
    public const int PlayerPrefsFieldNumber = 13;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences playerPrefs_;
    /// <summary>
    /// Saved preferences for the player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences PlayerPrefs {
      get { return playerPrefs_; }
      set {
        playerPrefs_ = value;
      }
    }

    /// <summary>Field number for the "feature_set" field.</summary>
    public const int FeatureSetFieldNumber = 20;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ClientFeatureSet featureSet_;
    /// <summary>
    /// Server capabilities enabled for this session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ClientFeatureSet FeatureSet {
      get { return featureSet_; }
      set {
        featureSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Handle != other.Handle) return false;
      if (GivenName != other.GivenName) return false;
      if (Locale != other.Locale) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (!object.Equals(PlayerPrefs, other.PlayerPrefs)) return false;
      if (!object.Equals(FeatureSet, other.FeatureSet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (GivenName.Length != 0) hash ^= GivenName.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (playerPrefs_ != null) hash ^= PlayerPrefs.GetHashCode();
      if (featureSet_ != null) hash ^= FeatureSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Handle);
      }
      if (GivenName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GivenName);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Locale);
      }
      if (stats_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Stats);
      }
      if (playerPrefs_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PlayerPrefs);
      }
      if (featureSet_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(FeatureSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (GivenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GivenName);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (playerPrefs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerPrefs);
      }
      if (featureSet_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FeatureSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameProfile other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.GivenName.Length != 0) {
        GivenName = other.GivenName;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.playerPrefs_ != null) {
        if (playerPrefs_ == null) {
          playerPrefs_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences();
        }
        PlayerPrefs.MergeFrom(other.PlayerPrefs);
      }
      if (other.featureSet_ != null) {
        if (featureSet_ == null) {
          featureSet_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ClientFeatureSet();
        }
        FeatureSet.MergeFrom(other.FeatureSet);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Handle = input.ReadString();
            break;
          }
          case 26: {
            GivenName = input.ReadString();
            break;
          }
          case 34: {
            Locale = input.ReadString();
            break;
          }
          case 82: {
            if (stats_ == null) {
              stats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats();
            }
            input.ReadMessage(stats_);
            break;
          }
          case 106: {
            if (playerPrefs_ == null) {
              playerPrefs_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerPreferences();
            }
            input.ReadMessage(playerPrefs_);
            break;
          }
          case 162: {
            if (featureSet_ == null) {
              featureSet_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.ClientFeatureSet();
            }
            input.ReadMessage(featureSet_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetGameRequest : pb::IMessage<ResetGameRequest> {
    private static readonly pb::MessageParser<ResetGameRequest> _parser = new pb::MessageParser<ResetGameRequest>(() => new ResetGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetGameRequest(ResetGameRequest other) : this() {
      matchId_ = other.matchId_;
      CharacterSpec = other.characterSpec_ != null ? other.CharacterSpec.Clone() : null;
      TrainingOptions = other.trainingOptions_ != null ? other.TrainingOptions.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetGameRequest Clone() {
      return new ResetGameRequest(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    /// <summary>
    /// The in-progress match to reset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "character_spec" field.</summary>
    public const int CharacterSpecFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec characterSpec_;
    /// <summary>
    /// The new character spec to use for the next game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec CharacterSpec {
      get { return characterSpec_; }
      set {
        characterSpec_ = value;
      }
    }

    /// <summary>Field number for the "training_options" field.</summary>
    public const int TrainingOptionsFieldNumber = 3;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions trainingOptions_;
    /// <summary>
    /// Proposed training game options for the next game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions TrainingOptions {
      get { return trainingOptions_; }
      set {
        trainingOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(CharacterSpec, other.CharacterSpec)) return false;
      if (!object.Equals(TrainingOptions, other.TrainingOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (characterSpec_ != null) hash ^= CharacterSpec.GetHashCode();
      if (trainingOptions_ != null) hash ^= TrainingOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (characterSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CharacterSpec);
      }
      if (trainingOptions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrainingOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (characterSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterSpec);
      }
      if (trainingOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.characterSpec_ != null) {
        if (characterSpec_ == null) {
          characterSpec_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
        }
        CharacterSpec.MergeFrom(other.CharacterSpec);
      }
      if (other.trainingOptions_ != null) {
        if (trainingOptions_ == null) {
          trainingOptions_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions();
        }
        TrainingOptions.MergeFrom(other.TrainingOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            if (characterSpec_ == null) {
              characterSpec_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
            }
            input.ReadMessage(characterSpec_);
            break;
          }
          case 26: {
            if (trainingOptions_ == null) {
              trainingOptions_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.TrainingGameOptions();
            }
            input.ReadMessage(trainingOptions_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
