// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbportal/portal.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tbportal {

  /// <summary>Holder for reflection information generated from tbportal/portal.proto</summary>
  public static partial class PortalReflection {

    #region Descriptor
    /// <summary>File descriptor for tbportal/portal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PortalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChV0YnBvcnRhbC9wb3J0YWwucHJvdG8SCHRicG9ydGFsGhN0Ym1hdGNoL21h",
            "dGNoLnByb3RvIoABChFSZWRpc0xpc3RlbkNvbmZpZxISCgpyZWRpc19ob3N0",
            "GAEgASgJEhIKCnJlZGlzX3BvcnQYAiABKAUSEgoKbGlzdGVuX2tleRgDIAEo",
            "CRIWCg5yZXFfZXhwaXJlX3NlYxgKIAEoBRIXCg9yZXNwX2V4cGlyZV9zZWMY",
            "CyABKAUiVwoJTmV0Q29uZmlnEhEKCXB1YmxpY19pcBgBIAEoCRIRCglwb3J0",
            "X2Jhc2UYAiABKAUSEgoKcG9ydF9yYW5nZRgDIAEoBRIQCghpbnN0YW5jZRgE",
            "IAEoBSJQCgxTdGF0dXNDb25maWcSDAoEcG9ydBgBIAEoBRILCgN1cmkYAiAB",
            "KAkSEgoKaGVhbHRoX3VyaRgDIAEoCRIRCglhbGxvd19uZXQYBCADKAki2wMK",
            "EUdhbWVTZXNzaW9uQ29uZmlnEhQKDG1heF9zZXNzaW9ucxgBIAEoBRIVCg1t",
            "YXhfYXV0aF9mYWlsGB4gASgFEhoKEmNvbm5lY3RfdGltZW91dF9tcxgfIAEo",
            "BRIjChtoYW5kc2hha2VfcmVwb3J0X3RpbWVvdXRfbXMYJSABKAUSGwoTaW5h",
            "Y3RpdmVfdGltZW91dF9tcxggIAEoBRIZChFhY3RpdmVfdGltZW91dF9tcxgh",
            "IAEoBRIaChJnb29kYnllX3RpbWVvdXRfbXMYIiABKAUSJAocZG91YmxlX2Rp",
            "c2Nvbm5lY3RfdGltZW91dF9tcxgjIAEoBRIdChV2YXJfY2hhbmdlX3RpbWVv",
            "dXRfbXMYJCABKAUSHwoXaW5wdXRfbGluZ2VyX3RpbWVvdXRfbXMYJiABKAUS",
            "HQoVbWF4X2hhbmRzaGFrZV9yZXBsaWVzGCggASgFEiMKG2hhbmRzaGFrZV9y",
            "ZXBseV9pbnRlcnZhbF9tcxgpIAEoBRIeChZtYXhfdmFyX2NoYW5nZV9yZXBs",
            "aWVzGC0gASgFEiQKHHZhcl9jaGFuZ2VfcmVwbHlfaW50ZXJ2YWxfbXMYLiAB",
            "KAUSFAoMZ2FtZXNfdG9fd2luGDIgASgFIjoKDk9ic2VydmVyQ29uZmlnEhMK",
            "C3JlcG9ydF9zaXplGAEgASgNEhMKC2J1Y2tldF9zaXplGAIgASgNIlsKDlBp",
            "bmdUZXN0Q29uZmlnEhIKCnBpbmdfY291bnQYASABKAUSFwoPd2FpdF90aW1l",
            "b3V0X21zGAIgASgFEhwKFG5leHRfcGluZ190aW1lb3V0X21zGAMgASgFIosC",
            "CgxTZXJ2ZXJDb25maWcSKgoFcmVkaXMYASABKAsyGy50YnBvcnRhbC5SZWRp",
            "c0xpc3RlbkNvbmZpZxImCgZzdGF0dXMYAiABKAsyFi50YnBvcnRhbC5TdGF0",
            "dXNDb25maWcSIAoDbmV0GAMgASgLMhMudGJwb3J0YWwuTmV0Q29uZmlnEiwK",
            "B3Nlc3Npb24YCiABKAsyGy50YnBvcnRhbC5HYW1lU2Vzc2lvbkNvbmZpZxIr",
            "CglwaW5nX3Rlc3QYCyABKAsyGC50YnBvcnRhbC5QaW5nVGVzdENvbmZpZxIq",
            "CghvYnNlcnZlchgUIAEoCzIYLnRicG9ydGFsLk9ic2VydmVyQ29uZmlnIm4K",
            "CkNsaWVudFNwZWMSDgoGc2VjcmV0GAEgASgGEhEKCWNsaWVudF9pcBgCIAEo",
            "BRIpCgljaGFyYWN0ZXIYAyABKAsyFi50Ym1hdGNoLkNoYXJhY3RlclNwZWMS",
            "EgoKc2hhcmVkX2tleRgEIAEoDCImCgpFdmVudFF1ZXVlEgwKBHR5cGUYASAB",
            "KAkSCgoCaWQYAiABKAkidQoSR2FtZVNlc3Npb25SZXF1ZXN0EiIKBHNwZWMY",
            "ASADKAsyFC50YnBvcnRhbC5DbGllbnRTcGVjEiYKCG9ic2VydmVyGAIgASgL",
            "MhQudGJwb3J0YWwuRXZlbnRRdWV1ZRITCgthbGxvd19yZXNldBgDIAEoCCI9",
            "ChNHYW1lU2Vzc2lvblJlc3BvbnNlEhEKCXB1YmxpY19pcBgCIAEoBRITCgtw",
            "dWJsaWNfcG9ydBgDIAMoBSKfBwoRR2FtZVNlc3Npb25SZXBvcnQSDAoEdXVp",
            "ZBgBIAEoDBI6CgpyZXNvbHV0aW9uGAMgASgOMiYudGJwb3J0YWwuR2FtZVNl",
            "c3Npb25SZXBvcnQuUmVzb2x1dGlvbhIRCglvcGVuX3RpbWUYBCABKAMSEgoK",
            "Y2xvc2VfdGltZRgFIAEoAxIUCgx0aW1lb3V0X3Nsb3QYBiADKAUSRQoQaGFu",
            "ZHNoYWtlX3N0YXR1cxgKIAEoDjIrLnRicG9ydGFsLkdhbWVTZXNzaW9uUmVw",
            "b3J0LkhhbmRzaGFrZVN0YXR1cxI7CgtwaW5nX3JlcG9ydBgNIAEoCzImLnRi",
            "cG9ydGFsLkdhbWVTZXNzaW9uUmVwb3J0LlBpbmdSZXBvcnQSKgoMbWF0Y2hf",
            "cmVwb3J0GAkgASgLMhQudGJtYXRjaC5NYXRjaFJlcG9ydBI7CgtwbGF5ZXJf",
            "c3RhdBgLIAMoCzImLnRicG9ydGFsLkdhbWVTZXNzaW9uUmVwb3J0LlBsYXll",
            "clN0YXQSRwoRZGlzY29ubmVjdF9yZWFzb24YDCABKA4yLC50YnBvcnRhbC5H",
            "YW1lU2Vzc2lvblJlcG9ydC5EaXNjb25uZWN0UmVhc29uEiIKGl9fZGVwcmVj",
            "YXRlZF9vdXRjb21lX2FncmVlGAcgASgIEhwKFF9fZGVwcmVjYXRlZF9vdXRj",
            "b21lGAggASgMGksKClBpbmdSZXBvcnQSEwoLbWluX3BpbmdfbXMYASABKAUS",
            "EwoLYXZnX3BpbmdfbXMYAiABKAUSEwoLbWF4X3BpbmdfbXMYAyABKAUaSwoK",
            "UGxheWVyU3RhdBITCgthdmdfcGluZ19tcxgBIAEoBRIPCgdhdmdfZnBzGAIg",
            "ASgFEhcKD2xldmVsX2xvYWRfdGltZRgDIAEoBSJzCgpSZXNvbHV0aW9uEgsK",
            "B1VOS05PV04QABILCgdHT09EQllFEAESFQoRSEFORFNIQUtFX1RJTUVPVVQQ",
            "AhIOCgpESVNDT05ORUNUEAMSEAoMTUFYX0xJRkVUSU1FEAQSEgoOSEFORFNI",
            "QUtFX0ZBSUwQBSI5Cg9IYW5kc2hha2VTdGF0dXMSBgoCT0sQABIPCgtVTlJF",
            "QUNIQUJMRRABEg0KCUhJR0hfUElORxACIkEKEERpc2Nvbm5lY3RSZWFzb24S",
            "CAoETk9ORRAAEg4KCklOQUNUSVZJVFkQARITCg9HT09EQllFX1RJTUVPVVQQ",
            "AiI1Cg9QaW5nVGVzdFJlcXVlc3QSIgoEc3BlYxgBIAEoCzIULnRicG9ydGFs",
            "LkNsaWVudFNwZWMiOgoQUGluZ1Rlc3RSZXNwb25zZRIRCglwdWJsaWNfaXAY",
            "AiABKAUSEwoLcHVibGljX3BvcnQYBiABKAUizgEKDlBpbmdUZXN0UmVwb3J0",
            "EjcKCnJlc29sdXRpb24YAiABKA4yIy50YnBvcnRhbC5QaW5nVGVzdFJlcG9y",
            "dC5SZXNvbHV0aW9uEgwKBHNlbnQYCiABKAUSEAoIcmVjZWl2ZWQYCyABKAUS",
            "FgoObWF4X2xhdGVuY3lfbXMYDCABKAUSFgoOYXZnX2xhdGVuY3lfbXMYDSAB",
            "KAUiMwoKUmVzb2x1dGlvbhILCgdVTktOT1dOEAASCwoHU1VDQ0VTUxABEgsK",
            "B1RJTUVPVVQQAiIsChVHYW1lUmVzZXROb3RpZmljYXRpb24SEwoLcG9ydGFs",
            "X3V1aWQYASABKAwikQIKB1JlcXVlc3QSIwoEdHlwZRgBIAEoDjIVLnRicG9y",
            "dGFsLlJlcXVlc3RUeXBlEhEKCWNhbGxlcl9pZBgCIAEoAxIYChByZXNwb25z",
            "ZV9jaGFubmVsGAMgASgJEhEKCXRpbWVzdGFtcBgEIAEoAxISCgpyZXBvcnRf",
            "a2V5GAUgASgJEioKBGdhbWUYCiABKAsyHC50YnBvcnRhbC5HYW1lU2Vzc2lv",
            "blJlcXVlc3QSLAoJcGluZ190ZXN0GAsgASgLMhkudGJwb3J0YWwuUGluZ1Rl",
            "c3RSZXF1ZXN0EjMKCmdhbWVfcmVzZXQYDCABKAsyHy50YnBvcnRhbC5HYW1l",
            "UmVzZXROb3RpZmljYXRpb24isgIKCFJlc3BvbnNlEiMKBHR5cGUYASABKA4y",
            "FS50YnBvcnRhbC5SZXF1ZXN0VHlwZRIRCgljYWxsZXJfaWQYAiABKAMSKQoG",
            "cmVzdWx0GAMgASgOMhkudGJwb3J0YWwuUmVzcG9uc2UuUmVzdWx0Eg8KB29w",
            "X3V1aWQYBCABKAwSKwoEZ2FtZRgKIAEoCzIdLnRicG9ydGFsLkdhbWVTZXNz",
            "aW9uUmVzcG9uc2USLQoJcGluZ190ZXN0GAsgASgLMhoudGJwb3J0YWwuUGlu",
            "Z1Rlc3RSZXNwb25zZSJWCgZSZXN1bHQSCwoHVU5LTk9XThAAEgsKB1NVQ0NF",
            "U1MQARIPCgtCQURfUkVRVUVTVBACEg8KC1NFUlZFUl9CVVNZEAMSEAoMTkVU",
            "V09SS19GQUlMEAQiqQEKBlJlcG9ydBIjCgR0eXBlGAEgASgOMhUudGJwb3J0",
            "YWwuUmVxdWVzdFR5cGUSEQoJY2FsbGVyX2lkGAIgASgDEg8KB29wX3V1aWQY",
            "AyABKAwSKQoEZ2FtZRgKIAEoCzIbLnRicG9ydGFsLkdhbWVTZXNzaW9uUmVw",
            "b3J0EisKCXBpbmdfdGVzdBgLIAEoCzIYLnRicG9ydGFsLlBpbmdUZXN0UmVw",
            "b3J0KmIKC1JlcXVlc3RUeXBlEhUKEVJFUVVFU1RfVFlQRV9aRVJPEAASEAoM",
            "R0FNRV9TRVNTSU9OEAoSDQoJUElOR19URVNUEAsSGwoXR0FNRV9SRVNFVF9O",
            "T1RJRklDQVRJT04QDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tbmatch.MatchReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tbportal.RequestType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.RedisListenConfig), global::Tbportal.RedisListenConfig.Parser, new[]{ "RedisHost", "RedisPort", "ListenKey", "ReqExpireSec", "RespExpireSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.NetConfig), global::Tbportal.NetConfig.Parser, new[]{ "PublicIp", "PortBase", "PortRange", "Instance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.StatusConfig), global::Tbportal.StatusConfig.Parser, new[]{ "Port", "Uri", "HealthUri", "AllowNet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameSessionConfig), global::Tbportal.GameSessionConfig.Parser, new[]{ "MaxSessions", "MaxAuthFail", "ConnectTimeoutMs", "HandshakeReportTimeoutMs", "InactiveTimeoutMs", "ActiveTimeoutMs", "GoodbyeTimeoutMs", "DoubleDisconnectTimeoutMs", "VarChangeTimeoutMs", "InputLingerTimeoutMs", "MaxHandshakeReplies", "HandshakeReplyIntervalMs", "MaxVarChangeReplies", "VarChangeReplyIntervalMs", "GamesToWin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.ObserverConfig), global::Tbportal.ObserverConfig.Parser, new[]{ "ReportSize", "BucketSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.PingTestConfig), global::Tbportal.PingTestConfig.Parser, new[]{ "PingCount", "WaitTimeoutMs", "NextPingTimeoutMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.ServerConfig), global::Tbportal.ServerConfig.Parser, new[]{ "Redis", "Status", "Net", "Session", "PingTest", "Observer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.ClientSpec), global::Tbportal.ClientSpec.Parser, new[]{ "Secret", "ClientIp", "Character", "SharedKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.EventQueue), global::Tbportal.EventQueue.Parser, new[]{ "Type", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameSessionRequest), global::Tbportal.GameSessionRequest.Parser, new[]{ "Spec", "Observer", "AllowReset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameSessionResponse), global::Tbportal.GameSessionResponse.Parser, new[]{ "PublicIp", "PublicPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameSessionReport), global::Tbportal.GameSessionReport.Parser, new[]{ "Uuid", "Resolution", "OpenTime", "CloseTime", "TimeoutSlot", "HandshakeStatus", "PingReport", "MatchReport", "PlayerStat", "DisconnectReason", "DeprecatedOutcomeAgree", "DeprecatedOutcome" }, null, new[]{ typeof(global::Tbportal.GameSessionReport.Types.Resolution), typeof(global::Tbportal.GameSessionReport.Types.HandshakeStatus), typeof(global::Tbportal.GameSessionReport.Types.DisconnectReason) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameSessionReport.Types.PingReport), global::Tbportal.GameSessionReport.Types.PingReport.Parser, new[]{ "MinPingMs", "AvgPingMs", "MaxPingMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameSessionReport.Types.PlayerStat), global::Tbportal.GameSessionReport.Types.PlayerStat.Parser, new[]{ "AvgPingMs", "AvgFps", "LevelLoadTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.PingTestRequest), global::Tbportal.PingTestRequest.Parser, new[]{ "Spec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.PingTestResponse), global::Tbportal.PingTestResponse.Parser, new[]{ "PublicIp", "PublicPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.PingTestReport), global::Tbportal.PingTestReport.Parser, new[]{ "Resolution", "Sent", "Received", "MaxLatencyMs", "AvgLatencyMs" }, null, new[]{ typeof(global::Tbportal.PingTestReport.Types.Resolution) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.GameResetNotification), global::Tbportal.GameResetNotification.Parser, new[]{ "PortalUuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.Request), global::Tbportal.Request.Parser, new[]{ "Type", "CallerId", "ResponseChannel", "Timestamp", "ReportKey", "Game", "PingTest", "GameReset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.Response), global::Tbportal.Response.Parser, new[]{ "Type", "CallerId", "Result", "OpUuid", "Game", "PingTest" }, null, new[]{ typeof(global::Tbportal.Response.Types.Result) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbportal.Report), global::Tbportal.Report.Parser, new[]{ "Type", "CallerId", "OpUuid", "Game", "PingTest" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestType {
    [pbr::OriginalName("REQUEST_TYPE_ZERO")] Zero = 0,
    [pbr::OriginalName("GAME_SESSION")] GameSession = 10,
    [pbr::OriginalName("PING_TEST")] PingTest = 11,
    [pbr::OriginalName("GAME_RESET_NOTIFICATION")] GameResetNotification = 12,
  }

  #endregion

  #region Messages
  public sealed partial class RedisListenConfig : pb::IMessage<RedisListenConfig> {
    private static readonly pb::MessageParser<RedisListenConfig> _parser = new pb::MessageParser<RedisListenConfig>(() => new RedisListenConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedisListenConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisListenConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisListenConfig(RedisListenConfig other) : this() {
      redisHost_ = other.redisHost_;
      redisPort_ = other.redisPort_;
      listenKey_ = other.listenKey_;
      reqExpireSec_ = other.reqExpireSec_;
      respExpireSec_ = other.respExpireSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisListenConfig Clone() {
      return new RedisListenConfig(this);
    }

    /// <summary>Field number for the "redis_host" field.</summary>
    public const int RedisHostFieldNumber = 1;
    private string redisHost_ = "";
    /// <summary>
    /// Address of the Redis server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedisHost {
      get { return redisHost_; }
      set {
        redisHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redis_port" field.</summary>
    public const int RedisPortFieldNumber = 2;
    private int redisPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedisPort {
      get { return redisPort_; }
      set {
        redisPort_ = value;
      }
    }

    /// <summary>Field number for the "listen_key" field.</summary>
    public const int ListenKeyFieldNumber = 3;
    private string listenKey_ = "";
    /// <summary>
    /// Redis key to BLPOP for Request messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListenKey {
      get { return listenKey_; }
      set {
        listenKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "req_expire_sec" field.</summary>
    public const int ReqExpireSecFieldNumber = 10;
    private int reqExpireSec_;
    /// <summary>
    /// Requests older than this many seconds are discarded with no response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqExpireSec {
      get { return reqExpireSec_; }
      set {
        reqExpireSec_ = value;
      }
    }

    /// <summary>Field number for the "resp_expire_sec" field.</summary>
    public const int RespExpireSecFieldNumber = 11;
    private int respExpireSec_;
    /// <summary>
    /// Response keys are set to EXPIRE in Redis after this many seconds.
    /// Set to 0 to disable expiry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RespExpireSec {
      get { return respExpireSec_; }
      set {
        respExpireSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedisListenConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedisListenConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedisHost != other.RedisHost) return false;
      if (RedisPort != other.RedisPort) return false;
      if (ListenKey != other.ListenKey) return false;
      if (ReqExpireSec != other.ReqExpireSec) return false;
      if (RespExpireSec != other.RespExpireSec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedisHost.Length != 0) hash ^= RedisHost.GetHashCode();
      if (RedisPort != 0) hash ^= RedisPort.GetHashCode();
      if (ListenKey.Length != 0) hash ^= ListenKey.GetHashCode();
      if (ReqExpireSec != 0) hash ^= ReqExpireSec.GetHashCode();
      if (RespExpireSec != 0) hash ^= RespExpireSec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedisHost.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RedisHost);
      }
      if (RedisPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RedisPort);
      }
      if (ListenKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ListenKey);
      }
      if (ReqExpireSec != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ReqExpireSec);
      }
      if (RespExpireSec != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RespExpireSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedisHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedisHost);
      }
      if (RedisPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedisPort);
      }
      if (ListenKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListenKey);
      }
      if (ReqExpireSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqExpireSec);
      }
      if (RespExpireSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RespExpireSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedisListenConfig other) {
      if (other == null) {
        return;
      }
      if (other.RedisHost.Length != 0) {
        RedisHost = other.RedisHost;
      }
      if (other.RedisPort != 0) {
        RedisPort = other.RedisPort;
      }
      if (other.ListenKey.Length != 0) {
        ListenKey = other.ListenKey;
      }
      if (other.ReqExpireSec != 0) {
        ReqExpireSec = other.ReqExpireSec;
      }
      if (other.RespExpireSec != 0) {
        RespExpireSec = other.RespExpireSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RedisHost = input.ReadString();
            break;
          }
          case 16: {
            RedisPort = input.ReadInt32();
            break;
          }
          case 26: {
            ListenKey = input.ReadString();
            break;
          }
          case 80: {
            ReqExpireSec = input.ReadInt32();
            break;
          }
          case 88: {
            RespExpireSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetConfig : pb::IMessage<NetConfig> {
    private static readonly pb::MessageParser<NetConfig> _parser = new pb::MessageParser<NetConfig>(() => new NetConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetConfig(NetConfig other) : this() {
      publicIp_ = other.publicIp_;
      portBase_ = other.portBase_;
      portRange_ = other.portRange_;
      instance_ = other.instance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetConfig Clone() {
      return new NetConfig(this);
    }

    /// <summary>Field number for the "public_ip" field.</summary>
    public const int PublicIpFieldNumber = 1;
    private string publicIp_ = "";
    /// <summary>
    /// IP address to return in responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port_base" field.</summary>
    public const int PortBaseFieldNumber = 2;
    private int portBase_;
    /// <summary>
    /// Allocate from port numbers [ port_base, port_base+port_range*instance )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortBase {
      get { return portBase_; }
      set {
        portBase_ = value;
      }
    }

    /// <summary>Field number for the "port_range" field.</summary>
    public const int PortRangeFieldNumber = 3;
    private int portRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortRange {
      get { return portRange_; }
      set {
        portRange_ = value;
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 4;
    private int instance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Instance {
      get { return instance_; }
      set {
        instance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicIp != other.PublicIp) return false;
      if (PortBase != other.PortBase) return false;
      if (PortRange != other.PortRange) return false;
      if (Instance != other.Instance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicIp.Length != 0) hash ^= PublicIp.GetHashCode();
      if (PortBase != 0) hash ^= PortBase.GetHashCode();
      if (PortRange != 0) hash ^= PortRange.GetHashCode();
      if (Instance != 0) hash ^= Instance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicIp);
      }
      if (PortBase != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PortBase);
      }
      if (PortRange != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PortRange);
      }
      if (Instance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Instance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicIp);
      }
      if (PortBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortBase);
      }
      if (PortRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortRange);
      }
      if (Instance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Instance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetConfig other) {
      if (other == null) {
        return;
      }
      if (other.PublicIp.Length != 0) {
        PublicIp = other.PublicIp;
      }
      if (other.PortBase != 0) {
        PortBase = other.PortBase;
      }
      if (other.PortRange != 0) {
        PortRange = other.PortRange;
      }
      if (other.Instance != 0) {
        Instance = other.Instance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicIp = input.ReadString();
            break;
          }
          case 16: {
            PortBase = input.ReadInt32();
            break;
          }
          case 24: {
            PortRange = input.ReadInt32();
            break;
          }
          case 32: {
            Instance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusConfig : pb::IMessage<StatusConfig> {
    private static readonly pb::MessageParser<StatusConfig> _parser = new pb::MessageParser<StatusConfig>(() => new StatusConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusConfig(StatusConfig other) : this() {
      port_ = other.port_;
      uri_ = other.uri_;
      healthUri_ = other.healthUri_;
      allowNet_ = other.allowNet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusConfig Clone() {
      return new StatusConfig(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private int port_;
    /// <summary>
    /// Prometheus status, 0 to disable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    /// <summary>
    /// URI to respond on for metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health_uri" field.</summary>
    public const int HealthUriFieldNumber = 3;
    private string healthUri_ = "";
    /// <summary>
    /// Health check endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HealthUri {
      get { return healthUri_; }
      set {
        healthUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_net" field.</summary>
    public const int AllowNetFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_allowNet_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> allowNet_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of CIDR net ranges to allow.  Empty to allow all.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowNet {
      get { return allowNet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Uri != other.Uri) return false;
      if (HealthUri != other.HealthUri) return false;
      if(!allowNet_.Equals(other.allowNet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (HealthUri.Length != 0) hash ^= HealthUri.GetHashCode();
      hash ^= allowNet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Port);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (HealthUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HealthUri);
      }
      allowNet_.WriteTo(output, _repeated_allowNet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (HealthUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HealthUri);
      }
      size += allowNet_.CalculateSize(_repeated_allowNet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusConfig other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.HealthUri.Length != 0) {
        HealthUri = other.HealthUri;
      }
      allowNet_.Add(other.allowNet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Port = input.ReadInt32();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            HealthUri = input.ReadString();
            break;
          }
          case 34: {
            allowNet_.AddEntriesFrom(input, _repeated_allowNet_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameSessionConfig : pb::IMessage<GameSessionConfig> {
    private static readonly pb::MessageParser<GameSessionConfig> _parser = new pb::MessageParser<GameSessionConfig>(() => new GameSessionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSessionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionConfig(GameSessionConfig other) : this() {
      maxSessions_ = other.maxSessions_;
      maxAuthFail_ = other.maxAuthFail_;
      connectTimeoutMs_ = other.connectTimeoutMs_;
      handshakeReportTimeoutMs_ = other.handshakeReportTimeoutMs_;
      inactiveTimeoutMs_ = other.inactiveTimeoutMs_;
      activeTimeoutMs_ = other.activeTimeoutMs_;
      goodbyeTimeoutMs_ = other.goodbyeTimeoutMs_;
      doubleDisconnectTimeoutMs_ = other.doubleDisconnectTimeoutMs_;
      varChangeTimeoutMs_ = other.varChangeTimeoutMs_;
      inputLingerTimeoutMs_ = other.inputLingerTimeoutMs_;
      maxHandshakeReplies_ = other.maxHandshakeReplies_;
      handshakeReplyIntervalMs_ = other.handshakeReplyIntervalMs_;
      maxVarChangeReplies_ = other.maxVarChangeReplies_;
      varChangeReplyIntervalMs_ = other.varChangeReplyIntervalMs_;
      gamesToWin_ = other.gamesToWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionConfig Clone() {
      return new GameSessionConfig(this);
    }

    /// <summary>Field number for the "max_sessions" field.</summary>
    public const int MaxSessionsFieldNumber = 1;
    private int maxSessions_;
    /// <summary>
    /// Don't consume requests when session count reaches this limit.
    /// Cannot be higher than port_range / 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSessions {
      get { return maxSessions_; }
      set {
        maxSessions_ = value;
      }
    }

    /// <summary>Field number for the "max_auth_fail" field.</summary>
    public const int MaxAuthFailFieldNumber = 30;
    private int maxAuthFail_;
    /// <summary>
    /// Max # of auth failures by either client before closing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAuthFail {
      get { return maxAuthFail_; }
      set {
        maxAuthFail_ = value;
      }
    }

    /// <summary>Field number for the "connect_timeout_ms" field.</summary>
    public const int ConnectTimeoutMsFieldNumber = 31;
    private int connectTimeoutMs_;
    /// <summary>
    /// Close if either client hasn't sent a handshakes after this long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectTimeoutMs {
      get { return connectTimeoutMs_; }
      set {
        connectTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "handshake_report_timeout_ms" field.</summary>
    public const int HandshakeReportTimeoutMsFieldNumber = 37;
    private int handshakeReportTimeoutMs_;
    /// <summary>
    /// Should match UTBNetSession::HandshakeTimeoutSecs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandshakeReportTimeoutMs {
      get { return handshakeReportTimeoutMs_; }
      set {
        handshakeReportTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "inactive_timeout_ms" field.</summary>
    public const int InactiveTimeoutMsFieldNumber = 32;
    private int inactiveTimeoutMs_;
    /// <summary>
    /// Close if one client stops sending for too long.
    /// Must be long enough to cover the window between handshake and sync start.
    /// Must be longer than goodbye_timeout_ms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InactiveTimeoutMs {
      get { return inactiveTimeoutMs_; }
      set {
        inactiveTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "active_timeout_ms" field.</summary>
    public const int ActiveTimeoutMsFieldNumber = 33;
    private int activeTimeoutMs_;
    /// <summary>
    /// Close after this long, no matter what.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveTimeoutMs {
      get { return activeTimeoutMs_; }
      set {
        activeTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "goodbye_timeout_ms" field.</summary>
    public const int GoodbyeTimeoutMsFieldNumber = 34;
    private int goodbyeTimeoutMs_;
    /// <summary>
    /// Time between first and second client goodbye, after which
    /// the session is marked as disconnect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodbyeTimeoutMs {
      get { return goodbyeTimeoutMs_; }
      set {
        goodbyeTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "double_disconnect_timeout_ms" field.</summary>
    public const int DoubleDisconnectTimeoutMsFieldNumber = 35;
    private int doubleDisconnectTimeoutMs_;
    /// <summary>
    /// If other player disconnects within this time, call it double-disconnect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DoubleDisconnectTimeoutMs {
      get { return doubleDisconnectTimeoutMs_; }
      set {
        doubleDisconnectTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "var_change_timeout_ms" field.</summary>
    public const int VarChangeTimeoutMsFieldNumber = 36;
    private int varChangeTimeoutMs_;
    /// <summary>
    /// Time allowed to select new variants
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarChangeTimeoutMs {
      get { return varChangeTimeoutMs_; }
      set {
        varChangeTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "input_linger_timeout_ms" field.</summary>
    public const int InputLingerTimeoutMsFieldNumber = 38;
    private int inputLingerTimeoutMs_;
    /// <summary>
    /// Time to allow after final Goodbye for input reporting stream to terminate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputLingerTimeoutMs {
      get { return inputLingerTimeoutMs_; }
      set {
        inputLingerTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "max_handshake_replies" field.</summary>
    public const int MaxHandshakeRepliesFieldNumber = 40;
    private int maxHandshakeReplies_;
    /// <summary>
    /// Max number of handshake reply packets to send.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHandshakeReplies {
      get { return maxHandshakeReplies_; }
      set {
        maxHandshakeReplies_ = value;
      }
    }

    /// <summary>Field number for the "handshake_reply_interval_ms" field.</summary>
    public const int HandshakeReplyIntervalMsFieldNumber = 41;
    private int handshakeReplyIntervalMs_;
    /// <summary>
    /// Milliseconds between handshake replies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandshakeReplyIntervalMs {
      get { return handshakeReplyIntervalMs_; }
      set {
        handshakeReplyIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "max_var_change_replies" field.</summary>
    public const int MaxVarChangeRepliesFieldNumber = 45;
    private int maxVarChangeReplies_;
    /// <summary>
    /// Max number of variant change reply packets to send.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxVarChangeReplies {
      get { return maxVarChangeReplies_; }
      set {
        maxVarChangeReplies_ = value;
      }
    }

    /// <summary>Field number for the "var_change_reply_interval_ms" field.</summary>
    public const int VarChangeReplyIntervalMsFieldNumber = 46;
    private int varChangeReplyIntervalMs_;
    /// <summary>
    /// Milliseconds between variang change replies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarChangeReplyIntervalMs {
      get { return varChangeReplyIntervalMs_; }
      set {
        varChangeReplyIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "games_to_win" field.</summary>
    public const int GamesToWinFieldNumber = 50;
    private int gamesToWin_;
    /// <summary>
    /// Number of games wins to determine the victor of the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamesToWin {
      get { return gamesToWin_; }
      set {
        gamesToWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSessionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSessionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxSessions != other.MaxSessions) return false;
      if (MaxAuthFail != other.MaxAuthFail) return false;
      if (ConnectTimeoutMs != other.ConnectTimeoutMs) return false;
      if (HandshakeReportTimeoutMs != other.HandshakeReportTimeoutMs) return false;
      if (InactiveTimeoutMs != other.InactiveTimeoutMs) return false;
      if (ActiveTimeoutMs != other.ActiveTimeoutMs) return false;
      if (GoodbyeTimeoutMs != other.GoodbyeTimeoutMs) return false;
      if (DoubleDisconnectTimeoutMs != other.DoubleDisconnectTimeoutMs) return false;
      if (VarChangeTimeoutMs != other.VarChangeTimeoutMs) return false;
      if (InputLingerTimeoutMs != other.InputLingerTimeoutMs) return false;
      if (MaxHandshakeReplies != other.MaxHandshakeReplies) return false;
      if (HandshakeReplyIntervalMs != other.HandshakeReplyIntervalMs) return false;
      if (MaxVarChangeReplies != other.MaxVarChangeReplies) return false;
      if (VarChangeReplyIntervalMs != other.VarChangeReplyIntervalMs) return false;
      if (GamesToWin != other.GamesToWin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxSessions != 0) hash ^= MaxSessions.GetHashCode();
      if (MaxAuthFail != 0) hash ^= MaxAuthFail.GetHashCode();
      if (ConnectTimeoutMs != 0) hash ^= ConnectTimeoutMs.GetHashCode();
      if (HandshakeReportTimeoutMs != 0) hash ^= HandshakeReportTimeoutMs.GetHashCode();
      if (InactiveTimeoutMs != 0) hash ^= InactiveTimeoutMs.GetHashCode();
      if (ActiveTimeoutMs != 0) hash ^= ActiveTimeoutMs.GetHashCode();
      if (GoodbyeTimeoutMs != 0) hash ^= GoodbyeTimeoutMs.GetHashCode();
      if (DoubleDisconnectTimeoutMs != 0) hash ^= DoubleDisconnectTimeoutMs.GetHashCode();
      if (VarChangeTimeoutMs != 0) hash ^= VarChangeTimeoutMs.GetHashCode();
      if (InputLingerTimeoutMs != 0) hash ^= InputLingerTimeoutMs.GetHashCode();
      if (MaxHandshakeReplies != 0) hash ^= MaxHandshakeReplies.GetHashCode();
      if (HandshakeReplyIntervalMs != 0) hash ^= HandshakeReplyIntervalMs.GetHashCode();
      if (MaxVarChangeReplies != 0) hash ^= MaxVarChangeReplies.GetHashCode();
      if (VarChangeReplyIntervalMs != 0) hash ^= VarChangeReplyIntervalMs.GetHashCode();
      if (GamesToWin != 0) hash ^= GamesToWin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxSessions != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxSessions);
      }
      if (MaxAuthFail != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(MaxAuthFail);
      }
      if (ConnectTimeoutMs != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ConnectTimeoutMs);
      }
      if (InactiveTimeoutMs != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(InactiveTimeoutMs);
      }
      if (ActiveTimeoutMs != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ActiveTimeoutMs);
      }
      if (GoodbyeTimeoutMs != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(GoodbyeTimeoutMs);
      }
      if (DoubleDisconnectTimeoutMs != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DoubleDisconnectTimeoutMs);
      }
      if (VarChangeTimeoutMs != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(VarChangeTimeoutMs);
      }
      if (HandshakeReportTimeoutMs != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(HandshakeReportTimeoutMs);
      }
      if (InputLingerTimeoutMs != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(InputLingerTimeoutMs);
      }
      if (MaxHandshakeReplies != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(MaxHandshakeReplies);
      }
      if (HandshakeReplyIntervalMs != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(HandshakeReplyIntervalMs);
      }
      if (MaxVarChangeReplies != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(MaxVarChangeReplies);
      }
      if (VarChangeReplyIntervalMs != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(VarChangeReplyIntervalMs);
      }
      if (GamesToWin != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(GamesToWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxSessions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSessions);
      }
      if (MaxAuthFail != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxAuthFail);
      }
      if (ConnectTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ConnectTimeoutMs);
      }
      if (HandshakeReportTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandshakeReportTimeoutMs);
      }
      if (InactiveTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InactiveTimeoutMs);
      }
      if (ActiveTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveTimeoutMs);
      }
      if (GoodbyeTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GoodbyeTimeoutMs);
      }
      if (DoubleDisconnectTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DoubleDisconnectTimeoutMs);
      }
      if (VarChangeTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VarChangeTimeoutMs);
      }
      if (InputLingerTimeoutMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputLingerTimeoutMs);
      }
      if (MaxHandshakeReplies != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxHandshakeReplies);
      }
      if (HandshakeReplyIntervalMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandshakeReplyIntervalMs);
      }
      if (MaxVarChangeReplies != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxVarChangeReplies);
      }
      if (VarChangeReplyIntervalMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VarChangeReplyIntervalMs);
      }
      if (GamesToWin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GamesToWin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSessionConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxSessions != 0) {
        MaxSessions = other.MaxSessions;
      }
      if (other.MaxAuthFail != 0) {
        MaxAuthFail = other.MaxAuthFail;
      }
      if (other.ConnectTimeoutMs != 0) {
        ConnectTimeoutMs = other.ConnectTimeoutMs;
      }
      if (other.HandshakeReportTimeoutMs != 0) {
        HandshakeReportTimeoutMs = other.HandshakeReportTimeoutMs;
      }
      if (other.InactiveTimeoutMs != 0) {
        InactiveTimeoutMs = other.InactiveTimeoutMs;
      }
      if (other.ActiveTimeoutMs != 0) {
        ActiveTimeoutMs = other.ActiveTimeoutMs;
      }
      if (other.GoodbyeTimeoutMs != 0) {
        GoodbyeTimeoutMs = other.GoodbyeTimeoutMs;
      }
      if (other.DoubleDisconnectTimeoutMs != 0) {
        DoubleDisconnectTimeoutMs = other.DoubleDisconnectTimeoutMs;
      }
      if (other.VarChangeTimeoutMs != 0) {
        VarChangeTimeoutMs = other.VarChangeTimeoutMs;
      }
      if (other.InputLingerTimeoutMs != 0) {
        InputLingerTimeoutMs = other.InputLingerTimeoutMs;
      }
      if (other.MaxHandshakeReplies != 0) {
        MaxHandshakeReplies = other.MaxHandshakeReplies;
      }
      if (other.HandshakeReplyIntervalMs != 0) {
        HandshakeReplyIntervalMs = other.HandshakeReplyIntervalMs;
      }
      if (other.MaxVarChangeReplies != 0) {
        MaxVarChangeReplies = other.MaxVarChangeReplies;
      }
      if (other.VarChangeReplyIntervalMs != 0) {
        VarChangeReplyIntervalMs = other.VarChangeReplyIntervalMs;
      }
      if (other.GamesToWin != 0) {
        GamesToWin = other.GamesToWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxSessions = input.ReadInt32();
            break;
          }
          case 240: {
            MaxAuthFail = input.ReadInt32();
            break;
          }
          case 248: {
            ConnectTimeoutMs = input.ReadInt32();
            break;
          }
          case 256: {
            InactiveTimeoutMs = input.ReadInt32();
            break;
          }
          case 264: {
            ActiveTimeoutMs = input.ReadInt32();
            break;
          }
          case 272: {
            GoodbyeTimeoutMs = input.ReadInt32();
            break;
          }
          case 280: {
            DoubleDisconnectTimeoutMs = input.ReadInt32();
            break;
          }
          case 288: {
            VarChangeTimeoutMs = input.ReadInt32();
            break;
          }
          case 296: {
            HandshakeReportTimeoutMs = input.ReadInt32();
            break;
          }
          case 304: {
            InputLingerTimeoutMs = input.ReadInt32();
            break;
          }
          case 320: {
            MaxHandshakeReplies = input.ReadInt32();
            break;
          }
          case 328: {
            HandshakeReplyIntervalMs = input.ReadInt32();
            break;
          }
          case 360: {
            MaxVarChangeReplies = input.ReadInt32();
            break;
          }
          case 368: {
            VarChangeReplyIntervalMs = input.ReadInt32();
            break;
          }
          case 400: {
            GamesToWin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObserverConfig : pb::IMessage<ObserverConfig> {
    private static readonly pb::MessageParser<ObserverConfig> _parser = new pb::MessageParser<ObserverConfig>(() => new ObserverConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObserverConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverConfig(ObserverConfig other) : this() {
      reportSize_ = other.reportSize_;
      bucketSize_ = other.bucketSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverConfig Clone() {
      return new ObserverConfig(this);
    }

    /// <summary>Field number for the "report_size" field.</summary>
    public const int ReportSizeFieldNumber = 1;
    private uint reportSize_;
    /// <summary>
    /// Number of frames of input per client report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReportSize {
      get { return reportSize_; }
      set {
        reportSize_ = value;
      }
    }

    /// <summary>Field number for the "bucket_size" field.</summary>
    public const int BucketSizeFieldNumber = 2;
    private uint bucketSize_;
    /// <summary>
    /// Number of frames of input per outgoing event bucket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BucketSize {
      get { return bucketSize_; }
      set {
        bucketSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObserverConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObserverConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportSize != other.ReportSize) return false;
      if (BucketSize != other.BucketSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportSize != 0) hash ^= ReportSize.GetHashCode();
      if (BucketSize != 0) hash ^= BucketSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReportSize);
      }
      if (BucketSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BucketSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReportSize);
      }
      if (BucketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BucketSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObserverConfig other) {
      if (other == null) {
        return;
      }
      if (other.ReportSize != 0) {
        ReportSize = other.ReportSize;
      }
      if (other.BucketSize != 0) {
        BucketSize = other.BucketSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportSize = input.ReadUInt32();
            break;
          }
          case 16: {
            BucketSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingTestConfig : pb::IMessage<PingTestConfig> {
    private static readonly pb::MessageParser<PingTestConfig> _parser = new pb::MessageParser<PingTestConfig>(() => new PingTestConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingTestConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestConfig(PingTestConfig other) : this() {
      pingCount_ = other.pingCount_;
      waitTimeoutMs_ = other.waitTimeoutMs_;
      nextPingTimeoutMs_ = other.nextPingTimeoutMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestConfig Clone() {
      return new PingTestConfig(this);
    }

    /// <summary>Field number for the "ping_count" field.</summary>
    public const int PingCountFieldNumber = 1;
    private int pingCount_;
    /// <summary>
    /// Number of packets to bounce
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PingCount {
      get { return pingCount_; }
      set {
        pingCount_ = value;
      }
    }

    /// <summary>Field number for the "wait_timeout_ms" field.</summary>
    public const int WaitTimeoutMsFieldNumber = 2;
    private int waitTimeoutMs_;
    /// <summary>
    /// Give waiting up after how many ms?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTimeoutMs {
      get { return waitTimeoutMs_; }
      set {
        waitTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "next_ping_timeout_ms" field.</summary>
    public const int NextPingTimeoutMsFieldNumber = 3;
    private int nextPingTimeoutMs_;
    /// <summary>
    /// Send next packet after no valid response for how many ms?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextPingTimeoutMs {
      get { return nextPingTimeoutMs_; }
      set {
        nextPingTimeoutMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingTestConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingTestConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingCount != other.PingCount) return false;
      if (WaitTimeoutMs != other.WaitTimeoutMs) return false;
      if (NextPingTimeoutMs != other.NextPingTimeoutMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingCount != 0) hash ^= PingCount.GetHashCode();
      if (WaitTimeoutMs != 0) hash ^= WaitTimeoutMs.GetHashCode();
      if (NextPingTimeoutMs != 0) hash ^= NextPingTimeoutMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PingCount);
      }
      if (WaitTimeoutMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitTimeoutMs);
      }
      if (NextPingTimeoutMs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextPingTimeoutMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PingCount);
      }
      if (WaitTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTimeoutMs);
      }
      if (NextPingTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextPingTimeoutMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingTestConfig other) {
      if (other == null) {
        return;
      }
      if (other.PingCount != 0) {
        PingCount = other.PingCount;
      }
      if (other.WaitTimeoutMs != 0) {
        WaitTimeoutMs = other.WaitTimeoutMs;
      }
      if (other.NextPingTimeoutMs != 0) {
        NextPingTimeoutMs = other.NextPingTimeoutMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PingCount = input.ReadInt32();
            break;
          }
          case 16: {
            WaitTimeoutMs = input.ReadInt32();
            break;
          }
          case 24: {
            NextPingTimeoutMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server reads this proto in text format as a configuration file.
  /// </summary>
  public sealed partial class ServerConfig : pb::IMessage<ServerConfig> {
    private static readonly pb::MessageParser<ServerConfig> _parser = new pb::MessageParser<ServerConfig>(() => new ServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig(ServerConfig other) : this() {
      Redis = other.redis_ != null ? other.Redis.Clone() : null;
      Status = other.status_ != null ? other.Status.Clone() : null;
      Net = other.net_ != null ? other.Net.Clone() : null;
      Session = other.session_ != null ? other.Session.Clone() : null;
      PingTest = other.pingTest_ != null ? other.PingTest.Clone() : null;
      Observer = other.observer_ != null ? other.Observer.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig Clone() {
      return new ServerConfig(this);
    }

    /// <summary>Field number for the "redis" field.</summary>
    public const int RedisFieldNumber = 1;
    private global::Tbportal.RedisListenConfig redis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.RedisListenConfig Redis {
      get { return redis_; }
      set {
        redis_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Tbportal.StatusConfig status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.StatusConfig Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "net" field.</summary>
    public const int NetFieldNumber = 3;
    private global::Tbportal.NetConfig net_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.NetConfig Net {
      get { return net_; }
      set {
        net_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 10;
    private global::Tbportal.GameSessionConfig session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionConfig Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "ping_test" field.</summary>
    public const int PingTestFieldNumber = 11;
    private global::Tbportal.PingTestConfig pingTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.PingTestConfig PingTest {
      get { return pingTest_; }
      set {
        pingTest_ = value;
      }
    }

    /// <summary>Field number for the "observer" field.</summary>
    public const int ObserverFieldNumber = 20;
    private global::Tbportal.ObserverConfig observer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.ObserverConfig Observer {
      get { return observer_; }
      set {
        observer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Redis, other.Redis)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Net, other.Net)) return false;
      if (!object.Equals(Session, other.Session)) return false;
      if (!object.Equals(PingTest, other.PingTest)) return false;
      if (!object.Equals(Observer, other.Observer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (redis_ != null) hash ^= Redis.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (net_ != null) hash ^= Net.GetHashCode();
      if (session_ != null) hash ^= Session.GetHashCode();
      if (pingTest_ != null) hash ^= PingTest.GetHashCode();
      if (observer_ != null) hash ^= Observer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (redis_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Redis);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (net_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Net);
      }
      if (session_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Session);
      }
      if (pingTest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PingTest);
      }
      if (observer_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Observer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (redis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Redis);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (net_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Net);
      }
      if (session_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
      }
      if (pingTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingTest);
      }
      if (observer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Observer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.redis_ != null) {
        if (redis_ == null) {
          redis_ = new global::Tbportal.RedisListenConfig();
        }
        Redis.MergeFrom(other.Redis);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Tbportal.StatusConfig();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.net_ != null) {
        if (net_ == null) {
          net_ = new global::Tbportal.NetConfig();
        }
        Net.MergeFrom(other.Net);
      }
      if (other.session_ != null) {
        if (session_ == null) {
          session_ = new global::Tbportal.GameSessionConfig();
        }
        Session.MergeFrom(other.Session);
      }
      if (other.pingTest_ != null) {
        if (pingTest_ == null) {
          pingTest_ = new global::Tbportal.PingTestConfig();
        }
        PingTest.MergeFrom(other.PingTest);
      }
      if (other.observer_ != null) {
        if (observer_ == null) {
          observer_ = new global::Tbportal.ObserverConfig();
        }
        Observer.MergeFrom(other.Observer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (redis_ == null) {
              redis_ = new global::Tbportal.RedisListenConfig();
            }
            input.ReadMessage(redis_);
            break;
          }
          case 18: {
            if (status_ == null) {
              status_ = new global::Tbportal.StatusConfig();
            }
            input.ReadMessage(status_);
            break;
          }
          case 26: {
            if (net_ == null) {
              net_ = new global::Tbportal.NetConfig();
            }
            input.ReadMessage(net_);
            break;
          }
          case 82: {
            if (session_ == null) {
              session_ = new global::Tbportal.GameSessionConfig();
            }
            input.ReadMessage(session_);
            break;
          }
          case 90: {
            if (pingTest_ == null) {
              pingTest_ = new global::Tbportal.PingTestConfig();
            }
            input.ReadMessage(pingTest_);
            break;
          }
          case 162: {
            if (observer_ == null) {
              observer_ = new global::Tbportal.ObserverConfig();
            }
            input.ReadMessage(observer_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientSpec : pb::IMessage<ClientSpec> {
    private static readonly pb::MessageParser<ClientSpec> _parser = new pb::MessageParser<ClientSpec>(() => new ClientSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSpec(ClientSpec other) : this() {
      secret_ = other.secret_;
      clientIp_ = other.clientIp_;
      Character = other.character_ != null ? other.Character.Clone() : null;
      sharedKey_ = other.sharedKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSpec Clone() {
      return new ClientSpec(this);
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 1;
    private ulong secret_;
    /// <summary>
    /// Secret keys for authorize client packets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Secret {
      get { return secret_; }
      set {
        secret_ = value;
      }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 2;
    private int clientIp_;
    /// <summary>
    /// Client IP address.  Host byte order.
    /// XXX: Not actually used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 3;
    private global::Tbmatch.CharacterSpec character_;
    /// <summary>
    /// The initial character spec for the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.CharacterSpec Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "shared_key" field.</summary>
    public const int SharedKeyFieldNumber = 4;
    private pb::ByteString sharedKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The 128-bit shared key used to hash client packets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedKey {
      get { return sharedKey_; }
      set {
        sharedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Secret != other.Secret) return false;
      if (ClientIp != other.ClientIp) return false;
      if (!object.Equals(Character, other.Character)) return false;
      if (SharedKey != other.SharedKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Secret != 0UL) hash ^= Secret.GetHashCode();
      if (ClientIp != 0) hash ^= ClientIp.GetHashCode();
      if (character_ != null) hash ^= Character.GetHashCode();
      if (SharedKey.Length != 0) hash ^= SharedKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Secret != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Secret);
      }
      if (ClientIp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ClientIp);
      }
      if (character_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Character);
      }
      if (SharedKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(SharedKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Secret != 0UL) {
        size += 1 + 8;
      }
      if (ClientIp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientIp);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (SharedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSpec other) {
      if (other == null) {
        return;
      }
      if (other.Secret != 0UL) {
        Secret = other.Secret;
      }
      if (other.ClientIp != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.character_ != null) {
        if (character_ == null) {
          character_ = new global::Tbmatch.CharacterSpec();
        }
        Character.MergeFrom(other.Character);
      }
      if (other.SharedKey.Length != 0) {
        SharedKey = other.SharedKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Secret = input.ReadFixed64();
            break;
          }
          case 16: {
            ClientIp = input.ReadInt32();
            break;
          }
          case 26: {
            if (character_ == null) {
              character_ = new global::Tbmatch.CharacterSpec();
            }
            input.ReadMessage(character_);
            break;
          }
          case 34: {
            SharedKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventQueue : pb::IMessage<EventQueue> {
    private static readonly pb::MessageParser<EventQueue> _parser = new pb::MessageParser<EventQueue>(() => new EventQueue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventQueue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQueue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQueue(EventQueue other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQueue Clone() {
      return new EventQueue(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventQueue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventQueue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventQueue other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request a new game session.
  /// </summary>
  public sealed partial class GameSessionRequest : pb::IMessage<GameSessionRequest> {
    private static readonly pb::MessageParser<GameSessionRequest> _parser = new pb::MessageParser<GameSessionRequest>(() => new GameSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionRequest(GameSessionRequest other) : this() {
      spec_ = other.spec_.Clone();
      Observer = other.observer_ != null ? other.Observer.Clone() : null;
      allowReset_ = other.allowReset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionRequest Clone() {
      return new GameSessionRequest(this);
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbportal.ClientSpec> _repeated_spec_codec
        = pb::FieldCodec.ForMessage(10, global::Tbportal.ClientSpec.Parser);
    private readonly pbc::RepeatedField<global::Tbportal.ClientSpec> spec_ = new pbc::RepeatedField<global::Tbportal.ClientSpec>();
    /// <summary>
    /// Clients of the portal, should be exactly 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbportal.ClientSpec> Spec {
      get { return spec_; }
    }

    /// <summary>Field number for the "observer" field.</summary>
    public const int ObserverFieldNumber = 2;
    private global::Tbportal.EventQueue observer_;
    /// <summary>
    /// Queue to publish input events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.EventQueue Observer {
      get { return observer_; }
      set {
        observer_ = value;
      }
    }

    /// <summary>Field number for the "allow_reset" field.</summary>
    public const int AllowResetFieldNumber = 3;
    private bool allowReset_;
    /// <summary>
    /// Allow GameResetRequest to reset options for next game?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowReset {
      get { return allowReset_; }
      set {
        allowReset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spec_.Equals(other.spec_)) return false;
      if (!object.Equals(Observer, other.Observer)) return false;
      if (AllowReset != other.AllowReset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spec_.GetHashCode();
      if (observer_ != null) hash ^= Observer.GetHashCode();
      if (AllowReset != false) hash ^= AllowReset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spec_.WriteTo(output, _repeated_spec_codec);
      if (observer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Observer);
      }
      if (AllowReset != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowReset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spec_.CalculateSize(_repeated_spec_codec);
      if (observer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observer);
      }
      if (AllowReset != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSessionRequest other) {
      if (other == null) {
        return;
      }
      spec_.Add(other.spec_);
      if (other.observer_ != null) {
        if (observer_ == null) {
          observer_ = new global::Tbportal.EventQueue();
        }
        Observer.MergeFrom(other.Observer);
      }
      if (other.AllowReset != false) {
        AllowReset = other.AllowReset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spec_.AddEntriesFrom(input, _repeated_spec_codec);
            break;
          }
          case 18: {
            if (observer_ == null) {
              observer_ = new global::Tbportal.EventQueue();
            }
            input.ReadMessage(observer_);
            break;
          }
          case 24: {
            AllowReset = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Enqueued by portal in response to handling an GameSessionResponse.
  /// </summary>
  public sealed partial class GameSessionResponse : pb::IMessage<GameSessionResponse> {
    private static readonly pb::MessageParser<GameSessionResponse> _parser = new pb::MessageParser<GameSessionResponse>(() => new GameSessionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionResponse(GameSessionResponse other) : this() {
      publicIp_ = other.publicIp_;
      publicPort_ = other.publicPort_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionResponse Clone() {
      return new GameSessionResponse(this);
    }

    /// <summary>Field number for the "public_ip" field.</summary>
    public const int PublicIpFieldNumber = 2;
    private int publicIp_;
    /// <summary>
    /// Public IP address of the portal server.  Host byte order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = value;
      }
    }

    /// <summary>Field number for the "public_port" field.</summary>
    public const int PublicPortFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_publicPort_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> publicPort_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Listening ports for each client of the portal, in the same
    /// order as client_ip in the request.  (e.g. client_ip[0]
    /// should connect to public_ip:public_port[0]).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PublicPort {
      get { return publicPort_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicIp != other.PublicIp) return false;
      if(!publicPort_.Equals(other.publicPort_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicIp != 0) hash ^= PublicIp.GetHashCode();
      hash ^= publicPort_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicIp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PublicIp);
      }
      publicPort_.WriteTo(output, _repeated_publicPort_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicIp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicIp);
      }
      size += publicPort_.CalculateSize(_repeated_publicPort_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSessionResponse other) {
      if (other == null) {
        return;
      }
      if (other.PublicIp != 0) {
        PublicIp = other.PublicIp;
      }
      publicPort_.Add(other.publicPort_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            PublicIp = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            publicPort_.AddEntriesFrom(input, _repeated_publicPort_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Pushed to a Redis list when a game session is over.
  /// </summary>
  public sealed partial class GameSessionReport : pb::IMessage<GameSessionReport> {
    private static readonly pb::MessageParser<GameSessionReport> _parser = new pb::MessageParser<GameSessionReport>(() => new GameSessionReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSessionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionReport(GameSessionReport other) : this() {
      uuid_ = other.uuid_;
      resolution_ = other.resolution_;
      openTime_ = other.openTime_;
      closeTime_ = other.closeTime_;
      timeoutSlot_ = other.timeoutSlot_.Clone();
      handshakeStatus_ = other.handshakeStatus_;
      PingReport = other.pingReport_ != null ? other.PingReport.Clone() : null;
      MatchReport = other.matchReport_ != null ? other.MatchReport.Clone() : null;
      playerStat_ = other.playerStat_.Clone();
      disconnectReason_ = other.disconnectReason_;
      DeprecatedOutcomeAgree_ = other.DeprecatedOutcomeAgree_;
      DeprecatedOutcome_ = other.DeprecatedOutcome_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionReport Clone() {
      return new GameSessionReport(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private pb::ByteString uuid_ = pb::ByteString.Empty;
    /// <summary>
    /// 128-bit UUID of the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 3;
    private global::Tbportal.GameSessionReport.Types.Resolution resolution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionReport.Types.Resolution Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 4;
    private long openTime_;
    /// <summary>
    /// Unix timestamp when session was opened.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "close_time" field.</summary>
    public const int CloseTimeFieldNumber = 5;
    private long closeTime_;
    /// <summary>
    /// Unix timestamp when session closed, gracefully or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    /// <summary>Field number for the "timeout_slot" field.</summary>
    public const int TimeoutSlotFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_timeoutSlot_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> timeoutSlot_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// If HANDSHAKE_TIMEOUT or DISCONNECT, the list of player slots (0, 1)
    /// who failed to handshake or failed to Goodbye within the time window of the opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TimeoutSlot {
      get { return timeoutSlot_; }
    }

    /// <summary>Field number for the "handshake_status" field.</summary>
    public const int HandshakeStatusFieldNumber = 10;
    private global::Tbportal.GameSessionReport.Types.HandshakeStatus handshakeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionReport.Types.HandshakeStatus HandshakeStatus {
      get { return handshakeStatus_; }
      set {
        handshakeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ping_report" field.</summary>
    public const int PingReportFieldNumber = 13;
    private global::Tbportal.GameSessionReport.Types.PingReport pingReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionReport.Types.PingReport PingReport {
      get { return pingReport_; }
      set {
        pingReport_ = value;
      }
    }

    /// <summary>Field number for the "match_report" field.</summary>
    public const int MatchReportFieldNumber = 9;
    private global::Tbmatch.MatchReport matchReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchReport MatchReport {
      get { return matchReport_; }
      set {
        matchReport_ = value;
      }
    }

    /// <summary>Field number for the "player_stat" field.</summary>
    public const int PlayerStatFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Tbportal.GameSessionReport.Types.PlayerStat> _repeated_playerStat_codec
        = pb::FieldCodec.ForMessage(90, global::Tbportal.GameSessionReport.Types.PlayerStat.Parser);
    private readonly pbc::RepeatedField<global::Tbportal.GameSessionReport.Types.PlayerStat> playerStat_ = new pbc::RepeatedField<global::Tbportal.GameSessionReport.Types.PlayerStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbportal.GameSessionReport.Types.PlayerStat> PlayerStat {
      get { return playerStat_; }
    }

    /// <summary>Field number for the "disconnect_reason" field.</summary>
    public const int DisconnectReasonFieldNumber = 12;
    private global::Tbportal.GameSessionReport.Types.DisconnectReason disconnectReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionReport.Types.DisconnectReason DisconnectReason {
      get { return disconnectReason_; }
      set {
        disconnectReason_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_outcome_agree" field.</summary>
    public const int DeprecatedOutcomeAgreeFieldNumber = 7;
    private bool DeprecatedOutcomeAgree_;
    /// <summary>
    /// Deprecated fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeprecatedOutcomeAgree {
      get { return DeprecatedOutcomeAgree_; }
      set {
        DeprecatedOutcomeAgree_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_outcome" field.</summary>
    public const int DeprecatedOutcomeFieldNumber = 8;
    private pb::ByteString DeprecatedOutcome_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedOutcome {
      get { return DeprecatedOutcome_; }
      set {
        DeprecatedOutcome_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSessionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSessionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Resolution != other.Resolution) return false;
      if (OpenTime != other.OpenTime) return false;
      if (CloseTime != other.CloseTime) return false;
      if(!timeoutSlot_.Equals(other.timeoutSlot_)) return false;
      if (HandshakeStatus != other.HandshakeStatus) return false;
      if (!object.Equals(PingReport, other.PingReport)) return false;
      if (!object.Equals(MatchReport, other.MatchReport)) return false;
      if(!playerStat_.Equals(other.playerStat_)) return false;
      if (DisconnectReason != other.DisconnectReason) return false;
      if (DeprecatedOutcomeAgree != other.DeprecatedOutcomeAgree) return false;
      if (DeprecatedOutcome != other.DeprecatedOutcome) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (CloseTime != 0L) hash ^= CloseTime.GetHashCode();
      hash ^= timeoutSlot_.GetHashCode();
      if (HandshakeStatus != 0) hash ^= HandshakeStatus.GetHashCode();
      if (pingReport_ != null) hash ^= PingReport.GetHashCode();
      if (matchReport_ != null) hash ^= MatchReport.GetHashCode();
      hash ^= playerStat_.GetHashCode();
      if (DisconnectReason != 0) hash ^= DisconnectReason.GetHashCode();
      if (DeprecatedOutcomeAgree != false) hash ^= DeprecatedOutcomeAgree.GetHashCode();
      if (DeprecatedOutcome.Length != 0) hash ^= DeprecatedOutcome.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Uuid);
      }
      if (Resolution != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Resolution);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OpenTime);
      }
      if (CloseTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CloseTime);
      }
      timeoutSlot_.WriteTo(output, _repeated_timeoutSlot_codec);
      if (DeprecatedOutcomeAgree != false) {
        output.WriteRawTag(56);
        output.WriteBool(DeprecatedOutcomeAgree);
      }
      if (DeprecatedOutcome.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(DeprecatedOutcome);
      }
      if (matchReport_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MatchReport);
      }
      if (HandshakeStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) HandshakeStatus);
      }
      playerStat_.WriteTo(output, _repeated_playerStat_codec);
      if (DisconnectReason != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) DisconnectReason);
      }
      if (pingReport_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PingReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uuid);
      }
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Resolution);
      }
      if (OpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (CloseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTime);
      }
      size += timeoutSlot_.CalculateSize(_repeated_timeoutSlot_codec);
      if (HandshakeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandshakeStatus);
      }
      if (pingReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingReport);
      }
      if (matchReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchReport);
      }
      size += playerStat_.CalculateSize(_repeated_playerStat_codec);
      if (DisconnectReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisconnectReason);
      }
      if (DeprecatedOutcomeAgree != false) {
        size += 1 + 1;
      }
      if (DeprecatedOutcome.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedOutcome);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSessionReport other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.CloseTime != 0L) {
        CloseTime = other.CloseTime;
      }
      timeoutSlot_.Add(other.timeoutSlot_);
      if (other.HandshakeStatus != 0) {
        HandshakeStatus = other.HandshakeStatus;
      }
      if (other.pingReport_ != null) {
        if (pingReport_ == null) {
          pingReport_ = new global::Tbportal.GameSessionReport.Types.PingReport();
        }
        PingReport.MergeFrom(other.PingReport);
      }
      if (other.matchReport_ != null) {
        if (matchReport_ == null) {
          matchReport_ = new global::Tbmatch.MatchReport();
        }
        MatchReport.MergeFrom(other.MatchReport);
      }
      playerStat_.Add(other.playerStat_);
      if (other.DisconnectReason != 0) {
        DisconnectReason = other.DisconnectReason;
      }
      if (other.DeprecatedOutcomeAgree != false) {
        DeprecatedOutcomeAgree = other.DeprecatedOutcomeAgree;
      }
      if (other.DeprecatedOutcome.Length != 0) {
        DeprecatedOutcome = other.DeprecatedOutcome;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadBytes();
            break;
          }
          case 24: {
            resolution_ = (global::Tbportal.GameSessionReport.Types.Resolution) input.ReadEnum();
            break;
          }
          case 32: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 40: {
            CloseTime = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            timeoutSlot_.AddEntriesFrom(input, _repeated_timeoutSlot_codec);
            break;
          }
          case 56: {
            DeprecatedOutcomeAgree = input.ReadBool();
            break;
          }
          case 66: {
            DeprecatedOutcome = input.ReadBytes();
            break;
          }
          case 74: {
            if (matchReport_ == null) {
              matchReport_ = new global::Tbmatch.MatchReport();
            }
            input.ReadMessage(matchReport_);
            break;
          }
          case 80: {
            handshakeStatus_ = (global::Tbportal.GameSessionReport.Types.HandshakeStatus) input.ReadEnum();
            break;
          }
          case 90: {
            playerStat_.AddEntriesFrom(input, _repeated_playerStat_codec);
            break;
          }
          case 96: {
            disconnectReason_ = (global::Tbportal.GameSessionReport.Types.DisconnectReason) input.ReadEnum();
            break;
          }
          case 106: {
            if (pingReport_ == null) {
              pingReport_ = new global::Tbportal.GameSessionReport.Types.PingReport();
            }
            input.ReadMessage(pingReport_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameSessionReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Resolution {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// All clients closed gracefully.
        /// </summary>
        [pbr::OriginalName("GOODBYE")] Goodbye = 1,
        /// <summary>
        /// One or more clients failed to contact the server, or report peer-to-peer status.
        /// </summary>
        [pbr::OriginalName("HANDSHAKE_TIMEOUT")] HandshakeTimeout = 2,
        /// <summary>
        /// Handshake succeeded, but one or both clients stopped sending packets
        /// </summary>
        [pbr::OriginalName("DISCONNECT")] Disconnect = 3,
        /// <summary>
        /// without saying goodbye.
        /// </summary>
        [pbr::OriginalName("MAX_LIFETIME")] MaxLifetime = 4,
        /// <summary>
        /// Clients reached the server but not each other.
        /// </summary>
        [pbr::OriginalName("HANDSHAKE_FAIL")] HandshakeFail = 5,
      }

      /// <summary>
      /// If HANDSHAKE_FAIL, the reason given by clients.
      /// </summary>
      public enum HandshakeStatus {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("UNREACHABLE")] Unreachable = 1,
        [pbr::OriginalName("HIGH_PING")] HighPing = 2,
      }

      /// <summary>
      /// If Resolution == DISCONNECT, the reason for the disconnect.
      /// </summary>
      public enum DisconnectReason {
        /// <summary>
        /// No disconnect (default value)
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        /// One or both clients stopped sending packets
        /// </summary>
        [pbr::OriginalName("INACTIVITY")] Inactivity = 1,
        /// <summary>
        /// One client sent a goodbye and the other client didn't
        /// </summary>
        [pbr::OriginalName("GOODBYE_TIMEOUT")] GoodbyeTimeout = 2,
      }

      /// <summary>
      /// The ping report (averaged between the two clients).
      /// Present if HANDSHAKE_FAIL &amp;&amp; HIGH_PING, GOODBYE, or DISCONNECT
      /// </summary>
      public sealed partial class PingReport : pb::IMessage<PingReport> {
        private static readonly pb::MessageParser<PingReport> _parser = new pb::MessageParser<PingReport>(() => new PingReport());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PingReport> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tbportal.GameSessionReport.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingReport() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingReport(PingReport other) : this() {
          minPingMs_ = other.minPingMs_;
          avgPingMs_ = other.avgPingMs_;
          maxPingMs_ = other.maxPingMs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingReport Clone() {
          return new PingReport(this);
        }

        /// <summary>Field number for the "min_ping_ms" field.</summary>
        public const int MinPingMsFieldNumber = 1;
        private int minPingMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinPingMs {
          get { return minPingMs_; }
          set {
            minPingMs_ = value;
          }
        }

        /// <summary>Field number for the "avg_ping_ms" field.</summary>
        public const int AvgPingMsFieldNumber = 2;
        private int avgPingMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AvgPingMs {
          get { return avgPingMs_; }
          set {
            avgPingMs_ = value;
          }
        }

        /// <summary>Field number for the "max_ping_ms" field.</summary>
        public const int MaxPingMsFieldNumber = 3;
        private int maxPingMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxPingMs {
          get { return maxPingMs_; }
          set {
            maxPingMs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PingReport);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PingReport other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MinPingMs != other.MinPingMs) return false;
          if (AvgPingMs != other.AvgPingMs) return false;
          if (MaxPingMs != other.MaxPingMs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MinPingMs != 0) hash ^= MinPingMs.GetHashCode();
          if (AvgPingMs != 0) hash ^= AvgPingMs.GetHashCode();
          if (MaxPingMs != 0) hash ^= MaxPingMs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MinPingMs != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MinPingMs);
          }
          if (AvgPingMs != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AvgPingMs);
          }
          if (MaxPingMs != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(MaxPingMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MinPingMs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinPingMs);
          }
          if (AvgPingMs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgPingMs);
          }
          if (MaxPingMs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPingMs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PingReport other) {
          if (other == null) {
            return;
          }
          if (other.MinPingMs != 0) {
            MinPingMs = other.MinPingMs;
          }
          if (other.AvgPingMs != 0) {
            AvgPingMs = other.AvgPingMs;
          }
          if (other.MaxPingMs != 0) {
            MaxPingMs = other.MaxPingMs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MinPingMs = input.ReadInt32();
                break;
              }
              case 16: {
                AvgPingMs = input.ReadInt32();
                break;
              }
              case 24: {
                MaxPingMs = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Stats collected from individual players.
      /// </summary>
      public sealed partial class PlayerStat : pb::IMessage<PlayerStat> {
        private static readonly pb::MessageParser<PlayerStat> _parser = new pb::MessageParser<PlayerStat>(() => new PlayerStat());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerStat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tbportal.GameSessionReport.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerStat() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerStat(PlayerStat other) : this() {
          avgPingMs_ = other.avgPingMs_;
          avgFps_ = other.avgFps_;
          levelLoadTime_ = other.levelLoadTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerStat Clone() {
          return new PlayerStat(this);
        }

        /// <summary>Field number for the "avg_ping_ms" field.</summary>
        public const int AvgPingMsFieldNumber = 1;
        private int avgPingMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AvgPingMs {
          get { return avgPingMs_; }
          set {
            avgPingMs_ = value;
          }
        }

        /// <summary>Field number for the "avg_fps" field.</summary>
        public const int AvgFpsFieldNumber = 2;
        private int avgFps_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AvgFps {
          get { return avgFps_; }
          set {
            avgFps_ = value;
          }
        }

        /// <summary>Field number for the "level_load_time" field.</summary>
        public const int LevelLoadTimeFieldNumber = 3;
        private int levelLoadTime_;
        /// <summary>
        /// Seconds between handshake report and first game report with frame_count > 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LevelLoadTime {
          get { return levelLoadTime_; }
          set {
            levelLoadTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerStat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerStat other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AvgPingMs != other.AvgPingMs) return false;
          if (AvgFps != other.AvgFps) return false;
          if (LevelLoadTime != other.LevelLoadTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AvgPingMs != 0) hash ^= AvgPingMs.GetHashCode();
          if (AvgFps != 0) hash ^= AvgFps.GetHashCode();
          if (LevelLoadTime != 0) hash ^= LevelLoadTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AvgPingMs != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(AvgPingMs);
          }
          if (AvgFps != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AvgFps);
          }
          if (LevelLoadTime != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(LevelLoadTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AvgPingMs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgPingMs);
          }
          if (AvgFps != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgFps);
          }
          if (LevelLoadTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelLoadTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerStat other) {
          if (other == null) {
            return;
          }
          if (other.AvgPingMs != 0) {
            AvgPingMs = other.AvgPingMs;
          }
          if (other.AvgFps != 0) {
            AvgFps = other.AvgFps;
          }
          if (other.LevelLoadTime != 0) {
            LevelLoadTime = other.LevelLoadTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AvgPingMs = input.ReadInt32();
                break;
              }
              case 16: {
                AvgFps = input.ReadInt32();
                break;
              }
              case 24: {
                LevelLoadTime = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PingTestRequest : pb::IMessage<PingTestRequest> {
    private static readonly pb::MessageParser<PingTestRequest> _parser = new pb::MessageParser<PingTestRequest>(() => new PingTestRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingTestRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestRequest(PingTestRequest other) : this() {
      Spec = other.spec_ != null ? other.Spec.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestRequest Clone() {
      return new PingTestRequest(this);
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 1;
    private global::Tbportal.ClientSpec spec_;
    /// <summary>
    /// Client that will be performing the ping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.ClientSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingTestRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingTestRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spec, other.Spec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spec_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingTestRequest other) {
      if (other == null) {
        return;
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          spec_ = new global::Tbportal.ClientSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spec_ == null) {
              spec_ = new global::Tbportal.ClientSpec();
            }
            input.ReadMessage(spec_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingTestResponse : pb::IMessage<PingTestResponse> {
    private static readonly pb::MessageParser<PingTestResponse> _parser = new pb::MessageParser<PingTestResponse>(() => new PingTestResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingTestResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestResponse(PingTestResponse other) : this() {
      publicIp_ = other.publicIp_;
      publicPort_ = other.publicPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestResponse Clone() {
      return new PingTestResponse(this);
    }

    /// <summary>Field number for the "public_ip" field.</summary>
    public const int PublicIpFieldNumber = 2;
    private int publicIp_;
    /// <summary>
    /// Public IP address of the portal server running the ping test.  Host byte order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = value;
      }
    }

    /// <summary>Field number for the "public_port" field.</summary>
    public const int PublicPortFieldNumber = 6;
    private int publicPort_;
    /// <summary>
    /// Listening port of the ping test.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicPort {
      get { return publicPort_; }
      set {
        publicPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingTestResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingTestResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicIp != other.PublicIp) return false;
      if (PublicPort != other.PublicPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicIp != 0) hash ^= PublicIp.GetHashCode();
      if (PublicPort != 0) hash ^= PublicPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicIp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PublicIp);
      }
      if (PublicPort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PublicPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicIp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicIp);
      }
      if (PublicPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingTestResponse other) {
      if (other == null) {
        return;
      }
      if (other.PublicIp != 0) {
        PublicIp = other.PublicIp;
      }
      if (other.PublicPort != 0) {
        PublicPort = other.PublicPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            PublicIp = input.ReadInt32();
            break;
          }
          case 48: {
            PublicPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingTestReport : pb::IMessage<PingTestReport> {
    private static readonly pb::MessageParser<PingTestReport> _parser = new pb::MessageParser<PingTestReport>(() => new PingTestReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingTestReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestReport(PingTestReport other) : this() {
      resolution_ = other.resolution_;
      sent_ = other.sent_;
      received_ = other.received_;
      maxLatencyMs_ = other.maxLatencyMs_;
      avgLatencyMs_ = other.avgLatencyMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingTestReport Clone() {
      return new PingTestReport(this);
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 2;
    private global::Tbportal.PingTestReport.Types.Resolution resolution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.PingTestReport.Types.Resolution Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "sent" field.</summary>
    public const int SentFieldNumber = 10;
    private int sent_;
    /// <summary>
    /// Number of pings sent and responses received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sent {
      get { return sent_; }
      set {
        sent_ = value;
      }
    }

    /// <summary>Field number for the "received" field.</summary>
    public const int ReceivedFieldNumber = 11;
    private int received_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Received {
      get { return received_; }
      set {
        received_ = value;
      }
    }

    /// <summary>Field number for the "max_latency_ms" field.</summary>
    public const int MaxLatencyMsFieldNumber = 12;
    private int maxLatencyMs_;
    /// <summary>
    /// Max latency observed in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLatencyMs {
      get { return maxLatencyMs_; }
      set {
        maxLatencyMs_ = value;
      }
    }

    /// <summary>Field number for the "avg_latency_ms" field.</summary>
    public const int AvgLatencyMsFieldNumber = 13;
    private int avgLatencyMs_;
    /// <summary>
    /// Average latency observed in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgLatencyMs {
      get { return avgLatencyMs_; }
      set {
        avgLatencyMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingTestReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingTestReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (Sent != other.Sent) return false;
      if (Received != other.Received) return false;
      if (MaxLatencyMs != other.MaxLatencyMs) return false;
      if (AvgLatencyMs != other.AvgLatencyMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (Sent != 0) hash ^= Sent.GetHashCode();
      if (Received != 0) hash ^= Received.GetHashCode();
      if (MaxLatencyMs != 0) hash ^= MaxLatencyMs.GetHashCode();
      if (AvgLatencyMs != 0) hash ^= AvgLatencyMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Resolution);
      }
      if (Sent != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Sent);
      }
      if (Received != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Received);
      }
      if (MaxLatencyMs != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxLatencyMs);
      }
      if (AvgLatencyMs != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AvgLatencyMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Resolution);
      }
      if (Sent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sent);
      }
      if (Received != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Received);
      }
      if (MaxLatencyMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLatencyMs);
      }
      if (AvgLatencyMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgLatencyMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingTestReport other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.Sent != 0) {
        Sent = other.Sent;
      }
      if (other.Received != 0) {
        Received = other.Received;
      }
      if (other.MaxLatencyMs != 0) {
        MaxLatencyMs = other.MaxLatencyMs;
      }
      if (other.AvgLatencyMs != 0) {
        AvgLatencyMs = other.AvgLatencyMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            resolution_ = (global::Tbportal.PingTestReport.Types.Resolution) input.ReadEnum();
            break;
          }
          case 80: {
            Sent = input.ReadInt32();
            break;
          }
          case 88: {
            Received = input.ReadInt32();
            break;
          }
          case 96: {
            MaxLatencyMs = input.ReadInt32();
            break;
          }
          case 104: {
            AvgLatencyMs = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PingTestReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Resolution {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Ping test completed successfully.
        /// </summary>
        [pbr::OriginalName("SUCCESS")] Success = 1,
        /// <summary>
        /// No responses from client.
        /// </summary>
        [pbr::OriginalName("TIMEOUT")] Timeout = 2,
      }

    }
    #endregion

  }

  public sealed partial class GameResetNotification : pb::IMessage<GameResetNotification> {
    private static readonly pb::MessageParser<GameResetNotification> _parser = new pb::MessageParser<GameResetNotification>(() => new GameResetNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResetNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResetNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResetNotification(GameResetNotification other) : this() {
      portalUuid_ = other.portalUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResetNotification Clone() {
      return new GameResetNotification(this);
    }

    /// <summary>Field number for the "portal_uuid" field.</summary>
    public const int PortalUuidFieldNumber = 1;
    private pb::ByteString portalUuid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PortalUuid {
      get { return portalUuid_; }
      set {
        portalUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResetNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResetNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortalUuid != other.PortalUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortalUuid.Length != 0) hash ^= PortalUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortalUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PortalUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortalUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PortalUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResetNotification other) {
      if (other == null) {
        return;
      }
      if (other.PortalUuid.Length != 0) {
        PortalUuid = other.PortalUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PortalUuid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Incoming request; may be either for a session or ping test.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      type_ = other.type_;
      callerId_ = other.callerId_;
      responseChannel_ = other.responseChannel_;
      timestamp_ = other.timestamp_;
      reportKey_ = other.reportKey_;
      Game = other.game_ != null ? other.Game.Clone() : null;
      PingTest = other.pingTest_ != null ? other.PingTest.Clone() : null;
      GameReset = other.gameReset_ != null ? other.GameReset.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tbportal.RequestType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.RequestType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "caller_id" field.</summary>
    public const int CallerIdFieldNumber = 2;
    private long callerId_;
    /// <summary>
    /// Caller-specified value that will be provided in future messages
    /// about this request.  This is actually the matchId for game sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallerId {
      get { return callerId_; }
      set {
        callerId_ = value;
      }
    }

    /// <summary>Field number for the "response_channel" field.</summary>
    public const int ResponseChannelFieldNumber = 3;
    private string responseChannel_ = "";
    /// <summary>
    /// Redis channel to publish the request handling response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseChannel {
      get { return responseChannel_; }
      set {
        responseChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    /// <summary>
    /// Unix timestamp when request was queued.  Requests too old will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "report_key" field.</summary>
    public const int ReportKeyFieldNumber = 5;
    private string reportKey_ = "";
    /// <summary>
    /// List to RPUSH the serialized report when the workflow completes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportKey {
      get { return reportKey_; }
      set {
        reportKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 10;
    private global::Tbportal.GameSessionRequest game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionRequest Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "ping_test" field.</summary>
    public const int PingTestFieldNumber = 11;
    private global::Tbportal.PingTestRequest pingTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.PingTestRequest PingTest {
      get { return pingTest_; }
      set {
        pingTest_ = value;
      }
    }

    /// <summary>Field number for the "game_reset" field.</summary>
    public const int GameResetFieldNumber = 12;
    private global::Tbportal.GameResetNotification gameReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameResetNotification GameReset {
      get { return gameReset_; }
      set {
        gameReset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (CallerId != other.CallerId) return false;
      if (ResponseChannel != other.ResponseChannel) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ReportKey != other.ReportKey) return false;
      if (!object.Equals(Game, other.Game)) return false;
      if (!object.Equals(PingTest, other.PingTest)) return false;
      if (!object.Equals(GameReset, other.GameReset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CallerId != 0L) hash ^= CallerId.GetHashCode();
      if (ResponseChannel.Length != 0) hash ^= ResponseChannel.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (ReportKey.Length != 0) hash ^= ReportKey.GetHashCode();
      if (game_ != null) hash ^= Game.GetHashCode();
      if (pingTest_ != null) hash ^= PingTest.GetHashCode();
      if (gameReset_ != null) hash ^= GameReset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (CallerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CallerId);
      }
      if (ResponseChannel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResponseChannel);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (ReportKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReportKey);
      }
      if (game_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Game);
      }
      if (pingTest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PingTest);
      }
      if (gameReset_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(GameReset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CallerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallerId);
      }
      if (ResponseChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResponseChannel);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (ReportKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportKey);
      }
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (pingTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingTest);
      }
      if (gameReset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameReset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CallerId != 0L) {
        CallerId = other.CallerId;
      }
      if (other.ResponseChannel.Length != 0) {
        ResponseChannel = other.ResponseChannel;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.ReportKey.Length != 0) {
        ReportKey = other.ReportKey;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          game_ = new global::Tbportal.GameSessionRequest();
        }
        Game.MergeFrom(other.Game);
      }
      if (other.pingTest_ != null) {
        if (pingTest_ == null) {
          pingTest_ = new global::Tbportal.PingTestRequest();
        }
        PingTest.MergeFrom(other.PingTest);
      }
      if (other.gameReset_ != null) {
        if (gameReset_ == null) {
          gameReset_ = new global::Tbportal.GameResetNotification();
        }
        GameReset.MergeFrom(other.GameReset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Tbportal.RequestType) input.ReadEnum();
            break;
          }
          case 16: {
            CallerId = input.ReadInt64();
            break;
          }
          case 26: {
            ResponseChannel = input.ReadString();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 42: {
            ReportKey = input.ReadString();
            break;
          }
          case 82: {
            if (game_ == null) {
              game_ = new global::Tbportal.GameSessionRequest();
            }
            input.ReadMessage(game_);
            break;
          }
          case 90: {
            if (pingTest_ == null) {
              pingTest_ = new global::Tbportal.PingTestRequest();
            }
            input.ReadMessage(pingTest_);
            break;
          }
          case 98: {
            if (gameReset_ == null) {
              gameReset_ = new global::Tbportal.GameResetNotification();
            }
            input.ReadMessage(gameReset_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to a request, published to Request.response_channel.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      type_ = other.type_;
      callerId_ = other.callerId_;
      result_ = other.result_;
      opUuid_ = other.opUuid_;
      Game = other.game_ != null ? other.Game.Clone() : null;
      PingTest = other.pingTest_ != null ? other.PingTest.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tbportal.RequestType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.RequestType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "caller_id" field.</summary>
    public const int CallerIdFieldNumber = 2;
    private long callerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallerId {
      get { return callerId_; }
      set {
        callerId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Tbportal.Response.Types.Result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.Response.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "op_uuid" field.</summary>
    public const int OpUuidFieldNumber = 4;
    private pb::ByteString opUuid_ = pb::ByteString.Empty;
    /// <summary>
    /// 128-bit uuid of the operation on success.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpUuid {
      get { return opUuid_; }
      set {
        opUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 10;
    private global::Tbportal.GameSessionResponse game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionResponse Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "ping_test" field.</summary>
    public const int PingTestFieldNumber = 11;
    private global::Tbportal.PingTestResponse pingTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.PingTestResponse PingTest {
      get { return pingTest_; }
      set {
        pingTest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (CallerId != other.CallerId) return false;
      if (Result != other.Result) return false;
      if (OpUuid != other.OpUuid) return false;
      if (!object.Equals(Game, other.Game)) return false;
      if (!object.Equals(PingTest, other.PingTest)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CallerId != 0L) hash ^= CallerId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (OpUuid.Length != 0) hash ^= OpUuid.GetHashCode();
      if (game_ != null) hash ^= Game.GetHashCode();
      if (pingTest_ != null) hash ^= PingTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (CallerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CallerId);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
      if (OpUuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OpUuid);
      }
      if (game_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Game);
      }
      if (pingTest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PingTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CallerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallerId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (OpUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpUuid);
      }
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (pingTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CallerId != 0L) {
        CallerId = other.CallerId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.OpUuid.Length != 0) {
        OpUuid = other.OpUuid;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          game_ = new global::Tbportal.GameSessionResponse();
        }
        Game.MergeFrom(other.Game);
      }
      if (other.pingTest_ != null) {
        if (pingTest_ == null) {
          pingTest_ = new global::Tbportal.PingTestResponse();
        }
        PingTest.MergeFrom(other.PingTest);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Tbportal.RequestType) input.ReadEnum();
            break;
          }
          case 16: {
            CallerId = input.ReadInt64();
            break;
          }
          case 24: {
            result_ = (global::Tbportal.Response.Types.Result) input.ReadEnum();
            break;
          }
          case 34: {
            OpUuid = input.ReadBytes();
            break;
          }
          case 82: {
            if (game_ == null) {
              game_ = new global::Tbportal.GameSessionResponse();
            }
            input.ReadMessage(game_);
            break;
          }
          case 90: {
            if (pingTest_ == null) {
              pingTest_ = new global::Tbportal.PingTestResponse();
            }
            input.ReadMessage(pingTest_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Response message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Session / ping test active.
        /// </summary>
        [pbr::OriginalName("SUCCESS")] Success = 1,
        /// <summary>
        /// Request received but not valid.
        /// </summary>
        [pbr::OriginalName("BAD_REQUEST")] BadRequest = 2,
        /// <summary>
        /// Server was too busy to handle the request.
        /// </summary>
        [pbr::OriginalName("SERVER_BUSY")] ServerBusy = 3,
        /// <summary>
        /// Failed in network layer (bind).
        /// </summary>
        [pbr::OriginalName("NETWORK_FAIL")] NetworkFail = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Report for action completion.
  /// </summary>
  public sealed partial class Report : pb::IMessage<Report> {
    private static readonly pb::MessageParser<Report> _parser = new pb::MessageParser<Report>(() => new Report());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Report> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbportal.PortalReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report(Report other) : this() {
      type_ = other.type_;
      callerId_ = other.callerId_;
      opUuid_ = other.opUuid_;
      Game = other.game_ != null ? other.Game.Clone() : null;
      PingTest = other.pingTest_ != null ? other.PingTest.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report Clone() {
      return new Report(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tbportal.RequestType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.RequestType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "caller_id" field.</summary>
    public const int CallerIdFieldNumber = 2;
    private long callerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallerId {
      get { return callerId_; }
      set {
        callerId_ = value;
      }
    }

    /// <summary>Field number for the "op_uuid" field.</summary>
    public const int OpUuidFieldNumber = 3;
    private pb::ByteString opUuid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpUuid {
      get { return opUuid_; }
      set {
        opUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 10;
    private global::Tbportal.GameSessionReport game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.GameSessionReport Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "ping_test" field.</summary>
    public const int PingTestFieldNumber = 11;
    private global::Tbportal.PingTestReport pingTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbportal.PingTestReport PingTest {
      get { return pingTest_; }
      set {
        pingTest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Report);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Report other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (CallerId != other.CallerId) return false;
      if (OpUuid != other.OpUuid) return false;
      if (!object.Equals(Game, other.Game)) return false;
      if (!object.Equals(PingTest, other.PingTest)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CallerId != 0L) hash ^= CallerId.GetHashCode();
      if (OpUuid.Length != 0) hash ^= OpUuid.GetHashCode();
      if (game_ != null) hash ^= Game.GetHashCode();
      if (pingTest_ != null) hash ^= PingTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (CallerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CallerId);
      }
      if (OpUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OpUuid);
      }
      if (game_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Game);
      }
      if (pingTest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PingTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CallerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallerId);
      }
      if (OpUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpUuid);
      }
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (pingTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Report other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CallerId != 0L) {
        CallerId = other.CallerId;
      }
      if (other.OpUuid.Length != 0) {
        OpUuid = other.OpUuid;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          game_ = new global::Tbportal.GameSessionReport();
        }
        Game.MergeFrom(other.Game);
      }
      if (other.pingTest_ != null) {
        if (pingTest_ == null) {
          pingTest_ = new global::Tbportal.PingTestReport();
        }
        PingTest.MergeFrom(other.PingTest);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Tbportal.RequestType) input.ReadEnum();
            break;
          }
          case 16: {
            CallerId = input.ReadInt64();
            break;
          }
          case 26: {
            OpUuid = input.ReadBytes();
            break;
          }
          case 82: {
            if (game_ == null) {
              game_ = new global::Tbportal.GameSessionReport();
            }
            input.ReadMessage(game_);
            break;
          }
          case 90: {
            if (pingTest_ == null) {
              pingTest_ = new global::Tbportal.PingTestReport();
            }
            input.ReadMessage(pingTest_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
