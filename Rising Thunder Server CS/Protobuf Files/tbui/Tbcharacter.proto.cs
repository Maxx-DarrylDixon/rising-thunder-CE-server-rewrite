// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbui/tbcharacter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tbui {

  /// <summary>Holder for reflection information generated from tbui/tbcharacter.proto</summary>
  public static partial class TbcharacterReflection {

    #region Descriptor
    /// <summary>File descriptor for tbui/tbcharacter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TbcharacterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZ0YnVpL3RiY2hhcmFjdGVyLnByb3RvEgR0YnVpIj4KDVVJVmFyaWFudFNw",
            "ZWMSCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgD",
            "IAEoCSI3Cg5VSVNwZWNpYWxzU3BlYxIlCgh2YXJpYW50cxgCIAMoCzITLnRi",
            "dWkuVUlWYXJpYW50U3BlYyIaCgpVSU1lY2hTcGVjEgwKBG5hbWUYASABKAki",
            "OAoLVUlQaWxvdFNwZWMSDAoEbmFtZRgBIAEoCRILCgNhZ2UYAiABKAUSDgoG",
            "b3JpZ2luGAMgASgJIqABCg9VSUNoYXJhY3RlclNwZWMSEQoJdHlwZV9uYW1l",
            "GAEgASgJEh4KBG1lY2gYAiABKAsyEC50YnVpLlVJTWVjaFNwZWMSIAoFcGls",
            "b3QYAyABKAsyES50YnVpLlVJUGlsb3RTcGVjEiYKCHNwZWNpYWxzGAQgAygL",
            "MhQudGJ1aS5VSVNwZWNpYWxzU3BlYxIQCgh1aV9vcmRlchgFIAEoBSJpCg9V",
            "SUNoYXJhY3RlckRhdGESKQoKY2hhcl9zcGVjcxgBIAMoCzIVLnRidWkuVUlD",
            "aGFyYWN0ZXJTcGVjEhUKDXNlbGVjdGVkX2NoYXIYAiABKAkSFAoMc2VsZWN0",
            "ZWRfb3BwGAMgASgJIpoDChBHcmFwaGljc1NldHRpbmdzEg0KBXZzeW5jGAEg",
            "ASgIEjIKD292ZXJhbGxfcXVhbGl0eRgCIAEoDjIZLnRidWkuR3JhcGhpY3NR",
            "dWFsaXR5VHlwZRI1ChJyZXNvbHV0aW9uX3F1YWxpdHkYAyABKA4yGS50YnVp",
            "LkdyYXBoaWNzUXVhbGl0eVR5cGUSOAoVYW50aV9hbGlhc2luZ19xdWFsaXR5",
            "GAQgASgOMhkudGJ1aS5HcmFwaGljc1F1YWxpdHlUeXBlEjEKDnNoYWRvd19x",
            "dWFsaXR5GAUgASgOMhkudGJ1aS5HcmFwaGljc1F1YWxpdHlUeXBlEjcKFHBv",
            "c3RfcHJvY2Vzc19xdWFsaXR5GAYgASgOMhkudGJ1aS5HcmFwaGljc1F1YWxp",
            "dHlUeXBlEjIKD3RleHR1cmVfcXVhbGl0eRgHIAEoDjIZLnRidWkuR3JhcGhp",
            "Y3NRdWFsaXR5VHlwZRIyCg9lZmZlY3RzX3F1YWxpdHkYCCABKA4yGS50YnVp",
            "LkdyYXBoaWNzUXVhbGl0eVR5cGUiKwoKUmVzb2x1dGlvbhINCgV3aWR0aBgB",
            "IAEoBRIOCgZoZWlnaHQYAiABKAUiiwEKElJlc29sdXRpb25TZXR0aW5ncxIv",
            "ChVhdmFpbGFibGVfcmVzb2x1dGlvbnMYASADKAsyEC50YnVpLlJlc29sdXRp",
            "b24SGgoSY3VycmVudF9yZXNvbHV0aW9uGAIgASgFEigKBHR5cGUYAyABKA4y",
            "Gi50YnVpLldpbmRvd1Jlc29sdXRpb25UeXBlImYKDEdyYXBoaWNzU3BlYxIs",
            "CgpyZXNvbHV0aW9uGAEgASgLMhgudGJ1aS5SZXNvbHV0aW9uU2V0dGluZ3MS",
            "KAoIZ3JhcGhpY3MYAiABKAsyFi50YnVpLkdyYXBoaWNzU2V0dGluZ3MiXgoW",
            "TG9jYWxQbGF5ZXJQcmVmZXJlbmNlcxIsCgxrZXlfYmluZGluZ3MYASABKAsy",
            "Fi50YnVpLktleUJpbmRpbmdDb25maWcSFgoOc2tpbGxfZXN0aW1hdGUYAiAB",
            "KAUiIAoKS2V5QmluZGluZxISCgpib3VuZF9rZXlzGAIgAygJIjMKDUtleUJp",
            "bmRpbmdTZXQSIgoIYmluZGluZ3MYASADKAsyEC50YnVpLktleUJpbmRpbmci",
            "PgoQS2V5QmluZGluZ0NvbmZpZxIqCg1pbnB1dF9iaW5kaW5nGAEgAygLMhMu",
            "dGJ1aS5LZXlCaW5kaW5nU2V0IoEBCg5HbG9iYWxTZXR0aW5ncxISCgpzZXJ2",
            "ZXJfdXJsGAEgASgJEhMKC2xpc3Rlbl9wb3J0GAIgASgFEhUKDWJ1aWxkX3Zl",
            "cnNpb24YAyABKAkSEQoJYXV0b19wbGF5GAQgASgIEhwKFGluYWN0aXZlX3Rp",
            "bWVvdXRfc2VjGAUgASgFIksKC05ldHdvcmtTcGVjEhEKCWF1dG9fY29uZhgB",
            "IAEoCBISCgpsb2NhbF9wb3J0GAIgASgFEhUKDWV4dGVybmFsX3BvcnQYAyAB",
            "KAUiWwoJU291bmRTcGVjEhQKDG11c2ljX3ZvbHVtZRgBIAEoBRIRCgl2b192",
            "b2x1bWUYAiABKAUSEQoJZnhfdm9sdW1lGAMgASgFEhIKCnZvbHVtZV9tYXgY",
            "BCABKAUiWgoLR2FtZU91dGNvbWUSDgoGd2lubmVyGAEgASgIEg0KBWxvc2Vy",
            "GAIgASgIEgwKBGRyYXcYAyABKAgSDgoGcDFfd29uGAQgASgFEg4KBnAyX3dv",
            "bhgFIAEoBSIdCglEZWJ1Z1NwZWMSEAoIZ2dwb19sb2cYASABKAgiPAoSUGxh",
            "eWVyUm91bmRIaXN0b3J5EiYKB2hpc3RvcnkYASADKA4yFS50YnVpLlJvdW5k",
            "UmVzdWx0VHlwZSJACgxSb3VuZEhpc3RvcnkSMAoOcGxheWVyX2hpc3RvcnkY",
            "ASADKAsyGC50YnVpLlBsYXllclJvdW5kSGlzdG9yeSp6ChRXaW5kb3dSZXNv",
            "bHV0aW9uVHlwZRIfChtXSU5ET1dfUkVTT0xVVElPTl9UWVBFX1pFUk8QABIS",
            "Cg5XUlRfRlVMTFNDUkVFThABEhsKF1dSVF9GVUxMU0NSRUVOX1dJTkRPV0VE",
            "EAISEAoMV1JUX1dJTkRPV0VEEAMqXgoTR3JhcGhpY3NRdWFsaXR5VHlwZRIO",
            "CgpHUVRfQ1VTVE9NEAASCwoHR1FUX0xPVxABEg4KCkdRVF9NRURJVU0QAhIM",
            "CghHUVRfSElHSBADEgwKCEdRVF9FUElDEAQqfQoPUm91bmRSZXN1bHRUeXBl",
            "EhAKDFJSVF9VTlBMQVlFRBAAEg4KClJSVF9OT1JNQUwQARINCglSUlRfU1VQ",
            "RVIQAhIMCghSUlRfQ0hJUBADEgwKCFJSVF9USU1FEAQSDAoIUlJUX0RSQVcQ",
            "BRIPCgtSUlRfUEVSRkVDVBAGYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tbui.WindowResolutionType), typeof(global::Tbui.GraphicsQualityType), typeof(global::Tbui.RoundResultType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.UIVariantSpec), global::Tbui.UIVariantSpec.Parser, new[]{ "Id", "Name", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.UISpecialsSpec), global::Tbui.UISpecialsSpec.Parser, new[]{ "Variants" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.UIMechSpec), global::Tbui.UIMechSpec.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.UIPilotSpec), global::Tbui.UIPilotSpec.Parser, new[]{ "Name", "Age", "Origin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.UICharacterSpec), global::Tbui.UICharacterSpec.Parser, new[]{ "TypeName", "Mech", "Pilot", "Specials", "UiOrder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.UICharacterData), global::Tbui.UICharacterData.Parser, new[]{ "CharSpecs", "SelectedChar", "SelectedOpp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.GraphicsSettings), global::Tbui.GraphicsSettings.Parser, new[]{ "Vsync", "OverallQuality", "ResolutionQuality", "AntiAliasingQuality", "ShadowQuality", "PostProcessQuality", "TextureQuality", "EffectsQuality" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.Resolution), global::Tbui.Resolution.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.ResolutionSettings), global::Tbui.ResolutionSettings.Parser, new[]{ "AvailableResolutions", "CurrentResolution", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.GraphicsSpec), global::Tbui.GraphicsSpec.Parser, new[]{ "Resolution", "Graphics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.LocalPlayerPreferences), global::Tbui.LocalPlayerPreferences.Parser, new[]{ "KeyBindings", "SkillEstimate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.KeyBinding), global::Tbui.KeyBinding.Parser, new[]{ "BoundKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.KeyBindingSet), global::Tbui.KeyBindingSet.Parser, new[]{ "Bindings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.KeyBindingConfig), global::Tbui.KeyBindingConfig.Parser, new[]{ "InputBinding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.GlobalSettings), global::Tbui.GlobalSettings.Parser, new[]{ "ServerUrl", "ListenPort", "BuildVersion", "AutoPlay", "InactiveTimeoutSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.NetworkSpec), global::Tbui.NetworkSpec.Parser, new[]{ "AutoConf", "LocalPort", "ExternalPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.SoundSpec), global::Tbui.SoundSpec.Parser, new[]{ "MusicVolume", "VoVolume", "FxVolume", "VolumeMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.GameOutcome), global::Tbui.GameOutcome.Parser, new[]{ "Winner", "Loser", "Draw", "P1Won", "P2Won" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.DebugSpec), global::Tbui.DebugSpec.Parser, new[]{ "GgpoLog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.PlayerRoundHistory), global::Tbui.PlayerRoundHistory.Parser, new[]{ "History" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbui.RoundHistory), global::Tbui.RoundHistory.Parser, new[]{ "PlayerHistory" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum WindowResolutionType {
    [pbr::OriginalName("WINDOW_RESOLUTION_TYPE_ZERO")] Zero = 0,
    [pbr::OriginalName("WRT_FULLSCREEN")] WrtFullscreen = 1,
    [pbr::OriginalName("WRT_FULLSCREEN_WINDOWED")] WrtFullscreenWindowed = 2,
    [pbr::OriginalName("WRT_WINDOWED")] WrtWindowed = 3,
  }

  public enum GraphicsQualityType {
    /// <summary>
    /// Special level for aggregator qualities (most notably "Overall Quality")
    /// </summary>
    [pbr::OriginalName("GQT_CUSTOM")] GqtCustom = 0,
    [pbr::OriginalName("GQT_LOW")] GqtLow = 1,
    [pbr::OriginalName("GQT_MEDIUM")] GqtMedium = 2,
    [pbr::OriginalName("GQT_HIGH")] GqtHigh = 3,
    [pbr::OriginalName("GQT_EPIC")] GqtEpic = 4,
  }

  /// <summary>
  /// Make sure the values are the same as ERoundResult in TBGameState
  /// </summary>
  public enum RoundResultType {
    [pbr::OriginalName("RRT_UNPLAYED")] RrtUnplayed = 0,
    [pbr::OriginalName("RRT_NORMAL")] RrtNormal = 1,
    [pbr::OriginalName("RRT_SUPER")] RrtSuper = 2,
    [pbr::OriginalName("RRT_CHIP")] RrtChip = 3,
    [pbr::OriginalName("RRT_TIME")] RrtTime = 4,
    /// <summary>
    /// Double KO
    /// </summary>
    [pbr::OriginalName("RRT_DRAW")] RrtDraw = 5,
    [pbr::OriginalName("RRT_PERFECT")] RrtPerfect = 6,
  }

  #endregion

  #region Messages
  public sealed partial class UIVariantSpec : pb::IMessage<UIVariantSpec> {
    private static readonly pb::MessageParser<UIVariantSpec> _parser = new pb::MessageParser<UIVariantSpec>(() => new UIVariantSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIVariantSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIVariantSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIVariantSpec(UIVariantSpec other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIVariantSpec Clone() {
      return new UIVariantSpec(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIVariantSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIVariantSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIVariantSpec other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UISpecialsSpec : pb::IMessage<UISpecialsSpec> {
    private static readonly pb::MessageParser<UISpecialsSpec> _parser = new pb::MessageParser<UISpecialsSpec>(() => new UISpecialsSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UISpecialsSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UISpecialsSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UISpecialsSpec(UISpecialsSpec other) : this() {
      variants_ = other.variants_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UISpecialsSpec Clone() {
      return new UISpecialsSpec(this);
    }

    /// <summary>Field number for the "variants" field.</summary>
    public const int VariantsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tbui.UIVariantSpec> _repeated_variants_codec
        = pb::FieldCodec.ForMessage(18, global::Tbui.UIVariantSpec.Parser);
    private readonly pbc::RepeatedField<global::Tbui.UIVariantSpec> variants_ = new pbc::RepeatedField<global::Tbui.UIVariantSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.UIVariantSpec> Variants {
      get { return variants_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UISpecialsSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UISpecialsSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variants_.Equals(other.variants_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variants_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variants_.WriteTo(output, _repeated_variants_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variants_.CalculateSize(_repeated_variants_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UISpecialsSpec other) {
      if (other == null) {
        return;
      }
      variants_.Add(other.variants_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            variants_.AddEntriesFrom(input, _repeated_variants_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIMechSpec : pb::IMessage<UIMechSpec> {
    private static readonly pb::MessageParser<UIMechSpec> _parser = new pb::MessageParser<UIMechSpec>(() => new UIMechSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIMechSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIMechSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIMechSpec(UIMechSpec other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIMechSpec Clone() {
      return new UIMechSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIMechSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIMechSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIMechSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIPilotSpec : pb::IMessage<UIPilotSpec> {
    private static readonly pb::MessageParser<UIPilotSpec> _parser = new pb::MessageParser<UIPilotSpec>(() => new UIPilotSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIPilotSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIPilotSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIPilotSpec(UIPilotSpec other) : this() {
      name_ = other.name_;
      age_ = other.age_;
      origin_ = other.origin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIPilotSpec Clone() {
      return new UIPilotSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 2;
    private int age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 3;
    private string origin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Origin {
      get { return origin_; }
      set {
        origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIPilotSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIPilotSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Age != other.Age) return false;
      if (Origin != other.Origin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Origin.Length != 0) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Age != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Age);
      }
      if (Origin.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      if (Origin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIPilotSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Origin.Length != 0) {
        Origin = other.Origin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Age = input.ReadInt32();
            break;
          }
          case 26: {
            Origin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UICharacterSpec : pb::IMessage<UICharacterSpec> {
    private static readonly pb::MessageParser<UICharacterSpec> _parser = new pb::MessageParser<UICharacterSpec>(() => new UICharacterSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UICharacterSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICharacterSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICharacterSpec(UICharacterSpec other) : this() {
      typeName_ = other.typeName_;
      Mech = other.mech_ != null ? other.Mech.Clone() : null;
      Pilot = other.pilot_ != null ? other.Pilot.Clone() : null;
      specials_ = other.specials_.Clone();
      uiOrder_ = other.uiOrder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICharacterSpec Clone() {
      return new UICharacterSpec(this);
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mech" field.</summary>
    public const int MechFieldNumber = 2;
    private global::Tbui.UIMechSpec mech_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.UIMechSpec Mech {
      get { return mech_; }
      set {
        mech_ = value;
      }
    }

    /// <summary>Field number for the "pilot" field.</summary>
    public const int PilotFieldNumber = 3;
    private global::Tbui.UIPilotSpec pilot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.UIPilotSpec Pilot {
      get { return pilot_; }
      set {
        pilot_ = value;
      }
    }

    /// <summary>Field number for the "specials" field.</summary>
    public const int SpecialsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tbui.UISpecialsSpec> _repeated_specials_codec
        = pb::FieldCodec.ForMessage(34, global::Tbui.UISpecialsSpec.Parser);
    private readonly pbc::RepeatedField<global::Tbui.UISpecialsSpec> specials_ = new pbc::RepeatedField<global::Tbui.UISpecialsSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.UISpecialsSpec> Specials {
      get { return specials_; }
    }

    /// <summary>Field number for the "ui_order" field.</summary>
    public const int UiOrderFieldNumber = 5;
    private int uiOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UiOrder {
      get { return uiOrder_; }
      set {
        uiOrder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UICharacterSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UICharacterSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      if (!object.Equals(Mech, other.Mech)) return false;
      if (!object.Equals(Pilot, other.Pilot)) return false;
      if(!specials_.Equals(other.specials_)) return false;
      if (UiOrder != other.UiOrder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (mech_ != null) hash ^= Mech.GetHashCode();
      if (pilot_ != null) hash ^= Pilot.GetHashCode();
      hash ^= specials_.GetHashCode();
      if (UiOrder != 0) hash ^= UiOrder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (mech_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mech);
      }
      if (pilot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pilot);
      }
      specials_.WriteTo(output, _repeated_specials_codec);
      if (UiOrder != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UiOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (mech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mech);
      }
      if (pilot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pilot);
      }
      size += specials_.CalculateSize(_repeated_specials_codec);
      if (UiOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UiOrder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UICharacterSpec other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.mech_ != null) {
        if (mech_ == null) {
          mech_ = new global::Tbui.UIMechSpec();
        }
        Mech.MergeFrom(other.Mech);
      }
      if (other.pilot_ != null) {
        if (pilot_ == null) {
          pilot_ = new global::Tbui.UIPilotSpec();
        }
        Pilot.MergeFrom(other.Pilot);
      }
      specials_.Add(other.specials_);
      if (other.UiOrder != 0) {
        UiOrder = other.UiOrder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
          case 18: {
            if (mech_ == null) {
              mech_ = new global::Tbui.UIMechSpec();
            }
            input.ReadMessage(mech_);
            break;
          }
          case 26: {
            if (pilot_ == null) {
              pilot_ = new global::Tbui.UIPilotSpec();
            }
            input.ReadMessage(pilot_);
            break;
          }
          case 34: {
            specials_.AddEntriesFrom(input, _repeated_specials_codec);
            break;
          }
          case 40: {
            UiOrder = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UICharacterData : pb::IMessage<UICharacterData> {
    private static readonly pb::MessageParser<UICharacterData> _parser = new pb::MessageParser<UICharacterData>(() => new UICharacterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UICharacterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICharacterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICharacterData(UICharacterData other) : this() {
      charSpecs_ = other.charSpecs_.Clone();
      selectedChar_ = other.selectedChar_;
      selectedOpp_ = other.selectedOpp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICharacterData Clone() {
      return new UICharacterData(this);
    }

    /// <summary>Field number for the "char_specs" field.</summary>
    public const int CharSpecsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbui.UICharacterSpec> _repeated_charSpecs_codec
        = pb::FieldCodec.ForMessage(10, global::Tbui.UICharacterSpec.Parser);
    private readonly pbc::RepeatedField<global::Tbui.UICharacterSpec> charSpecs_ = new pbc::RepeatedField<global::Tbui.UICharacterSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.UICharacterSpec> CharSpecs {
      get { return charSpecs_; }
    }

    /// <summary>Field number for the "selected_char" field.</summary>
    public const int SelectedCharFieldNumber = 2;
    private string selectedChar_ = "";
    /// <summary>
    /// When starting UI in editor, want to initialize to the currently selected character and opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectedChar {
      get { return selectedChar_; }
      set {
        selectedChar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selected_opp" field.</summary>
    public const int SelectedOppFieldNumber = 3;
    private string selectedOpp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectedOpp {
      get { return selectedOpp_; }
      set {
        selectedOpp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UICharacterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UICharacterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!charSpecs_.Equals(other.charSpecs_)) return false;
      if (SelectedChar != other.SelectedChar) return false;
      if (SelectedOpp != other.SelectedOpp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= charSpecs_.GetHashCode();
      if (SelectedChar.Length != 0) hash ^= SelectedChar.GetHashCode();
      if (SelectedOpp.Length != 0) hash ^= SelectedOpp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      charSpecs_.WriteTo(output, _repeated_charSpecs_codec);
      if (SelectedChar.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SelectedChar);
      }
      if (SelectedOpp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SelectedOpp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += charSpecs_.CalculateSize(_repeated_charSpecs_codec);
      if (SelectedChar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedChar);
      }
      if (SelectedOpp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedOpp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UICharacterData other) {
      if (other == null) {
        return;
      }
      charSpecs_.Add(other.charSpecs_);
      if (other.SelectedChar.Length != 0) {
        SelectedChar = other.SelectedChar;
      }
      if (other.SelectedOpp.Length != 0) {
        SelectedOpp = other.SelectedOpp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            charSpecs_.AddEntriesFrom(input, _repeated_charSpecs_codec);
            break;
          }
          case 18: {
            SelectedChar = input.ReadString();
            break;
          }
          case 26: {
            SelectedOpp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GraphicsSettings : pb::IMessage<GraphicsSettings> {
    private static readonly pb::MessageParser<GraphicsSettings> _parser = new pb::MessageParser<GraphicsSettings>(() => new GraphicsSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphicsSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsSettings(GraphicsSettings other) : this() {
      vsync_ = other.vsync_;
      overallQuality_ = other.overallQuality_;
      resolutionQuality_ = other.resolutionQuality_;
      antiAliasingQuality_ = other.antiAliasingQuality_;
      shadowQuality_ = other.shadowQuality_;
      postProcessQuality_ = other.postProcessQuality_;
      textureQuality_ = other.textureQuality_;
      effectsQuality_ = other.effectsQuality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsSettings Clone() {
      return new GraphicsSettings(this);
    }

    /// <summary>Field number for the "vsync" field.</summary>
    public const int VsyncFieldNumber = 1;
    private bool vsync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vsync {
      get { return vsync_; }
      set {
        vsync_ = value;
      }
    }

    /// <summary>Field number for the "overall_quality" field.</summary>
    public const int OverallQualityFieldNumber = 2;
    private global::Tbui.GraphicsQualityType overallQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType OverallQuality {
      get { return overallQuality_; }
      set {
        overallQuality_ = value;
      }
    }

    /// <summary>Field number for the "resolution_quality" field.</summary>
    public const int ResolutionQualityFieldNumber = 3;
    private global::Tbui.GraphicsQualityType resolutionQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType ResolutionQuality {
      get { return resolutionQuality_; }
      set {
        resolutionQuality_ = value;
      }
    }

    /// <summary>Field number for the "anti_aliasing_quality" field.</summary>
    public const int AntiAliasingQualityFieldNumber = 4;
    private global::Tbui.GraphicsQualityType antiAliasingQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType AntiAliasingQuality {
      get { return antiAliasingQuality_; }
      set {
        antiAliasingQuality_ = value;
      }
    }

    /// <summary>Field number for the "shadow_quality" field.</summary>
    public const int ShadowQualityFieldNumber = 5;
    private global::Tbui.GraphicsQualityType shadowQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType ShadowQuality {
      get { return shadowQuality_; }
      set {
        shadowQuality_ = value;
      }
    }

    /// <summary>Field number for the "post_process_quality" field.</summary>
    public const int PostProcessQualityFieldNumber = 6;
    private global::Tbui.GraphicsQualityType postProcessQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType PostProcessQuality {
      get { return postProcessQuality_; }
      set {
        postProcessQuality_ = value;
      }
    }

    /// <summary>Field number for the "texture_quality" field.</summary>
    public const int TextureQualityFieldNumber = 7;
    private global::Tbui.GraphicsQualityType textureQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType TextureQuality {
      get { return textureQuality_; }
      set {
        textureQuality_ = value;
      }
    }

    /// <summary>Field number for the "effects_quality" field.</summary>
    public const int EffectsQualityFieldNumber = 8;
    private global::Tbui.GraphicsQualityType effectsQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsQualityType EffectsQuality {
      get { return effectsQuality_; }
      set {
        effectsQuality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphicsSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphicsSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vsync != other.Vsync) return false;
      if (OverallQuality != other.OverallQuality) return false;
      if (ResolutionQuality != other.ResolutionQuality) return false;
      if (AntiAliasingQuality != other.AntiAliasingQuality) return false;
      if (ShadowQuality != other.ShadowQuality) return false;
      if (PostProcessQuality != other.PostProcessQuality) return false;
      if (TextureQuality != other.TextureQuality) return false;
      if (EffectsQuality != other.EffectsQuality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vsync != false) hash ^= Vsync.GetHashCode();
      if (OverallQuality != 0) hash ^= OverallQuality.GetHashCode();
      if (ResolutionQuality != 0) hash ^= ResolutionQuality.GetHashCode();
      if (AntiAliasingQuality != 0) hash ^= AntiAliasingQuality.GetHashCode();
      if (ShadowQuality != 0) hash ^= ShadowQuality.GetHashCode();
      if (PostProcessQuality != 0) hash ^= PostProcessQuality.GetHashCode();
      if (TextureQuality != 0) hash ^= TextureQuality.GetHashCode();
      if (EffectsQuality != 0) hash ^= EffectsQuality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vsync != false) {
        output.WriteRawTag(8);
        output.WriteBool(Vsync);
      }
      if (OverallQuality != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OverallQuality);
      }
      if (ResolutionQuality != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResolutionQuality);
      }
      if (AntiAliasingQuality != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AntiAliasingQuality);
      }
      if (ShadowQuality != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ShadowQuality);
      }
      if (PostProcessQuality != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PostProcessQuality);
      }
      if (TextureQuality != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TextureQuality);
      }
      if (EffectsQuality != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EffectsQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vsync != false) {
        size += 1 + 1;
      }
      if (OverallQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OverallQuality);
      }
      if (ResolutionQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResolutionQuality);
      }
      if (AntiAliasingQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AntiAliasingQuality);
      }
      if (ShadowQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShadowQuality);
      }
      if (PostProcessQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PostProcessQuality);
      }
      if (TextureQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TextureQuality);
      }
      if (EffectsQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectsQuality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphicsSettings other) {
      if (other == null) {
        return;
      }
      if (other.Vsync != false) {
        Vsync = other.Vsync;
      }
      if (other.OverallQuality != 0) {
        OverallQuality = other.OverallQuality;
      }
      if (other.ResolutionQuality != 0) {
        ResolutionQuality = other.ResolutionQuality;
      }
      if (other.AntiAliasingQuality != 0) {
        AntiAliasingQuality = other.AntiAliasingQuality;
      }
      if (other.ShadowQuality != 0) {
        ShadowQuality = other.ShadowQuality;
      }
      if (other.PostProcessQuality != 0) {
        PostProcessQuality = other.PostProcessQuality;
      }
      if (other.TextureQuality != 0) {
        TextureQuality = other.TextureQuality;
      }
      if (other.EffectsQuality != 0) {
        EffectsQuality = other.EffectsQuality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Vsync = input.ReadBool();
            break;
          }
          case 16: {
            overallQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
          case 24: {
            resolutionQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
          case 32: {
            antiAliasingQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
          case 40: {
            shadowQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
          case 48: {
            postProcessQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
          case 56: {
            textureQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
          case 64: {
            effectsQuality_ = (global::Tbui.GraphicsQualityType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Resolution : pb::IMessage<Resolution> {
    private static readonly pb::MessageParser<Resolution> _parser = new pb::MessageParser<Resolution>(() => new Resolution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resolution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution(Resolution other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution Clone() {
      return new Resolution(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resolution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resolution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resolution other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolutionSettings : pb::IMessage<ResolutionSettings> {
    private static readonly pb::MessageParser<ResolutionSettings> _parser = new pb::MessageParser<ResolutionSettings>(() => new ResolutionSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolutionSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolutionSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolutionSettings(ResolutionSettings other) : this() {
      availableResolutions_ = other.availableResolutions_.Clone();
      currentResolution_ = other.currentResolution_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolutionSettings Clone() {
      return new ResolutionSettings(this);
    }

    /// <summary>Field number for the "available_resolutions" field.</summary>
    public const int AvailableResolutionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbui.Resolution> _repeated_availableResolutions_codec
        = pb::FieldCodec.ForMessage(10, global::Tbui.Resolution.Parser);
    private readonly pbc::RepeatedField<global::Tbui.Resolution> availableResolutions_ = new pbc::RepeatedField<global::Tbui.Resolution>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.Resolution> AvailableResolutions {
      get { return availableResolutions_; }
    }

    /// <summary>Field number for the "current_resolution" field.</summary>
    public const int CurrentResolutionFieldNumber = 2;
    private int currentResolution_;
    /// <summary>
    /// Index into available resolutions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentResolution {
      get { return currentResolution_; }
      set {
        currentResolution_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Tbui.WindowResolutionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.WindowResolutionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolutionSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolutionSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!availableResolutions_.Equals(other.availableResolutions_)) return false;
      if (CurrentResolution != other.CurrentResolution) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= availableResolutions_.GetHashCode();
      if (CurrentResolution != 0) hash ^= CurrentResolution.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      availableResolutions_.WriteTo(output, _repeated_availableResolutions_codec);
      if (CurrentResolution != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentResolution);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += availableResolutions_.CalculateSize(_repeated_availableResolutions_codec);
      if (CurrentResolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentResolution);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolutionSettings other) {
      if (other == null) {
        return;
      }
      availableResolutions_.Add(other.availableResolutions_);
      if (other.CurrentResolution != 0) {
        CurrentResolution = other.CurrentResolution;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            availableResolutions_.AddEntriesFrom(input, _repeated_availableResolutions_codec);
            break;
          }
          case 16: {
            CurrentResolution = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::Tbui.WindowResolutionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GraphicsSpec : pb::IMessage<GraphicsSpec> {
    private static readonly pb::MessageParser<GraphicsSpec> _parser = new pb::MessageParser<GraphicsSpec>(() => new GraphicsSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphicsSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsSpec(GraphicsSpec other) : this() {
      Resolution = other.resolution_ != null ? other.Resolution.Clone() : null;
      Graphics = other.graphics_ != null ? other.Graphics.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsSpec Clone() {
      return new GraphicsSpec(this);
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private global::Tbui.ResolutionSettings resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.ResolutionSettings Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "graphics" field.</summary>
    public const int GraphicsFieldNumber = 2;
    private global::Tbui.GraphicsSettings graphics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.GraphicsSettings Graphics {
      get { return graphics_; }
      set {
        graphics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphicsSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphicsSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resolution, other.Resolution)) return false;
      if (!object.Equals(Graphics, other.Graphics)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resolution_ != null) hash ^= Resolution.GetHashCode();
      if (graphics_ != null) hash ^= Graphics.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resolution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resolution);
      }
      if (graphics_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Graphics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resolution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
      }
      if (graphics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Graphics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphicsSpec other) {
      if (other == null) {
        return;
      }
      if (other.resolution_ != null) {
        if (resolution_ == null) {
          resolution_ = new global::Tbui.ResolutionSettings();
        }
        Resolution.MergeFrom(other.Resolution);
      }
      if (other.graphics_ != null) {
        if (graphics_ == null) {
          graphics_ = new global::Tbui.GraphicsSettings();
        }
        Graphics.MergeFrom(other.Graphics);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resolution_ == null) {
              resolution_ = new global::Tbui.ResolutionSettings();
            }
            input.ReadMessage(resolution_);
            break;
          }
          case 18: {
            if (graphics_ == null) {
              graphics_ = new global::Tbui.GraphicsSettings();
            }
            input.ReadMessage(graphics_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Encapsulates all persisted local preferences that are account-specific
  /// (as opposed to machine-specific)
  /// </summary>
  public sealed partial class LocalPlayerPreferences : pb::IMessage<LocalPlayerPreferences> {
    private static readonly pb::MessageParser<LocalPlayerPreferences> _parser = new pb::MessageParser<LocalPlayerPreferences>(() => new LocalPlayerPreferences());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalPlayerPreferences> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalPlayerPreferences() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalPlayerPreferences(LocalPlayerPreferences other) : this() {
      KeyBindings = other.keyBindings_ != null ? other.KeyBindings.Clone() : null;
      skillEstimate_ = other.skillEstimate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalPlayerPreferences Clone() {
      return new LocalPlayerPreferences(this);
    }

    /// <summary>Field number for the "key_bindings" field.</summary>
    public const int KeyBindingsFieldNumber = 1;
    private global::Tbui.KeyBindingConfig keyBindings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbui.KeyBindingConfig KeyBindings {
      get { return keyBindings_; }
      set {
        keyBindings_ = value;
      }
    }

    /// <summary>Field number for the "skill_estimate" field.</summary>
    public const int SkillEstimateFieldNumber = 2;
    private int skillEstimate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillEstimate {
      get { return skillEstimate_; }
      set {
        skillEstimate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalPlayerPreferences);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalPlayerPreferences other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KeyBindings, other.KeyBindings)) return false;
      if (SkillEstimate != other.SkillEstimate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyBindings_ != null) hash ^= KeyBindings.GetHashCode();
      if (SkillEstimate != 0) hash ^= SkillEstimate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyBindings_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(KeyBindings);
      }
      if (SkillEstimate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillEstimate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyBindings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyBindings);
      }
      if (SkillEstimate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillEstimate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalPlayerPreferences other) {
      if (other == null) {
        return;
      }
      if (other.keyBindings_ != null) {
        if (keyBindings_ == null) {
          keyBindings_ = new global::Tbui.KeyBindingConfig();
        }
        KeyBindings.MergeFrom(other.KeyBindings);
      }
      if (other.SkillEstimate != 0) {
        SkillEstimate = other.SkillEstimate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (keyBindings_ == null) {
              keyBindings_ = new global::Tbui.KeyBindingConfig();
            }
            input.ReadMessage(keyBindings_);
            break;
          }
          case 16: {
            SkillEstimate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyBinding : pb::IMessage<KeyBinding> {
    private static readonly pb::MessageParser<KeyBinding> _parser = new pb::MessageParser<KeyBinding>(() => new KeyBinding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyBinding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBinding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBinding(KeyBinding other) : this() {
      boundKeys_ = other.boundKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBinding Clone() {
      return new KeyBinding(this);
    }

    /// <summary>Field number for the "bound_keys" field.</summary>
    public const int BoundKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_boundKeys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> boundKeys_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Multiple keys can be bound to one action (for now limited to 2).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BoundKeys {
      get { return boundKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyBinding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyBinding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boundKeys_.Equals(other.boundKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boundKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boundKeys_.WriteTo(output, _repeated_boundKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boundKeys_.CalculateSize(_repeated_boundKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyBinding other) {
      if (other == null) {
        return;
      }
      boundKeys_.Add(other.boundKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            boundKeys_.AddEntriesFrom(input, _repeated_boundKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyBindingSet : pb::IMessage<KeyBindingSet> {
    private static readonly pb::MessageParser<KeyBindingSet> _parser = new pb::MessageParser<KeyBindingSet>(() => new KeyBindingSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyBindingSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBindingSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBindingSet(KeyBindingSet other) : this() {
      bindings_ = other.bindings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBindingSet Clone() {
      return new KeyBindingSet(this);
    }

    /// <summary>Field number for the "bindings" field.</summary>
    public const int BindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbui.KeyBinding> _repeated_bindings_codec
        = pb::FieldCodec.ForMessage(10, global::Tbui.KeyBinding.Parser);
    private readonly pbc::RepeatedField<global::Tbui.KeyBinding> bindings_ = new pbc::RepeatedField<global::Tbui.KeyBinding>();
    /// <summary>
    /// The id of the binding is its position in the array.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.KeyBinding> Bindings {
      get { return bindings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyBindingSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyBindingSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bindings_.Equals(other.bindings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bindings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bindings_.WriteTo(output, _repeated_bindings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bindings_.CalculateSize(_repeated_bindings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyBindingSet other) {
      if (other == null) {
        return;
      }
      bindings_.Add(other.bindings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bindings_.AddEntriesFrom(input, _repeated_bindings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyBindingConfig : pb::IMessage<KeyBindingConfig> {
    private static readonly pb::MessageParser<KeyBindingConfig> _parser = new pb::MessageParser<KeyBindingConfig>(() => new KeyBindingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyBindingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBindingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBindingConfig(KeyBindingConfig other) : this() {
      inputBinding_ = other.inputBinding_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyBindingConfig Clone() {
      return new KeyBindingConfig(this);
    }

    /// <summary>Field number for the "input_binding" field.</summary>
    public const int InputBindingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbui.KeyBindingSet> _repeated_inputBinding_codec
        = pb::FieldCodec.ForMessage(10, global::Tbui.KeyBindingSet.Parser);
    private readonly pbc::RepeatedField<global::Tbui.KeyBindingSet> inputBinding_ = new pbc::RepeatedField<global::Tbui.KeyBindingSet>();
    /// <summary>
    /// A set of bindings for every type of input (controller, keyboard)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.KeyBindingSet> InputBinding {
      get { return inputBinding_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyBindingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyBindingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputBinding_.Equals(other.inputBinding_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputBinding_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputBinding_.WriteTo(output, _repeated_inputBinding_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputBinding_.CalculateSize(_repeated_inputBinding_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyBindingConfig other) {
      if (other == null) {
        return;
      }
      inputBinding_.Add(other.inputBinding_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputBinding_.AddEntriesFrom(input, _repeated_inputBinding_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings the UI always loads at startup.
  /// </summary>
  public sealed partial class GlobalSettings : pb::IMessage<GlobalSettings> {
    private static readonly pb::MessageParser<GlobalSettings> _parser = new pb::MessageParser<GlobalSettings>(() => new GlobalSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSettings(GlobalSettings other) : this() {
      serverUrl_ = other.serverUrl_;
      listenPort_ = other.listenPort_;
      buildVersion_ = other.buildVersion_;
      autoPlay_ = other.autoPlay_;
      inactiveTimeoutSec_ = other.inactiveTimeoutSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSettings Clone() {
      return new GlobalSettings(this);
    }

    /// <summary>Field number for the "server_url" field.</summary>
    public const int ServerUrlFieldNumber = 1;
    private string serverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUrl {
      get { return serverUrl_; }
      set {
        serverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listen_port" field.</summary>
    public const int ListenPortFieldNumber = 2;
    private int listenPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListenPort {
      get { return listenPort_; }
      set {
        listenPort_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 3;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auto_play" field.</summary>
    public const int AutoPlayFieldNumber = 4;
    private bool autoPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoPlay {
      get { return autoPlay_; }
      set {
        autoPlay_ = value;
      }
    }

    /// <summary>Field number for the "inactive_timeout_sec" field.</summary>
    public const int InactiveTimeoutSecFieldNumber = 5;
    private int inactiveTimeoutSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InactiveTimeoutSec {
      get { return inactiveTimeoutSec_; }
      set {
        inactiveTimeoutSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerUrl != other.ServerUrl) return false;
      if (ListenPort != other.ListenPort) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (AutoPlay != other.AutoPlay) return false;
      if (InactiveTimeoutSec != other.InactiveTimeoutSec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerUrl.Length != 0) hash ^= ServerUrl.GetHashCode();
      if (ListenPort != 0) hash ^= ListenPort.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (AutoPlay != false) hash ^= AutoPlay.GetHashCode();
      if (InactiveTimeoutSec != 0) hash ^= InactiveTimeoutSec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerUrl);
      }
      if (ListenPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ListenPort);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BuildVersion);
      }
      if (AutoPlay != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoPlay);
      }
      if (InactiveTimeoutSec != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InactiveTimeoutSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUrl);
      }
      if (ListenPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenPort);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (AutoPlay != false) {
        size += 1 + 1;
      }
      if (InactiveTimeoutSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InactiveTimeoutSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalSettings other) {
      if (other == null) {
        return;
      }
      if (other.ServerUrl.Length != 0) {
        ServerUrl = other.ServerUrl;
      }
      if (other.ListenPort != 0) {
        ListenPort = other.ListenPort;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.AutoPlay != false) {
        AutoPlay = other.AutoPlay;
      }
      if (other.InactiveTimeoutSec != 0) {
        InactiveTimeoutSec = other.InactiveTimeoutSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerUrl = input.ReadString();
            break;
          }
          case 16: {
            ListenPort = input.ReadInt32();
            break;
          }
          case 26: {
            BuildVersion = input.ReadString();
            break;
          }
          case 32: {
            AutoPlay = input.ReadBool();
            break;
          }
          case 40: {
            InactiveTimeoutSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkSpec : pb::IMessage<NetworkSpec> {
    private static readonly pb::MessageParser<NetworkSpec> _parser = new pb::MessageParser<NetworkSpec>(() => new NetworkSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkSpec(NetworkSpec other) : this() {
      autoConf_ = other.autoConf_;
      localPort_ = other.localPort_;
      externalPort_ = other.externalPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkSpec Clone() {
      return new NetworkSpec(this);
    }

    /// <summary>Field number for the "auto_conf" field.</summary>
    public const int AutoConfFieldNumber = 1;
    private bool autoConf_;
    /// <summary>
    /// Bind ports and set up P2P network access automatically.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoConf {
      get { return autoConf_; }
      set {
        autoConf_ = value;
      }
    }

    /// <summary>Field number for the "local_port" field.</summary>
    public const int LocalPortFieldNumber = 2;
    private int localPort_;
    /// <summary>
    /// If not auto-configuring, the local port to bind to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalPort {
      get { return localPort_; }
      set {
        localPort_ = value;
      }
    }

    /// <summary>Field number for the "external_port" field.</summary>
    public const int ExternalPortFieldNumber = 3;
    private int externalPort_;
    /// <summary>
    /// If not auto-configuring, the external port to advertise to other players.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExternalPort {
      get { return externalPort_; }
      set {
        externalPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoConf != other.AutoConf) return false;
      if (LocalPort != other.LocalPort) return false;
      if (ExternalPort != other.ExternalPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoConf != false) hash ^= AutoConf.GetHashCode();
      if (LocalPort != 0) hash ^= LocalPort.GetHashCode();
      if (ExternalPort != 0) hash ^= ExternalPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoConf != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoConf);
      }
      if (LocalPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LocalPort);
      }
      if (ExternalPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExternalPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoConf != false) {
        size += 1 + 1;
      }
      if (LocalPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalPort);
      }
      if (ExternalPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExternalPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkSpec other) {
      if (other == null) {
        return;
      }
      if (other.AutoConf != false) {
        AutoConf = other.AutoConf;
      }
      if (other.LocalPort != 0) {
        LocalPort = other.LocalPort;
      }
      if (other.ExternalPort != 0) {
        ExternalPort = other.ExternalPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoConf = input.ReadBool();
            break;
          }
          case 16: {
            LocalPort = input.ReadInt32();
            break;
          }
          case 24: {
            ExternalPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Volume integers range from 0 to volume_max
  /// </summary>
  public sealed partial class SoundSpec : pb::IMessage<SoundSpec> {
    private static readonly pb::MessageParser<SoundSpec> _parser = new pb::MessageParser<SoundSpec>(() => new SoundSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoundSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundSpec(SoundSpec other) : this() {
      musicVolume_ = other.musicVolume_;
      voVolume_ = other.voVolume_;
      fxVolume_ = other.fxVolume_;
      volumeMax_ = other.volumeMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundSpec Clone() {
      return new SoundSpec(this);
    }

    /// <summary>Field number for the "music_volume" field.</summary>
    public const int MusicVolumeFieldNumber = 1;
    private int musicVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicVolume {
      get { return musicVolume_; }
      set {
        musicVolume_ = value;
      }
    }

    /// <summary>Field number for the "vo_volume" field.</summary>
    public const int VoVolumeFieldNumber = 2;
    private int voVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoVolume {
      get { return voVolume_; }
      set {
        voVolume_ = value;
      }
    }

    /// <summary>Field number for the "fx_volume" field.</summary>
    public const int FxVolumeFieldNumber = 3;
    private int fxVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FxVolume {
      get { return fxVolume_; }
      set {
        fxVolume_ = value;
      }
    }

    /// <summary>Field number for the "volume_max" field.</summary>
    public const int VolumeMaxFieldNumber = 4;
    private int volumeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeMax {
      get { return volumeMax_; }
      set {
        volumeMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoundSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoundSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MusicVolume != other.MusicVolume) return false;
      if (VoVolume != other.VoVolume) return false;
      if (FxVolume != other.FxVolume) return false;
      if (VolumeMax != other.VolumeMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MusicVolume != 0) hash ^= MusicVolume.GetHashCode();
      if (VoVolume != 0) hash ^= VoVolume.GetHashCode();
      if (FxVolume != 0) hash ^= FxVolume.GetHashCode();
      if (VolumeMax != 0) hash ^= VolumeMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MusicVolume != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MusicVolume);
      }
      if (VoVolume != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VoVolume);
      }
      if (FxVolume != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FxVolume);
      }
      if (VolumeMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VolumeMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MusicVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MusicVolume);
      }
      if (VoVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoVolume);
      }
      if (FxVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FxVolume);
      }
      if (VolumeMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoundSpec other) {
      if (other == null) {
        return;
      }
      if (other.MusicVolume != 0) {
        MusicVolume = other.MusicVolume;
      }
      if (other.VoVolume != 0) {
        VoVolume = other.VoVolume;
      }
      if (other.FxVolume != 0) {
        FxVolume = other.FxVolume;
      }
      if (other.VolumeMax != 0) {
        VolumeMax = other.VolumeMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MusicVolume = input.ReadInt32();
            break;
          }
          case 16: {
            VoVolume = input.ReadInt32();
            break;
          }
          case 24: {
            FxVolume = input.ReadInt32();
            break;
          }
          case 32: {
            VolumeMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOutcome : pb::IMessage<GameOutcome> {
    private static readonly pb::MessageParser<GameOutcome> _parser = new pb::MessageParser<GameOutcome>(() => new GameOutcome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOutcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOutcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOutcome(GameOutcome other) : this() {
      winner_ = other.winner_;
      loser_ = other.loser_;
      draw_ = other.draw_;
      p1Won_ = other.p1Won_;
      p2Won_ = other.p2Won_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOutcome Clone() {
      return new GameOutcome(this);
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private bool winner_;
    /// <summary>
    /// Did local player win the game?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "loser" field.</summary>
    public const int LoserFieldNumber = 2;
    private bool loser_;
    /// <summary>
    /// Did local player lose the game?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loser {
      get { return loser_; }
      set {
        loser_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 3;
    private bool draw_;
    /// <summary>
    /// Was the gamea  draw?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    /// <summary>Field number for the "p1_won" field.</summary>
    public const int P1WonFieldNumber = 4;
    private int p1Won_;
    /// <summary>
    /// How many games has p1 won?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int P1Won {
      get { return p1Won_; }
      set {
        p1Won_ = value;
      }
    }

    /// <summary>Field number for the "p2_won" field.</summary>
    public const int P2WonFieldNumber = 5;
    private int p2Won_;
    /// <summary>
    /// How many games has p2 won?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int P2Won {
      get { return p2Won_; }
      set {
        p2Won_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOutcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOutcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Winner != other.Winner) return false;
      if (Loser != other.Loser) return false;
      if (Draw != other.Draw) return false;
      if (P1Won != other.P1Won) return false;
      if (P2Won != other.P2Won) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Winner != false) hash ^= Winner.GetHashCode();
      if (Loser != false) hash ^= Loser.GetHashCode();
      if (Draw != false) hash ^= Draw.GetHashCode();
      if (P1Won != 0) hash ^= P1Won.GetHashCode();
      if (P2Won != 0) hash ^= P2Won.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Winner != false) {
        output.WriteRawTag(8);
        output.WriteBool(Winner);
      }
      if (Loser != false) {
        output.WriteRawTag(16);
        output.WriteBool(Loser);
      }
      if (Draw != false) {
        output.WriteRawTag(24);
        output.WriteBool(Draw);
      }
      if (P1Won != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(P1Won);
      }
      if (P2Won != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(P2Won);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Winner != false) {
        size += 1 + 1;
      }
      if (Loser != false) {
        size += 1 + 1;
      }
      if (Draw != false) {
        size += 1 + 1;
      }
      if (P1Won != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(P1Won);
      }
      if (P2Won != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(P2Won);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOutcome other) {
      if (other == null) {
        return;
      }
      if (other.Winner != false) {
        Winner = other.Winner;
      }
      if (other.Loser != false) {
        Loser = other.Loser;
      }
      if (other.Draw != false) {
        Draw = other.Draw;
      }
      if (other.P1Won != 0) {
        P1Won = other.P1Won;
      }
      if (other.P2Won != 0) {
        P2Won = other.P2Won;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Winner = input.ReadBool();
            break;
          }
          case 16: {
            Loser = input.ReadBool();
            break;
          }
          case 24: {
            Draw = input.ReadBool();
            break;
          }
          case 32: {
            P1Won = input.ReadInt32();
            break;
          }
          case 40: {
            P2Won = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugSpec : pb::IMessage<DebugSpec> {
    private static readonly pb::MessageParser<DebugSpec> _parser = new pb::MessageParser<DebugSpec>(() => new DebugSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugSpec(DebugSpec other) : this() {
      ggpoLog_ = other.ggpoLog_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugSpec Clone() {
      return new DebugSpec(this);
    }

    /// <summary>Field number for the "ggpo_log" field.</summary>
    public const int GgpoLogFieldNumber = 1;
    private bool ggpoLog_;
    /// <summary>
    /// Log GGPO activity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GgpoLog {
      get { return ggpoLog_; }
      set {
        ggpoLog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GgpoLog != other.GgpoLog) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GgpoLog != false) hash ^= GgpoLog.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GgpoLog != false) {
        output.WriteRawTag(8);
        output.WriteBool(GgpoLog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GgpoLog != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugSpec other) {
      if (other == null) {
        return;
      }
      if (other.GgpoLog != false) {
        GgpoLog = other.GgpoLog;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GgpoLog = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRoundHistory : pb::IMessage<PlayerRoundHistory> {
    private static readonly pb::MessageParser<PlayerRoundHistory> _parser = new pb::MessageParser<PlayerRoundHistory>(() => new PlayerRoundHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRoundHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoundHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoundHistory(PlayerRoundHistory other) : this() {
      history_ = other.history_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoundHistory Clone() {
      return new PlayerRoundHistory(this);
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbui.RoundResultType> _repeated_history_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Tbui.RoundResultType) x);
    private readonly pbc::RepeatedField<global::Tbui.RoundResultType> history_ = new pbc::RepeatedField<global::Tbui.RoundResultType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.RoundResultType> History {
      get { return history_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRoundHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRoundHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!history_.Equals(other.history_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= history_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      history_.WriteTo(output, _repeated_history_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += history_.CalculateSize(_repeated_history_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRoundHistory other) {
      if (other == null) {
        return;
      }
      history_.Add(other.history_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            history_.AddEntriesFrom(input, _repeated_history_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoundHistory : pb::IMessage<RoundHistory> {
    private static readonly pb::MessageParser<RoundHistory> _parser = new pb::MessageParser<RoundHistory>(() => new RoundHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbui.TbcharacterReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundHistory(RoundHistory other) : this() {
      playerHistory_ = other.playerHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundHistory Clone() {
      return new RoundHistory(this);
    }

    /// <summary>Field number for the "player_history" field.</summary>
    public const int PlayerHistoryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbui.PlayerRoundHistory> _repeated_playerHistory_codec
        = pb::FieldCodec.ForMessage(10, global::Tbui.PlayerRoundHistory.Parser);
    private readonly pbc::RepeatedField<global::Tbui.PlayerRoundHistory> playerHistory_ = new pbc::RepeatedField<global::Tbui.PlayerRoundHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbui.PlayerRoundHistory> PlayerHistory {
      get { return playerHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerHistory_.Equals(other.playerHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerHistory_.WriteTo(output, _repeated_playerHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerHistory_.CalculateSize(_repeated_playerHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundHistory other) {
      if (other == null) {
        return;
      }
      playerHistory_.Add(other.playerHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerHistory_.AddEntriesFrom(input, _repeated_playerHistory_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
