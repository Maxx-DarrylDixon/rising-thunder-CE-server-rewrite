// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbrpc/tbrpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rising_Thunder_Server_CS.Protobufs.Tbrpc
{

  /// <summary>Holder for reflection information generated from tbrpc/tbrpc.proto</summary>
  public static partial class TbrpcReflection {

    #region Descriptor
    /// <summary>File descriptor for tbrpc/tbrpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TbrpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF0YnJwYy90YnJwYy5wcm90bxIFdGJycGMaIGdvb2dsZS9wcm90b2J1Zi9k",
            "ZXNjcmlwdG9yLnByb3RvIrYBCghNc2dQYXJhbRIgCgNzdHIYASABKAsyEy50",
            "YnJwYy5Nc2dQYXJhbS5TdHISIAoDaW50GAIgASgLMhMudGJycGMuTXNnUGFy",
            "YW0uSW50EiIKA2ZsdBgDIAEoCzIVLnRicnBjLk1zZ1BhcmFtLkZsb2F0GhQK",
            "A1N0chINCgV2YWx1ZRgBIAEoCRoUCgNJbnQSDQoFdmFsdWUYASABKAUaFgoF",
            "RmxvYXQSDQoFdmFsdWUYASABKAIiNAoGTG9jTXNnEgoKAmlkGAEgASgJEh4K",
            "BXBhcmFtGAIgAygLMg8udGJycGMuTXNnUGFyYW0inwEKBlJlc3VsdBIdCgZy",
            "ZXN1bHQYASABKA4yDS50YnJwYy5TdGF0dXMSGgoDbXNnGAQgASgLMg0udGJy",
            "cGMuTG9jTXNnEg8KB2NvbnRlbnQYCiABKAwSGQoRZGVwcmVjYXRlZF9tc2df",
            "aWQYAiABKAkSLgoVZGVwcmVjYXRlZF9tc2dfcGFyYW1zGAMgAygLMg8udGJy",
            "cGMuTXNnUGFyYW0iBwoFRW1wdHkiLwoPRGlzY29yZFVzZXJEYXRhEhAKCHVz",
            "ZXJuYW1lGAEgASgJEgoKAmlkGAIgASgJIiUKBU1vbmV5Eg0KBXdob2xlGAEg",
            "ASgDEg0KBWNlbnRzGAIgASgFIikKD1JwY0NsaWVudENvbmZpZxIWCg5ycGNf",
            "dGltZW91dF9tcxgCIAEoBSKnAQoZTEJUYXJnZXRHQ0VCYWNrZW5kU2Vydmlj",
            "ZRIXCg9zZXJ2aWNlX2FjY291bnQYASABKAkSFQoNYXBpX3Byb3h5X3VybBgC",
            "IAEoCRIPCgdwcm9qZWN0GAMgASgJEhcKD2JhY2tlbmRfc2VydmljZRgEIAEo",
            "CRIaChJwb2xsX2ludGVydmFsX3NlY3MYCiABKAUSFAoMZW5kcG9pbnRfdXJp",
            "GAsgASgJIq0BCg5MQkNsaWVudENvbmZpZxIzCglkaXNjb3ZlcnkYASABKAsy",
            "IC50YnJwYy5MQlRhcmdldEdDRUJhY2tlbmRTZXJ2aWNlEgwKBGhvc3QYAiAD",
            "KAkSJgoGY2xpZW50GAQgASgLMhYudGJycGMuUnBjQ2xpZW50Q29uZmlnEhkK",
            "EWZhaWx1cmVfcmV0cnlfc2VjGAogASgFEhUKDWlkbGVfcGluZ19zZWMYCyAB",
            "KAUqbgoGU3RhdHVzEg0KCVNfU1VDQ0VTUxAAEgsKB1NfRVJST1IQARISCg5T",
            "X1NFUlZFUl9FUlJPUhACEg0KCVNfVElNRU9VVBADEhUKEVNfVFJBTlNQT1JU",
            "X0VSUk9SEAQSDgoJU19VTktOT1dOEIABKvMBCgZBY2Nlc3MSCAoEQU5PThAA",
            "EgkKBUxPR0lOEAESCAoEU0hPUBAKEgkKBU1BVENIEAsSEQoNUlRfRk9SVU1f",
            "VVNFUhAMEg4KClNUQVRTX1JFQUQQEhIHCgNBUFAQFBINCglVU0VSX01HTVQQ",
            "FRITCg9PUkRFUl9SRUFEX1NZTkMQFhIRCg1PUkRFUl9NQU5BR0VSEBcSCQoF",
            "QVVESVQQGBIRCg1SVF9GT1JVTV9NR01UEBkSEAoMUlRfRk9SVU1fTU9EEBoS",
            "DwoLQ09ORklHX1JFQUQQGxIQCgxDT05GSUdfV1JJVEUQHBIJCgVTVVBFUhAe",
            "KicKC1Nlc3Npb25UeXBlEgsKB0RFRkFVTFQQABILCgdHQU1FX1JUEGQ6PwoG",
            "YWNjZXNzEh4uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMYuY4DIAEo",
            "DjINLnRicnBjLkFjY2VzczovCgVub19vcBIeLmdvb2dsZS5wcm90b2J1Zi5N",
            "ZXRob2RPcHRpb25zGLqOAyABKAg6RQoHc2Vzc2lvbhIeLmdvb2dsZS5wcm90",
            "b2J1Zi5NZXRob2RPcHRpb25zGLuOAyABKA4yEi50YnJwYy5TZXNzaW9uVHlw",
            "ZTo1CgpsdWFfY29uZmlnEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRp",
            "b25zGJ2PAyABKAk6LAoDbHVhEh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0",
            "aW9ucxiBkAMgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { pbr::FileDescriptor.DescriptorProtoFileDescriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Status), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Access), typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.SessionType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Parser, new[]{ "Str", "Int", "Flt" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Str), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Str.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Int), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Int.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Float), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Float.Parser, new[]{ "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LocMsg), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LocMsg.Parser, new[]{ "Id", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Result), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Result.Parser, new[]{ "Result_", "Msg", "Content", "DeprecatedMsgId", "DeprecatedMsgParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Empty), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.DiscordUserData), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.DiscordUserData.Parser, new[]{ "Username", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Money), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Money.Parser, new[]{ "Whole", "Cents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.RpcClientConfig), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.RpcClientConfig.Parser, new[]{ "RpcTimeoutMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBTargetGCEBackendService), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBTargetGCEBackendService.Parser, new[]{ "ServiceAccount", "ApiProxyUrl", "Project", "BackendService", "PollIntervalSecs", "EndpointUri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBClientConfig), global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBClientConfig.Parser, new[]{ "Discovery", "Host", "Client", "FailureRetrySec", "IdlePingSec" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Status {
    /// <summary>
    /// The request succeeded.
    /// </summary>
    [pbr::OriginalName("S_SUCCESS")] SSuccess = 0,
    /// <summary>
    /// The request could not succeed because it was invalid.
    /// </summary>
    [pbr::OriginalName("S_ERROR")] SError = 1,
    /// <summary>
    /// The request was valid but the server encountered a problem.
    /// </summary>
    [pbr::OriginalName("S_SERVER_ERROR")] SServerError = 2,
    /// <summary>
    /// The request took too long to complete.
    /// </summary>
    [pbr::OriginalName("S_TIMEOUT")] STimeout = 3,
    /// <summary>
    /// An error occurred at the protocol layer or below.
    /// </summary>
    [pbr::OriginalName("S_TRANSPORT_ERROR")] STransportError = 4,
    /// <summary>
    /// Nothing is (yet) known about this request.
    /// </summary>
    [pbr::OriginalName("S_UNKNOWN")] SUnknown = 128,
  }

  /// <summary>
  /// Types of access control for RPC methods.
  /// </summary>
  public enum Access {
    /// <summary>
    /// Anonymous; allowed for unauthenticated sessions.
    /// </summary>
    [pbr::OriginalName("ANON")] Anon = 0,
    /// <summary>
    /// Access that merely requires an authenticated session.
    /// </summary>
    [pbr::OriginalName("LOGIN")] Login = 1,
    /// <summary>
    /// Access all user-facing shop methods; manage stored payments,
    /// place orders, check status of orders.
    /// </summary>
    [pbr::OriginalName("SHOP")] Shop = 10,
    /// <summary>
    /// Able to login and play the RisingThunder game client and call match-making functions.
    /// </summary>
    [pbr::OriginalName("MATCH")] Match = 11,
    /// <summary>
    /// Allowed to use the RisingThunder.com user forum.
    /// </summary>
    [pbr::OriginalName("RT_FORUM_USER")] RtForumUser = 12,
    /// <summary>
    /// Invoke stats reporting queries.
    /// </summary>
    [pbr::OriginalName("STATS_READ")] StatsRead = 18,
    /// <summary>
    /// Server account that can read global metadata.
    /// </summary>
    [pbr::OriginalName("APP")] App = 20,
    /// <summary>
    /// Create, modify, and search user accounts.
    /// </summary>
    [pbr::OriginalName("USER_MGMT")] UserMgmt = 21,
    /// <summary>
    /// Search and sync purchase orders.
    /// </summary>
    [pbr::OriginalName("ORDER_READ_SYNC")] OrderReadSync = 22,
    /// <summary>
    /// Void and refund purchase orders.
    /// </summary>
    [pbr::OriginalName("ORDER_MANAGER")] OrderManager = 23,
    /// <summary>
    /// View the audit log.
    /// </summary>
    [pbr::OriginalName("AUDIT")] Audit = 24,
    /// <summary>
    /// RT Forum administrator
    /// </summary>
    [pbr::OriginalName("RT_FORUM_MGMT")] RtForumMgmt = 25,
    /// <summary>
    /// RT Forum moderator
    /// </summary>
    [pbr::OriginalName("RT_FORUM_MOD")] RtForumMod = 26,
    /// <summary>
    /// Read &amp; write run-time config state.
    /// </summary>
    [pbr::OriginalName("CONFIG_READ")] ConfigRead = 27,
    [pbr::OriginalName("CONFIG_WRITE")] ConfigWrite = 28,
    /// <summary>
    /// Super-user who is granted all rights.
    /// </summary>
    [pbr::OriginalName("SUPER")] Super = 30,
  }

  public enum SessionType {
    /// <summary>
    /// Default session type, used for web sessions.
    /// </summary>
    [pbr::OriginalName("DEFAULT")] Default = 0,
    /// <summary>
    /// Rising Thunder game session.
    /// </summary>
    [pbr::OriginalName("GAME_RT")] GameRt = 100,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Parameters to a message.  Using a message type
  /// for each primitive works around protobuf-net's limitation
  /// of not recording unset primitives.
  /// </summary>
  public sealed partial class MsgParam : pb::IMessage<MsgParam> {
    private static readonly pb::MessageParser<MsgParam> _parser = new pb::MessageParser<MsgParam>(() => new MsgParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgParam(MsgParam other) : this() {
      Str = other.str_ != null ? other.Str.Clone() : null;
      Int = other.int_ != null ? other.Int.Clone() : null;
      Flt = other.flt_ != null ? other.Flt.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgParam Clone() {
      return new MsgParam(this);
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Str str_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Str Str {
      get { return str_; }
      set {
        str_ = value;
      }
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Int int_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Int Int {
      get { return int_; }
      set {
        int_ = value;
      }
    }

    /// <summary>Field number for the "flt" field.</summary>
    public const int FltFieldNumber = 3;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Float flt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Float Flt {
      get { return flt_; }
      set {
        flt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Str, other.Str)) return false;
      if (!object.Equals(Int, other.Int)) return false;
      if (!object.Equals(Flt, other.Flt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (str_ != null) hash ^= Str.GetHashCode();
      if (int_ != null) hash ^= Int.GetHashCode();
      if (flt_ != null) hash ^= Flt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (str_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Str);
      }
      if (int_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Int);
      }
      if (flt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Flt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (str_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Str);
      }
      if (int_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int);
      }
      if (flt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgParam other) {
      if (other == null) {
        return;
      }
      if (other.str_ != null) {
        if (str_ == null) {
          str_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Str();
        }
        Str.MergeFrom(other.Str);
      }
      if (other.int_ != null) {
        if (int_ == null) {
          int_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Int();
        }
        Int.MergeFrom(other.Int);
      }
      if (other.flt_ != null) {
        if (flt_ == null) {
          flt_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Float();
        }
        Flt.MergeFrom(other.Flt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (str_ == null) {
              str_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Str();
            }
            input.ReadMessage(str_);
            break;
          }
          case 18: {
            if (int_ == null) {
              int_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Int();
            }
            input.ReadMessage(int_);
            break;
          }
          case 26: {
            if (flt_ == null) {
              flt_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Types.Float();
            }
            input.ReadMessage(flt_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MsgParam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Str : pb::IMessage<Str> {
        private static readonly pb::MessageParser<Str> _parser = new pb::MessageParser<Str>(() => new Str());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Str> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Str() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Str(Str other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Str Clone() {
          return new Str(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Str);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Str other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Str other) {
          if (other == null) {
            return;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Int : pb::IMessage<Int> {
        private static readonly pb::MessageParser<Int> _parser = new pb::MessageParser<Int>(() => new Int());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Int> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int(Int other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Int Clone() {
          return new Int(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private int value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Int);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Int other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Int other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Value = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Float : pb::IMessage<Float> {
        private static readonly pb::MessageParser<Float> _parser = new pb::MessageParser<Float>(() => new Float());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Float> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Float() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Float(Float other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Float Clone() {
          return new Float(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private float value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Float);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Float other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Float other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0F) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Value = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A localized message and positional values.
  /// </summary>
  public sealed partial class LocMsg : pb::IMessage<LocMsg> {
    private static readonly pb::MessageParser<LocMsg> _parser = new pb::MessageParser<LocMsg>(() => new LocMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocMsg(LocMsg other) : this() {
      id_ = other.id_;
      param_ = other.param_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocMsg Clone() {
      return new LocMsg(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam> _repeated_param_codec
        = pb::FieldCodec.ForMessage(18, global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam> param_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam> Param {
      get { return param_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!param_.Equals(other.param_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= param_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      param_.WriteTo(output, _repeated_param_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += param_.CalculateSize(_repeated_param_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      param_.Add(other.param_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      result_ = other.result_;
      Msg = other.msg_ != null ? other.Msg.Clone() : null;
      content_ = other.content_;
      deprecatedMsgId_ = other.deprecatedMsgId_;
      deprecatedMsgParams_ = other.deprecatedMsgParams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int Result_FieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Status result_ = 0;
    /// <summary>
    /// Result code of the invocation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Status Result_ {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LocMsg msg_;
    /// <summary>
    /// result message, usually set when result != S_SUCCESS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LocMsg Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 10;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    /// Serialized message result of invoked method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecated_msg_id" field.</summary>
    public const int DeprecatedMsgIdFieldNumber = 2;
    private string deprecatedMsgId_ = "";
    /// <summary>
    /// deprecated fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeprecatedMsgId {
      get { return deprecatedMsgId_; }
      set {
        deprecatedMsgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecated_msg_params" field.</summary>
    public const int DeprecatedMsgParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam> _repeated_deprecatedMsgParams_codec
        = pb::FieldCodec.ForMessage(26, global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam> deprecatedMsgParams_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.MsgParam> DeprecatedMsgParams {
      get { return deprecatedMsgParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result_ != other.Result_) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      if (Content != other.Content) return false;
      if (DeprecatedMsgId != other.DeprecatedMsgId) return false;
      if(!deprecatedMsgParams_.Equals(other.deprecatedMsgParams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result_ != 0) hash ^= Result_.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (DeprecatedMsgId.Length != 0) hash ^= DeprecatedMsgId.GetHashCode();
      hash ^= deprecatedMsgParams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result_ != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result_);
      }
      if (DeprecatedMsgId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeprecatedMsgId);
      }
      deprecatedMsgParams_.WriteTo(output, _repeated_deprecatedMsgParams_codec);
      if (msg_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result_);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (DeprecatedMsgId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeprecatedMsgId);
      }
      size += deprecatedMsgParams_.CalculateSize(_repeated_deprecatedMsgParams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Result_ != 0) {
        Result_ = other.Result_;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          msg_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LocMsg();
        }
        Msg.MergeFrom(other.Msg);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.DeprecatedMsgId.Length != 0) {
        DeprecatedMsgId = other.DeprecatedMsgId;
      }
      deprecatedMsgParams_.Add(other.deprecatedMsgParams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            result_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.Status) input.ReadEnum();
            break;
          }
          case 18: {
            DeprecatedMsgId = input.ReadString();
            break;
          }
          case 26: {
            deprecatedMsgParams_.AddEntriesFrom(input, _repeated_deprecatedMsgParams_codec);
            break;
          }
          case 34: {
            if (msg_ == null) {
              msg_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LocMsg();
            }
            input.ReadMessage(msg_);
            break;
          }
          case 82: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used for rpc methods that take no arguments or return
  /// no result content.  Since all empty messages serialize
  /// the same, we can create types as needed when extending an
  /// existing method.
  /// </summary>
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// NEW in community edition
  /// </summary>
  public sealed partial class DiscordUserData : pb::IMessage<DiscordUserData> {
    private static readonly pb::MessageParser<DiscordUserData> _parser = new pb::MessageParser<DiscordUserData>(() => new DiscordUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscordUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscordUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscordUserData(DiscordUserData other) : this() {
      username_ = other.username_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscordUserData Clone() {
      return new DiscordUserData(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// user id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscordUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscordUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscordUserData other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A monetary value.  We can't represent these with float values
  /// due to rounding errors for values like 0.1.  Another option is
  /// representing everything in cents, but that can lead to bugs.
  /// This is the most unambiguous wire format.
  ///
  /// SIGN: When the value is negative, both fields express the sign.
  ///	 For example, -$2.25 would be (-2), (-25).
  ///	 The correctly signed value in cents can always be computed by:
  ///
  ///   (Whole * 100) + Cents
  ///
  /// The value is invalid if signs differ, or Cents is out of range.
  ///
  /// Note also that the value cannot be interpreted without a
  /// relevant currency, which is always taken from context.
  /// </summary>
  public sealed partial class Money : pb::IMessage<Money> {
    private static readonly pb::MessageParser<Money> _parser = new pb::MessageParser<Money>(() => new Money());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Money> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money(Money other) : this() {
      whole_ = other.whole_;
      cents_ = other.cents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money Clone() {
      return new Money(this);
    }

    /// <summary>Field number for the "whole" field.</summary>
    public const int WholeFieldNumber = 1;
    private long whole_;
    /// <summary>
    /// Amount of whole units of currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Whole {
      get { return whole_; }
      set {
        whole_ = value;
      }
    }

    /// <summary>Field number for the "cents" field.</summary>
    public const int CentsFieldNumber = 2;
    private int cents_;
    /// <summary>
    /// Amount of 1/100 units of currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cents {
      get { return cents_; }
      set {
        cents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Money);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Money other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Whole != other.Whole) return false;
      if (Cents != other.Cents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Whole != 0L) hash ^= Whole.GetHashCode();
      if (Cents != 0) hash ^= Cents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Whole != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Whole);
      }
      if (Cents != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Whole != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Whole);
      }
      if (Cents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Money other) {
      if (other == null) {
        return;
      }
      if (other.Whole != 0L) {
        Whole = other.Whole;
      }
      if (other.Cents != 0) {
        Cents = other.Cents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Whole = input.ReadInt64();
            break;
          }
          case 16: {
            Cents = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Limit on idle connections per Match API server.
  /// int32 max_idle_conns_per_host = 1	;
  /// </summary>
  public sealed partial class RpcClientConfig : pb::IMessage<RpcClientConfig> {
    private static readonly pb::MessageParser<RpcClientConfig> _parser = new pb::MessageParser<RpcClientConfig>(() => new RpcClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcClientConfig(RpcClientConfig other) : this() {
      rpcTimeoutMs_ = other.rpcTimeoutMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcClientConfig Clone() {
      return new RpcClientConfig(this);
    }

    /// <summary>Field number for the "rpc_timeout_ms" field.</summary>
    public const int RpcTimeoutMsFieldNumber = 2;
    private int rpcTimeoutMs_;
    /// <summary>
    /// How long to wait for RPCs to complete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcTimeoutMs {
      get { return rpcTimeoutMs_; }
      set {
        rpcTimeoutMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcTimeoutMs != other.RpcTimeoutMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcTimeoutMs != 0) hash ^= RpcTimeoutMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcTimeoutMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RpcTimeoutMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcTimeoutMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.RpcTimeoutMs != 0) {
        RpcTimeoutMs = other.RpcTimeoutMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            RpcTimeoutMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LBTargetGCEBackendService : pb::IMessage<LBTargetGCEBackendService> {
    private static readonly pb::MessageParser<LBTargetGCEBackendService> _parser = new pb::MessageParser<LBTargetGCEBackendService>(() => new LBTargetGCEBackendService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LBTargetGCEBackendService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LBTargetGCEBackendService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LBTargetGCEBackendService(LBTargetGCEBackendService other) : this() {
      serviceAccount_ = other.serviceAccount_;
      apiProxyUrl_ = other.apiProxyUrl_;
      project_ = other.project_;
      backendService_ = other.backendService_;
      pollIntervalSecs_ = other.pollIntervalSecs_;
      endpointUri_ = other.endpointUri_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LBTargetGCEBackendService Clone() {
      return new LBTargetGCEBackendService(this);
    }

    /// <summary>Field number for the "service_account" field.</summary>
    public const int ServiceAccountFieldNumber = 1;
    private string serviceAccount_ = "";
    /// <summary>
    /// Name of the service account to get an access token for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccount {
      get { return serviceAccount_; }
      set {
        serviceAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "api_proxy_url" field.</summary>
    public const int ApiProxyUrlFieldNumber = 2;
    private string apiProxyUrl_ = "";
    /// <summary>
    /// HTTPS proxy URL to use for API calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiProxyUrl {
      get { return apiProxyUrl_; }
      set {
        apiProxyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 3;
    private string project_ = "";
    /// <summary>
    /// Name of Google project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backend_service" field.</summary>
    public const int BackendServiceFieldNumber = 4;
    private string backendService_ = "";
    /// <summary>
    /// Name of the backend service to discover healthy instances in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackendService {
      get { return backendService_; }
      set {
        backendService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "poll_interval_secs" field.</summary>
    public const int PollIntervalSecsFieldNumber = 10;
    private int pollIntervalSecs_;
    /// <summary>
    /// How often to poll (fuzzed by 10%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PollIntervalSecs {
      get { return pollIntervalSecs_; }
      set {
        pollIntervalSecs_ = value;
      }
    }

    /// <summary>Field number for the "endpoint_uri" field.</summary>
    public const int EndpointUriFieldNumber = 11;
    private string endpointUri_ = "";
    /// <summary>
    /// URI prefix for requests to this endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndpointUri {
      get { return endpointUri_; }
      set {
        endpointUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LBTargetGCEBackendService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LBTargetGCEBackendService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceAccount != other.ServiceAccount) return false;
      if (ApiProxyUrl != other.ApiProxyUrl) return false;
      if (Project != other.Project) return false;
      if (BackendService != other.BackendService) return false;
      if (PollIntervalSecs != other.PollIntervalSecs) return false;
      if (EndpointUri != other.EndpointUri) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceAccount.Length != 0) hash ^= ServiceAccount.GetHashCode();
      if (ApiProxyUrl.Length != 0) hash ^= ApiProxyUrl.GetHashCode();
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (BackendService.Length != 0) hash ^= BackendService.GetHashCode();
      if (PollIntervalSecs != 0) hash ^= PollIntervalSecs.GetHashCode();
      if (EndpointUri.Length != 0) hash ^= EndpointUri.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceAccount);
      }
      if (ApiProxyUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ApiProxyUrl);
      }
      if (Project.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Project);
      }
      if (BackendService.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BackendService);
      }
      if (PollIntervalSecs != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PollIntervalSecs);
      }
      if (EndpointUri.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(EndpointUri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccount);
      }
      if (ApiProxyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiProxyUrl);
      }
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (BackendService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackendService);
      }
      if (PollIntervalSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PollIntervalSecs);
      }
      if (EndpointUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointUri);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LBTargetGCEBackendService other) {
      if (other == null) {
        return;
      }
      if (other.ServiceAccount.Length != 0) {
        ServiceAccount = other.ServiceAccount;
      }
      if (other.ApiProxyUrl.Length != 0) {
        ApiProxyUrl = other.ApiProxyUrl;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.BackendService.Length != 0) {
        BackendService = other.BackendService;
      }
      if (other.PollIntervalSecs != 0) {
        PollIntervalSecs = other.PollIntervalSecs;
      }
      if (other.EndpointUri.Length != 0) {
        EndpointUri = other.EndpointUri;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceAccount = input.ReadString();
            break;
          }
          case 18: {
            ApiProxyUrl = input.ReadString();
            break;
          }
          case 26: {
            Project = input.ReadString();
            break;
          }
          case 34: {
            BackendService = input.ReadString();
            break;
          }
          case 80: {
            PollIntervalSecs = input.ReadInt32();
            break;
          }
          case 90: {
            EndpointUri = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LBClientConfig : pb::IMessage<LBClientConfig> {
    private static readonly pb::MessageParser<LBClientConfig> _parser = new pb::MessageParser<LBClientConfig>(() => new LBClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LBClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LBClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LBClientConfig(LBClientConfig other) : this() {
      Discovery = other.discovery_ != null ? other.Discovery.Clone() : null;
      host_ = other.host_.Clone();
      Client = other.client_ != null ? other.Client.Clone() : null;
      failureRetrySec_ = other.failureRetrySec_;
      idlePingSec_ = other.idlePingSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LBClientConfig Clone() {
      return new LBClientConfig(this);
    }

    /// <summary>Field number for the "discovery" field.</summary>
    public const int DiscoveryFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBTargetGCEBackendService discovery_;
    /// <summary>
    /// Backend service to use for API discovery monitor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBTargetGCEBackendService Discovery {
      get { return discovery_; }
      set {
        discovery_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_host_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> host_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Static list of hosts to connect to.  Only one of [backend_service, host*] may be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Host {
      get { return host_; }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 4;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.RpcClientConfig client_;
    /// <summary>
    /// Per-host connection pool settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.RpcClientConfig Client {
      get { return client_; }
      set {
        client_ = value;
      }
    }

    /// <summary>Field number for the "failure_retry_sec" field.</summary>
    public const int FailureRetrySecFieldNumber = 10;
    private int failureRetrySec_;
    /// <summary>
    /// After failure to invoke or ping a backend, how long before we will try again.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FailureRetrySec {
      get { return failureRetrySec_; }
      set {
        failureRetrySec_ = value;
      }
    }

    /// <summary>Field number for the "idle_ping_sec" field.</summary>
    public const int IdlePingSecFieldNumber = 11;
    private int idlePingSec_;
    /// <summary>
    /// Ping a backend before invoking if it hasn't been used in this long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdlePingSec {
      get { return idlePingSec_; }
      set {
        idlePingSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LBClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LBClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Discovery, other.Discovery)) return false;
      if(!host_.Equals(other.host_)) return false;
      if (!object.Equals(Client, other.Client)) return false;
      if (FailureRetrySec != other.FailureRetrySec) return false;
      if (IdlePingSec != other.IdlePingSec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (discovery_ != null) hash ^= Discovery.GetHashCode();
      hash ^= host_.GetHashCode();
      if (client_ != null) hash ^= Client.GetHashCode();
      if (FailureRetrySec != 0) hash ^= FailureRetrySec.GetHashCode();
      if (IdlePingSec != 0) hash ^= IdlePingSec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (discovery_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Discovery);
      }
      host_.WriteTo(output, _repeated_host_codec);
      if (client_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Client);
      }
      if (FailureRetrySec != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FailureRetrySec);
      }
      if (IdlePingSec != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(IdlePingSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (discovery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discovery);
      }
      size += host_.CalculateSize(_repeated_host_codec);
      if (client_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Client);
      }
      if (FailureRetrySec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureRetrySec);
      }
      if (IdlePingSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdlePingSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LBClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.discovery_ != null) {
        if (discovery_ == null) {
          discovery_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBTargetGCEBackendService();
        }
        Discovery.MergeFrom(other.Discovery);
      }
      host_.Add(other.host_);
      if (other.client_ != null) {
        if (client_ == null) {
          client_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.RpcClientConfig();
        }
        Client.MergeFrom(other.Client);
      }
      if (other.FailureRetrySec != 0) {
        FailureRetrySec = other.FailureRetrySec;
      }
      if (other.IdlePingSec != 0) {
        IdlePingSec = other.IdlePingSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (discovery_ == null) {
              discovery_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.LBTargetGCEBackendService();
            }
            input.ReadMessage(discovery_);
            break;
          }
          case 18: {
            host_.AddEntriesFrom(input, _repeated_host_codec);
            break;
          }
          case 34: {
            if (client_ == null) {
              client_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.RpcClientConfig();
            }
            input.ReadMessage(client_);
            break;
          }
          case 80: {
            FailureRetrySec = input.ReadInt32();
            break;
          }
          case 88: {
            IdlePingSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
