// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbadmin/match.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rising_Thunder_Server_CS.Protobufs.Tbadmin {

  /// <summary>Holder for reflection information generated from tbadmin/match.proto</summary>
  public static partial class MatchReflection {

    #region Descriptor
    /// <summary>File descriptor for tbadmin/match.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0YmFkbWluL21hdGNoLnByb3RvEgd0YmFkbWluGhF0YnJwYy90YnJwYy5w",
            "cm90bxoTdGJtYXRjaC9tYXRjaC5wcm90bxoTdGJtYXRjaC9sb2JieS5wcm90",
            "byLVAgoJUXVldWVVc2VyEhIKCmFjY291bnRfaWQYASABKAMSDgoGaGFuZGxl",
            "GAIgASgJEhUKDWJ1aWxkX3ZlcnNpb24YAyABKAkSJQoHbmV0d29yaxgKIAEo",
            "CzIULnRibWF0Y2guTmV0d29ya0FkZHISKQoJY2hhcmFjdGVyGAsgASgLMhYu",
            "dGJtYXRjaC5DaGFyYWN0ZXJTcGVjEhEKCXdhaXRfdGltZRgUIAEoARIOCgZy",
            "YXRpbmcYFSABKAESEwoLbGFzdF9vcHBfaWQYFyABKAMSFwoPbGFzdF9vcHBf",
            "aGFuZGxlGBggASgJEhYKDmNvbnRpbmVudF9jb2RlGBkgASgJEhAKCGxhdGl0",
            "dWRlGBogASgBEhEKCWxvbmdpdHVkZRgbIAEoARIPCgdlY2hlbG9uGB4gASgF",
            "EgwKBHRpZXIYHyABKAUSDgoGcG9pbnRzGCAgASgFIsMBCgxMb2JieVN1bW1h",
            "cnkSHQoFbG9iYnkYASABKAsyDi50Ym1hdGNoLkxvYmJ5EhUKDWJ1aWxkX3Zl",
            "cnNpb24YCiABKAkSDwoHbWVtYmVycxgLIAEoBRIYChBjcmVhdGVfdGltZV91",
            "bml4GB8gASgDEh0KFWxhc3RfYWN0aXZlX3RpbWVfdW5peBggIAEoAxIYChBf",
            "X2RlcHJlY2F0ZWRfYWdlGBUgASgBEhkKEV9fZGVwcmVjYXRlZF9pZGxlGBYg",
            "ASgBIl8KC0FjdGl2ZU1hdGNoEhAKCG1hdGNoX2lkGAEgASgDEiUKBGRlc2MY",
            "AiABKAsyFy50Ym1hdGNoLkdhbWVEZXNjcmlwdG9yEhcKD3N0YXJ0X3RpbWVf",
            "dW5peBgDIAEoAyK7AwoLUmVjZW50TWF0Y2gSEAoIbWF0Y2hfaWQYASABKAMS",
            "FwoPc3RhcnRfdGltZV91bml4GAIgASgDEhQKDGR1cmF0aW9uX3NlYxgDIAEo",
            "ARINCgVyYXRlZBgEIAEoCBIVCg1idWlsZF92ZXJzaW9uGAUgASgJEgsKA2xv",
            "ZxgGIAEoCRIRCglhYmFuZG9uZWQYByABKAgSKwoGcGxheWVyGAogAygLMhsu",
            "dGJhZG1pbi5SZWNlbnRNYXRjaC5QbGF5ZXISJwoEZ2FtZRgUIAMoCzIZLnRi",
            "YWRtaW4uUmVjZW50TWF0Y2guR2FtZRpjCgZQbGF5ZXISEgoKYWNjb3VudF9p",
            "ZBgBIAEoAxIOCgZoYW5kbGUYAiABKAkSEQoJZ2FtZV9jaGFyGAMgASgJEg4K",
            "Bndpbm5lchgEIAEoCBISCgpkaXNjb25uZWN0GAUgASgIGmoKBEdhbWUSIQoE",
            "Z2FtZRgBIAEoCzITLnRibWF0Y2guR2FtZUNvbmZpZxIQCgh3aW5fc2xvdBgC",
            "IAEoBRIXCg9zdGFydF90aW1lX3VuaXgYAyABKAMSFAoMZHVyYXRpb25fc2Vj",
            "GAQgASgBItkDCgtNYXRjaFBsYXllchISCgphY2NvdW50X2lkGAEgASgDEg4K",
            "BmhhbmRsZRgCIAEoCRIYChBjcmVhdGVfdGltZV91bml4GAMgASgDEhgKEG1v",
            "ZGlmeV90aW1lX3VuaXgYBCABKAMSNgoMc2VydmVyX3N0YXRzGAogASgLMiAu",
            "dGJhZG1pbi5NYXRjaFBsYXllci5TZXJ2ZXJTdGF0cxIqCgxwbGF5ZXJfc3Rh",
            "dHMYCyABKAsyFC50Ym1hdGNoLlBsYXllclN0YXRzEisKBnJhdGluZxgUIAMo",
            "CzIbLnRiYWRtaW4uTWF0Y2hQbGF5ZXIuUmF0aW5nGkYKC1NlcnZlclN0YXRz",
            "EhAKCGF0dGVtcHRzGAEgASgFEhAKCGNvbXBsZXRlGAIgASgFEhMKC2Rpc2Nv",
            "bm5lY3RzGAMgASgFGpgBCgZSYXRpbmcSIAoEdHlwZRgBIAEoDjISLnRibWF0",
            "Y2guTWF0Y2hUeXBlEg4KBnJhdGluZxgCIAEoARIRCglkZXZpYXRpb24YAyAB",
            "KAESEgoKdm9sYXRpbGl0eRgEIAEoARIWCg5zZXNzaW9uX3JhdGluZxgFIAEo",
            "ARIdChVsYXN0X3JhdGluZ190aW1lX3VuaXgYCiABKAMiPgoZR2V0TWF0Y2hR",
            "dWV1ZVVzZXJzUmVxdWVzdBIhCgVxdWV1ZRgBIAEoDjISLnRibWF0Y2guTWF0",
            "Y2hUeXBlIjwKGEdldE1hdGNoUXVldWVVc2Vyc1Jlc3VsdBIgCgR1c2VyGAEg",
            "AygLMhIudGJhZG1pbi5RdWV1ZVVzZXIiIgoRR2V0TG9iYmllc1JlcXVlc3QS",
            "DQoFbGltaXQYAiABKAUiOAoQR2V0TG9iYmllc1Jlc3VsdBIkCgVsb2JieRgB",
            "IAMoCzIVLnRiYWRtaW4uTG9iYnlTdW1tYXJ5IiMKD0dldExvYmJ5UmVxdWVz",
            "dBIQCghsb2JieV9pZBgBIAEoAyI2Cg5HZXRMb2JieVJlc3VsdBIkCgVsb2Ji",
            "eRgBIAEoCzIVLnRiYWRtaW4uTG9iYnlTdW1tYXJ5IlAKF0dldEFjdGl2ZU1h",
            "dGNoZXNSZXF1ZXN0EiYKCm1hdGNoX3R5cGUYASABKA4yEi50Ym1hdGNoLk1h",
            "dGNoVHlwZRINCgVsaW1pdBgCIAEoBSI9ChZHZXRBY3RpdmVNYXRjaGVzUmVz",
            "dWx0EiMKBW1hdGNoGAEgAygLMhQudGJhZG1pbi5BY3RpdmVNYXRjaCJRChVH",
            "ZXRBY3RpdmVNYXRjaFJlcXVlc3QSJgoKbWF0Y2hfdHlwZRgBIAEoDjISLnRi",
            "bWF0Y2guTWF0Y2hUeXBlEhAKCG1hdGNoX2lkGAIgASgDIjsKFEdldEFjdGl2",
            "ZU1hdGNoUmVzdWx0EiMKBW1hdGNoGAEgASgLMhQudGJhZG1pbi5BY3RpdmVN",
            "YXRjaCJrChdHZXRSZWNlbnRNYXRjaGVzUmVxdWVzdBImCgptYXRjaF90eXBl",
            "GAEgASgOMhIudGJtYXRjaC5NYXRjaFR5cGUSDQoFbGltaXQYAiABKAUSGQoR",
            "cGxheWVyX2FjY291bnRfaWQYAyABKAMiPQoWR2V0UmVjZW50TWF0Y2hlc1Jl",
            "c3VsdBIjCgVtYXRjaBgBIAMoCzIULnRiYWRtaW4uUmVjZW50TWF0Y2giKQoV",
            "R2V0TWF0Y2hEZXRhaWxSZXF1ZXN0EhAKCG1hdGNoX2lkGAEgASgDIjsKFEdl",
            "dE1hdGNoRGV0YWlsUmVzdWx0EiMKBW1hdGNoGAEgASgLMhQudGJhZG1pbi5S",
            "ZWNlbnRNYXRjaCIsChZHZXRQbGF5ZXJEZXRhaWxSZXF1ZXN0EhIKCmFjY291",
            "bnRfaWQYASABKAMiPQoVR2V0UGxheWVyRGV0YWlsUmVzdWx0EiQKBnBsYXll",
            "chgBIAEoCzIULnRiYWRtaW4uTWF0Y2hQbGF5ZXIyyAUKEU1hdGNoQWRtaW5T",
            "ZXJ2aWNlEmEKEkdldE1hdGNoUXVldWVVc2VycxIiLnRiYWRtaW4uR2V0TWF0",
            "Y2hRdWV1ZVVzZXJzUmVxdWVzdBohLnRiYWRtaW4uR2V0TWF0Y2hRdWV1ZVVz",
            "ZXJzUmVzdWx0IgTI8xgSEkkKCkdldExvYmJpZXMSGi50YmFkbWluLkdldExv",
            "YmJpZXNSZXF1ZXN0GhkudGJhZG1pbi5HZXRMb2JiaWVzUmVzdWx0IgTI8xgS",
            "EkMKCEdldExvYmJ5EhgudGJhZG1pbi5HZXRMb2JieVJlcXVlc3QaFy50YmFk",
            "bWluLkdldExvYmJ5UmVzdWx0IgTI8xgSElsKEEdldEFjdGl2ZU1hdGNoZXMS",
            "IC50YmFkbWluLkdldEFjdGl2ZU1hdGNoZXNSZXF1ZXN0Gh8udGJhZG1pbi5H",
            "ZXRBY3RpdmVNYXRjaGVzUmVzdWx0IgTI8xgSElUKDkdldEFjdGl2ZU1hdGNo",
            "Eh4udGJhZG1pbi5HZXRBY3RpdmVNYXRjaFJlcXVlc3QaHS50YmFkbWluLkdl",
            "dEFjdGl2ZU1hdGNoUmVzdWx0IgTI8xgSElsKEEdldFJlY2VudE1hdGNoZXMS",
            "IC50YmFkbWluLkdldFJlY2VudE1hdGNoZXNSZXF1ZXN0Gh8udGJhZG1pbi5H",
            "ZXRSZWNlbnRNYXRjaGVzUmVzdWx0IgTI8xgSElUKDkdldE1hdGNoRGV0YWls",
            "Eh4udGJhZG1pbi5HZXRNYXRjaERldGFpbFJlcXVlc3QaHS50YmFkbWluLkdl",
            "dE1hdGNoRGV0YWlsUmVzdWx0IgTI8xgSElgKD0dldFBsYXllckRldGFpbBIf",
            "LnRiYWRtaW4uR2V0UGxheWVyRGV0YWlsUmVxdWVzdBoeLnRiYWRtaW4uR2V0",
            "UGxheWVyRGV0YWlsUmVzdWx0IgTI8xgSYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Rising_Thunder_Server_CS.Protobufs.Tbrpc.TbrpcReflection.Descriptor, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchReflection.Descriptor, global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.LobbyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser.Parser, new[]{ "AccountId", "Handle", "BuildVersion", "Network", "Character", "WaitTime", "Rating", "LastOppId", "LastOppHandle", "ContinentCode", "Latitude", "Longitude", "Echelon", "Tier", "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary.Parser, new[]{ "Lobby", "BuildVersion", "Members", "CreateTimeUnix", "LastActiveTimeUnix", "DeprecatedAge", "DeprecatedIdle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch.Parser, new[]{ "MatchId", "Desc", "StartTimeUnix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Parser, new[]{ "MatchId", "StartTimeUnix", "DurationSec", "Rated", "BuildVersion", "Log", "Abandoned", "Player", "Game" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player.Parser, new[]{ "AccountId", "Handle", "GameChar", "Winner", "Disconnect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game.Parser, new[]{ "Game_", "WinSlot", "StartTimeUnix", "DurationSec" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Parser, new[]{ "AccountId", "Handle", "CreateTimeUnix", "ModifyTimeUnix", "ServerStats", "PlayerStats", "Rating" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.ServerStats), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.ServerStats.Parser, new[]{ "Attempts", "Complete", "Disconnects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating.Parser, new[]{ "Type", "Rating_", "Deviation", "Volatility", "SessionRating", "LastRatingTimeUnix" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchQueueUsersRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchQueueUsersRequest.Parser, new[]{ "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchQueueUsersResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchQueueUsersResult.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbiesRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbiesRequest.Parser, new[]{ "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbiesResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbiesResult.Parser, new[]{ "Lobby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbyRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbyRequest.Parser, new[]{ "LobbyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbyResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetLobbyResult.Parser, new[]{ "Lobby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchesRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchesRequest.Parser, new[]{ "MatchType", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchesResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchesResult.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchRequest.Parser, new[]{ "MatchType", "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetActiveMatchResult.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetRecentMatchesRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetRecentMatchesRequest.Parser, new[]{ "MatchType", "Limit", "PlayerAccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetRecentMatchesResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetRecentMatchesResult.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchDetailRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchDetailRequest.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchDetailResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetMatchDetailResult.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetPlayerDetailRequest), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetPlayerDetailRequest.Parser, new[]{ "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetPlayerDetailResult), global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.GetPlayerDetailResult.Parser, new[]{ "Player" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QueueUser : pb::IMessage<QueueUser> {
    private static readonly pb::MessageParser<QueueUser> _parser = new pb::MessageParser<QueueUser>(() => new QueueUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueUser(QueueUser other) : this() {
      accountId_ = other.accountId_;
      handle_ = other.handle_;
      buildVersion_ = other.buildVersion_;
      Network = other.network_ != null ? other.Network.Clone() : null;
      Character = other.character_ != null ? other.Character.Clone() : null;
      waitTime_ = other.waitTime_;
      rating_ = other.rating_;
      lastOppId_ = other.lastOppId_;
      lastOppHandle_ = other.lastOppHandle_;
      continentCode_ = other.continentCode_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      echelon_ = other.echelon_;
      tier_ = other.tier_;
      points_ = other.points_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueUser Clone() {
      return new QueueUser(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 3;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 10;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr network_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 11;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "wait_time" field.</summary>
    public const int WaitTimeFieldNumber = 20;
    private double waitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 21;
    private double rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "last_opp_id" field.</summary>
    public const int LastOppIdFieldNumber = 23;
    private long lastOppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastOppId {
      get { return lastOppId_; }
      set {
        lastOppId_ = value;
      }
    }

    /// <summary>Field number for the "last_opp_handle" field.</summary>
    public const int LastOppHandleFieldNumber = 24;
    private string lastOppHandle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastOppHandle {
      get { return lastOppHandle_; }
      set {
        lastOppHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "continent_code" field.</summary>
    public const int ContinentCodeFieldNumber = 25;
    private string continentCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContinentCode {
      get { return continentCode_; }
      set {
        continentCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 26;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 27;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "echelon" field.</summary>
    public const int EchelonFieldNumber = 30;
    private int echelon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Echelon {
      get { return echelon_; }
      set {
        echelon_ = value;
      }
    }

    /// <summary>Field number for the "tier" field.</summary>
    public const int TierFieldNumber = 31;
    private int tier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tier {
      get { return tier_; }
      set {
        tier_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 32;
    private int points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Handle != other.Handle) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (!object.Equals(Character, other.Character)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WaitTime, other.WaitTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rating, other.Rating)) return false;
      if (LastOppId != other.LastOppId) return false;
      if (LastOppHandle != other.LastOppHandle) return false;
      if (ContinentCode != other.ContinentCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (Echelon != other.Echelon) return false;
      if (Tier != other.Tier) return false;
      if (Points != other.Points) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (character_ != null) hash ^= Character.GetHashCode();
      if (WaitTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WaitTime);
      if (Rating != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rating);
      if (LastOppId != 0L) hash ^= LastOppId.GetHashCode();
      if (LastOppHandle.Length != 0) hash ^= LastOppHandle.GetHashCode();
      if (ContinentCode.Length != 0) hash ^= ContinentCode.GetHashCode();
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (Echelon != 0) hash ^= Echelon.GetHashCode();
      if (Tier != 0) hash ^= Tier.GetHashCode();
      if (Points != 0) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Handle);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BuildVersion);
      }
      if (network_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Network);
      }
      if (character_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Character);
      }
      if (WaitTime != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(WaitTime);
      }
      if (Rating != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Rating);
      }
      if (LastOppId != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(LastOppId);
      }
      if (LastOppHandle.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(LastOppHandle);
      }
      if (ContinentCode.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ContinentCode);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(Longitude);
      }
      if (Echelon != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Echelon);
      }
      if (Tier != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Tier);
      }
      if (Points != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (WaitTime != 0D) {
        size += 2 + 8;
      }
      if (Rating != 0D) {
        size += 2 + 8;
      }
      if (LastOppId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastOppId);
      }
      if (LastOppHandle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastOppHandle);
      }
      if (ContinentCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContinentCode);
      }
      if (Latitude != 0D) {
        size += 2 + 8;
      }
      if (Longitude != 0D) {
        size += 2 + 8;
      }
      if (Echelon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Echelon);
      }
      if (Tier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tier);
      }
      if (Points != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueUser other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.network_ != null) {
        if (network_ == null) {
          network_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr();
        }
        Network.MergeFrom(other.Network);
      }
      if (other.character_ != null) {
        if (character_ == null) {
          character_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
        }
        Character.MergeFrom(other.Character);
      }
      if (other.WaitTime != 0D) {
        WaitTime = other.WaitTime;
      }
      if (other.Rating != 0D) {
        Rating = other.Rating;
      }
      if (other.LastOppId != 0L) {
        LastOppId = other.LastOppId;
      }
      if (other.LastOppHandle.Length != 0) {
        LastOppHandle = other.LastOppHandle;
      }
      if (other.ContinentCode.Length != 0) {
        ContinentCode = other.ContinentCode;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Echelon != 0) {
        Echelon = other.Echelon;
      }
      if (other.Tier != 0) {
        Tier = other.Tier;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Handle = input.ReadString();
            break;
          }
          case 26: {
            BuildVersion = input.ReadString();
            break;
          }
          case 82: {
            if (network_ == null) {
              network_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.NetworkAddr();
            }
            input.ReadMessage(network_);
            break;
          }
          case 90: {
            if (character_ == null) {
              character_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.CharacterSpec();
            }
            input.ReadMessage(character_);
            break;
          }
          case 161: {
            WaitTime = input.ReadDouble();
            break;
          }
          case 169: {
            Rating = input.ReadDouble();
            break;
          }
          case 184: {
            LastOppId = input.ReadInt64();
            break;
          }
          case 194: {
            LastOppHandle = input.ReadString();
            break;
          }
          case 202: {
            ContinentCode = input.ReadString();
            break;
          }
          case 209: {
            Latitude = input.ReadDouble();
            break;
          }
          case 217: {
            Longitude = input.ReadDouble();
            break;
          }
          case 240: {
            Echelon = input.ReadInt32();
            break;
          }
          case 248: {
            Tier = input.ReadInt32();
            break;
          }
          case 256: {
            Points = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LobbySummary : pb::IMessage<LobbySummary> {
    private static readonly pb::MessageParser<LobbySummary> _parser = new pb::MessageParser<LobbySummary>(() => new LobbySummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbySummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbySummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbySummary(LobbySummary other) : this() {
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      buildVersion_ = other.buildVersion_;
      members_ = other.members_;
      createTimeUnix_ = other.createTimeUnix_;
      lastActiveTimeUnix_ = other.lastActiveTimeUnix_;
      DeprecatedAge_ = other.DeprecatedAge_;
      DeprecatedIdle_ = other.DeprecatedIdle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbySummary Clone() {
      return new LobbySummary(this);
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.Lobby lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.Lobby Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 10;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 11;
    private int members_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Members {
      get { return members_; }
      set {
        members_ = value;
      }
    }

    /// <summary>Field number for the "create_time_unix" field.</summary>
    public const int CreateTimeUnixFieldNumber = 31;
    private long createTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTimeUnix {
      get { return createTimeUnix_; }
      set {
        createTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "last_active_time_unix" field.</summary>
    public const int LastActiveTimeUnixFieldNumber = 32;
    private long lastActiveTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastActiveTimeUnix {
      get { return lastActiveTimeUnix_; }
      set {
        lastActiveTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_age" field.</summary>
    public const int DeprecatedAgeFieldNumber = 21;
    private double DeprecatedAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeprecatedAge {
      get { return DeprecatedAge_; }
      set {
        DeprecatedAge_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_idle" field.</summary>
    public const int DeprecatedIdleFieldNumber = 22;
    private double DeprecatedIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeprecatedIdle {
      get { return DeprecatedIdle_; }
      set {
        DeprecatedIdle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbySummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbySummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lobby, other.Lobby)) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (Members != other.Members) return false;
      if (CreateTimeUnix != other.CreateTimeUnix) return false;
      if (LastActiveTimeUnix != other.LastActiveTimeUnix) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeprecatedAge, other.DeprecatedAge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeprecatedIdle, other.DeprecatedIdle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (Members != 0) hash ^= Members.GetHashCode();
      if (CreateTimeUnix != 0L) hash ^= CreateTimeUnix.GetHashCode();
      if (LastActiveTimeUnix != 0L) hash ^= LastActiveTimeUnix.GetHashCode();
      if (DeprecatedAge != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeprecatedAge);
      if (DeprecatedIdle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeprecatedIdle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lobby_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lobby);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BuildVersion);
      }
      if (Members != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Members);
      }
      if (DeprecatedAge != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(DeprecatedAge);
      }
      if (DeprecatedIdle != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(DeprecatedIdle);
      }
      if (CreateTimeUnix != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(CreateTimeUnix);
      }
      if (LastActiveTimeUnix != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(LastActiveTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (Members != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Members);
      }
      if (CreateTimeUnix != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreateTimeUnix);
      }
      if (LastActiveTimeUnix != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastActiveTimeUnix);
      }
      if (DeprecatedAge != 0D) {
        size += 2 + 8;
      }
      if (DeprecatedIdle != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbySummary other) {
      if (other == null) {
        return;
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.Lobby();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.Members != 0) {
        Members = other.Members;
      }
      if (other.CreateTimeUnix != 0L) {
        CreateTimeUnix = other.CreateTimeUnix;
      }
      if (other.LastActiveTimeUnix != 0L) {
        LastActiveTimeUnix = other.LastActiveTimeUnix;
      }
      if (other.DeprecatedAge != 0D) {
        DeprecatedAge = other.DeprecatedAge;
      }
      if (other.DeprecatedIdle != 0D) {
        DeprecatedIdle = other.DeprecatedIdle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lobby_ == null) {
              lobby_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.Lobby();
            }
            input.ReadMessage(lobby_);
            break;
          }
          case 82: {
            BuildVersion = input.ReadString();
            break;
          }
          case 88: {
            Members = input.ReadInt32();
            break;
          }
          case 169: {
            DeprecatedAge = input.ReadDouble();
            break;
          }
          case 177: {
            DeprecatedIdle = input.ReadDouble();
            break;
          }
          case 248: {
            CreateTimeUnix = input.ReadInt64();
            break;
          }
          case 256: {
            LastActiveTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveMatch : pb::IMessage<ActiveMatch> {
    private static readonly pb::MessageParser<ActiveMatch> _parser = new pb::MessageParser<ActiveMatch>(() => new ActiveMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveMatch(ActiveMatch other) : this() {
      matchId_ = other.matchId_;
      Desc = other.desc_ != null ? other.Desc.Clone() : null;
      startTimeUnix_ = other.startTimeUnix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveMatch Clone() {
      return new ActiveMatch(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor desc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    /// <summary>Field number for the "start_time_unix" field.</summary>
    public const int StartTimeUnixFieldNumber = 3;
    private long startTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeUnix {
      get { return startTimeUnix_; }
      set {
        startTimeUnix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Desc, other.Desc)) return false;
      if (StartTimeUnix != other.StartTimeUnix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (desc_ != null) hash ^= Desc.GetHashCode();
      if (StartTimeUnix != 0L) hash ^= StartTimeUnix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (desc_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Desc);
      }
      if (StartTimeUnix != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      if (StartTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeUnix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveMatch other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.desc_ != null) {
        if (desc_ == null) {
          desc_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor();
        }
        Desc.MergeFrom(other.Desc);
      }
      if (other.StartTimeUnix != 0L) {
        StartTimeUnix = other.StartTimeUnix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            if (desc_ == null) {
              desc_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameDescriptor();
            }
            input.ReadMessage(desc_);
            break;
          }
          case 24: {
            StartTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecentMatch : pb::IMessage<RecentMatch> {
    private static readonly pb::MessageParser<RecentMatch> _parser = new pb::MessageParser<RecentMatch>(() => new RecentMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecentMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecentMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecentMatch(RecentMatch other) : this() {
      matchId_ = other.matchId_;
      startTimeUnix_ = other.startTimeUnix_;
      durationSec_ = other.durationSec_;
      rated_ = other.rated_;
      buildVersion_ = other.buildVersion_;
      log_ = other.log_;
      abandoned_ = other.abandoned_;
      player_ = other.player_.Clone();
      game_ = other.game_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecentMatch Clone() {
      return new RecentMatch(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "start_time_unix" field.</summary>
    public const int StartTimeUnixFieldNumber = 2;
    private long startTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeUnix {
      get { return startTimeUnix_; }
      set {
        startTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "duration_sec" field.</summary>
    public const int DurationSecFieldNumber = 3;
    private double durationSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DurationSec {
      get { return durationSec_; }
      set {
        durationSec_ = value;
      }
    }

    /// <summary>Field number for the "rated" field.</summary>
    public const int RatedFieldNumber = 4;
    private bool rated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rated {
      get { return rated_; }
      set {
        rated_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 5;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 6;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abandoned" field.</summary>
    public const int AbandonedFieldNumber = 7;
    private bool abandoned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Abandoned {
      get { return abandoned_; }
      set {
        abandoned_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player> _repeated_player_codec
        = pb::FieldCodec.ForMessage(82, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player> player_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Player> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game> _repeated_game_codec
        = pb::FieldCodec.ForMessage(162, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game> game_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Types.Game> Game {
      get { return game_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecentMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecentMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (StartTimeUnix != other.StartTimeUnix) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DurationSec, other.DurationSec)) return false;
      if (Rated != other.Rated) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (Log != other.Log) return false;
      if (Abandoned != other.Abandoned) return false;
      if(!player_.Equals(other.player_)) return false;
      if(!game_.Equals(other.game_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (StartTimeUnix != 0L) hash ^= StartTimeUnix.GetHashCode();
      if (DurationSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DurationSec);
      if (Rated != false) hash ^= Rated.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      if (Abandoned != false) hash ^= Abandoned.GetHashCode();
      hash ^= player_.GetHashCode();
      hash ^= game_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (StartTimeUnix != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTimeUnix);
      }
      if (DurationSec != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(DurationSec);
      }
      if (Rated != false) {
        output.WriteRawTag(32);
        output.WriteBool(Rated);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BuildVersion);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Log);
      }
      if (Abandoned != false) {
        output.WriteRawTag(56);
        output.WriteBool(Abandoned);
      }
      player_.WriteTo(output, _repeated_player_codec);
      game_.WriteTo(output, _repeated_game_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (StartTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeUnix);
      }
      if (DurationSec != 0D) {
        size += 1 + 8;
      }
      if (Rated != false) {
        size += 1 + 1;
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      if (Abandoned != false) {
        size += 1 + 1;
      }
      size += player_.CalculateSize(_repeated_player_codec);
      size += game_.CalculateSize(_repeated_game_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecentMatch other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.StartTimeUnix != 0L) {
        StartTimeUnix = other.StartTimeUnix;
      }
      if (other.DurationSec != 0D) {
        DurationSec = other.DurationSec;
      }
      if (other.Rated != false) {
        Rated = other.Rated;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
      if (other.Abandoned != false) {
        Abandoned = other.Abandoned;
      }
      player_.Add(other.player_);
      game_.Add(other.game_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 16: {
            StartTimeUnix = input.ReadInt64();
            break;
          }
          case 25: {
            DurationSec = input.ReadDouble();
            break;
          }
          case 32: {
            Rated = input.ReadBool();
            break;
          }
          case 42: {
            BuildVersion = input.ReadString();
            break;
          }
          case 50: {
            Log = input.ReadString();
            break;
          }
          case 56: {
            Abandoned = input.ReadBool();
            break;
          }
          case 82: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 162: {
            game_.AddEntriesFrom(input, _repeated_game_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecentMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player> {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          accountId_ = other.accountId_;
          handle_ = other.handle_;
          gameChar_ = other.gameChar_;
          winner_ = other.winner_;
          disconnect_ = other.disconnect_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private long accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AccountId {
          get { return accountId_; }
          set {
            accountId_ = value;
          }
        }

        /// <summary>Field number for the "handle" field.</summary>
        public const int HandleFieldNumber = 2;
        private string handle_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Handle {
          get { return handle_; }
          set {
            handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "game_char" field.</summary>
        public const int GameCharFieldNumber = 3;
        private string gameChar_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameChar {
          get { return gameChar_; }
          set {
            gameChar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "winner" field.</summary>
        public const int WinnerFieldNumber = 4;
        private bool winner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Winner {
          get { return winner_; }
          set {
            winner_ = value;
          }
        }

        /// <summary>Field number for the "disconnect" field.</summary>
        public const int DisconnectFieldNumber = 5;
        private bool disconnect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Disconnect {
          get { return disconnect_; }
          set {
            disconnect_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Handle != other.Handle) return false;
          if (GameChar != other.GameChar) return false;
          if (Winner != other.Winner) return false;
          if (Disconnect != other.Disconnect) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AccountId != 0L) hash ^= AccountId.GetHashCode();
          if (Handle.Length != 0) hash ^= Handle.GetHashCode();
          if (GameChar.Length != 0) hash ^= GameChar.GetHashCode();
          if (Winner != false) hash ^= Winner.GetHashCode();
          if (Disconnect != false) hash ^= Disconnect.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(AccountId);
          }
          if (Handle.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Handle);
          }
          if (GameChar.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(GameChar);
          }
          if (Winner != false) {
            output.WriteRawTag(32);
            output.WriteBool(Winner);
          }
          if (Disconnect != false) {
            output.WriteRawTag(40);
            output.WriteBool(Disconnect);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AccountId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
          }
          if (Handle.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
          }
          if (GameChar.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameChar);
          }
          if (Winner != false) {
            size += 1 + 1;
          }
          if (Disconnect != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.AccountId != 0L) {
            AccountId = other.AccountId;
          }
          if (other.Handle.Length != 0) {
            Handle = other.Handle;
          }
          if (other.GameChar.Length != 0) {
            GameChar = other.GameChar;
          }
          if (other.Winner != false) {
            Winner = other.Winner;
          }
          if (other.Disconnect != false) {
            Disconnect = other.Disconnect;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadInt64();
                break;
              }
              case 18: {
                Handle = input.ReadString();
                break;
              }
              case 26: {
                GameChar = input.ReadString();
                break;
              }
              case 32: {
                Winner = input.ReadBool();
                break;
              }
              case 40: {
                Disconnect = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Game : pb::IMessage<Game> {
        private static readonly pb::MessageParser<Game> _parser = new pb::MessageParser<Game>(() => new Game());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Game> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Game() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Game(Game other) : this() {
          Game_ = other.game_ != null ? other.Game_.Clone() : null;
          winSlot_ = other.winSlot_;
          startTimeUnix_ = other.startTimeUnix_;
          durationSec_ = other.durationSec_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Game Clone() {
          return new Game(this);
        }

        /// <summary>Field number for the "game" field.</summary>
        public const int Game_FieldNumber = 1;
        private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig game_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig Game_ {
          get { return game_; }
          set {
            game_ = value;
          }
        }

        /// <summary>Field number for the "win_slot" field.</summary>
        public const int WinSlotFieldNumber = 2;
        private int winSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WinSlot {
          get { return winSlot_; }
          set {
            winSlot_ = value;
          }
        }

        /// <summary>Field number for the "start_time_unix" field.</summary>
        public const int StartTimeUnixFieldNumber = 3;
        private long startTimeUnix_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StartTimeUnix {
          get { return startTimeUnix_; }
          set {
            startTimeUnix_ = value;
          }
        }

        /// <summary>Field number for the "duration_sec" field.</summary>
        public const int DurationSecFieldNumber = 4;
        private double durationSec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double DurationSec {
          get { return durationSec_; }
          set {
            durationSec_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Game);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Game other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Game_, other.Game_)) return false;
          if (WinSlot != other.WinSlot) return false;
          if (StartTimeUnix != other.StartTimeUnix) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DurationSec, other.DurationSec)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (game_ != null) hash ^= Game_.GetHashCode();
          if (WinSlot != 0) hash ^= WinSlot.GetHashCode();
          if (StartTimeUnix != 0L) hash ^= StartTimeUnix.GetHashCode();
          if (DurationSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DurationSec);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (game_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Game_);
          }
          if (WinSlot != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(WinSlot);
          }
          if (StartTimeUnix != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(StartTimeUnix);
          }
          if (DurationSec != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(DurationSec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (game_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game_);
          }
          if (WinSlot != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSlot);
          }
          if (StartTimeUnix != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeUnix);
          }
          if (DurationSec != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Game other) {
          if (other == null) {
            return;
          }
          if (other.game_ != null) {
            if (game_ == null) {
              game_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
            }
            Game_.MergeFrom(other.Game_);
          }
          if (other.WinSlot != 0) {
            WinSlot = other.WinSlot;
          }
          if (other.StartTimeUnix != 0L) {
            StartTimeUnix = other.StartTimeUnix;
          }
          if (other.DurationSec != 0D) {
            DurationSec = other.DurationSec;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (game_ == null) {
                  game_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.GameConfig();
                }
                input.ReadMessage(game_);
                break;
              }
              case 16: {
                WinSlot = input.ReadInt32();
                break;
              }
              case 24: {
                StartTimeUnix = input.ReadInt64();
                break;
              }
              case 33: {
                DurationSec = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MatchPlayer : pb::IMessage<MatchPlayer> {
    private static readonly pb::MessageParser<MatchPlayer> _parser = new pb::MessageParser<MatchPlayer>(() => new MatchPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayer(MatchPlayer other) : this() {
      accountId_ = other.accountId_;
      handle_ = other.handle_;
      createTimeUnix_ = other.createTimeUnix_;
      modifyTimeUnix_ = other.modifyTimeUnix_;
      ServerStats = other.serverStats_ != null ? other.ServerStats.Clone() : null;
      PlayerStats = other.playerStats_ != null ? other.PlayerStats.Clone() : null;
      rating_ = other.rating_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayer Clone() {
      return new MatchPlayer(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time_unix" field.</summary>
    public const int CreateTimeUnixFieldNumber = 3;
    private long createTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTimeUnix {
      get { return createTimeUnix_; }
      set {
        createTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "modify_time_unix" field.</summary>
    public const int ModifyTimeUnixFieldNumber = 4;
    private long modifyTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ModifyTimeUnix {
      get { return modifyTimeUnix_; }
      set {
        modifyTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "server_stats" field.</summary>
    public const int ServerStatsFieldNumber = 10;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.ServerStats serverStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.ServerStats ServerStats {
      get { return serverStats_; }
      set {
        serverStats_ = value;
      }
    }

    /// <summary>Field number for the "player_stats" field.</summary>
    public const int PlayerStatsFieldNumber = 11;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats playerStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats PlayerStats {
      get { return playerStats_; }
      set {
        playerStats_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating> _repeated_rating_codec
        = pb::FieldCodec.ForMessage(162, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating> rating_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.Rating> Rating {
      get { return rating_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Handle != other.Handle) return false;
      if (CreateTimeUnix != other.CreateTimeUnix) return false;
      if (ModifyTimeUnix != other.ModifyTimeUnix) return false;
      if (!object.Equals(ServerStats, other.ServerStats)) return false;
      if (!object.Equals(PlayerStats, other.PlayerStats)) return false;
      if(!rating_.Equals(other.rating_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (CreateTimeUnix != 0L) hash ^= CreateTimeUnix.GetHashCode();
      if (ModifyTimeUnix != 0L) hash ^= ModifyTimeUnix.GetHashCode();
      if (serverStats_ != null) hash ^= ServerStats.GetHashCode();
      if (playerStats_ != null) hash ^= PlayerStats.GetHashCode();
      hash ^= rating_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Handle);
      }
      if (CreateTimeUnix != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateTimeUnix);
      }
      if (ModifyTimeUnix != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ModifyTimeUnix);
      }
      if (serverStats_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ServerStats);
      }
      if (playerStats_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PlayerStats);
      }
      rating_.WriteTo(output, _repeated_rating_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (CreateTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimeUnix);
      }
      if (ModifyTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ModifyTimeUnix);
      }
      if (serverStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerStats);
      }
      if (playerStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStats);
      }
      size += rating_.CalculateSize(_repeated_rating_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayer other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.CreateTimeUnix != 0L) {
        CreateTimeUnix = other.CreateTimeUnix;
      }
      if (other.ModifyTimeUnix != 0L) {
        ModifyTimeUnix = other.ModifyTimeUnix;
      }
      if (other.serverStats_ != null) {
        if (serverStats_ == null) {
          serverStats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.ServerStats();
        }
        ServerStats.MergeFrom(other.ServerStats);
      }
      if (other.playerStats_ != null) {
        if (playerStats_ == null) {
          playerStats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats();
        }
        PlayerStats.MergeFrom(other.PlayerStats);
      }
      rating_.Add(other.rating_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Handle = input.ReadString();
            break;
          }
          case 24: {
            CreateTimeUnix = input.ReadInt64();
            break;
          }
          case 32: {
            ModifyTimeUnix = input.ReadInt64();
            break;
          }
          case 82: {
            if (serverStats_ == null) {
              serverStats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Types.ServerStats();
            }
            input.ReadMessage(serverStats_);
            break;
          }
          case 90: {
            if (playerStats_ == null) {
              playerStats_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.PlayerStats();
            }
            input.ReadMessage(playerStats_);
            break;
          }
          case 162: {
            rating_.AddEntriesFrom(input, _repeated_rating_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MatchPlayer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ServerStats : pb::IMessage<ServerStats> {
        private static readonly pb::MessageParser<ServerStats> _parser = new pb::MessageParser<ServerStats>(() => new ServerStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerStats() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerStats(ServerStats other) : this() {
          attempts_ = other.attempts_;
          complete_ = other.complete_;
          disconnects_ = other.disconnects_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerStats Clone() {
          return new ServerStats(this);
        }

        /// <summary>Field number for the "attempts" field.</summary>
        public const int AttemptsFieldNumber = 1;
        private int attempts_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Attempts {
          get { return attempts_; }
          set {
            attempts_ = value;
          }
        }

        /// <summary>Field number for the "complete" field.</summary>
        public const int CompleteFieldNumber = 2;
        private int complete_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Complete {
          get { return complete_; }
          set {
            complete_ = value;
          }
        }

        /// <summary>Field number for the "disconnects" field.</summary>
        public const int DisconnectsFieldNumber = 3;
        private int disconnects_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Disconnects {
          get { return disconnects_; }
          set {
            disconnects_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ServerStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerStats other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Attempts != other.Attempts) return false;
          if (Complete != other.Complete) return false;
          if (Disconnects != other.Disconnects) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Attempts != 0) hash ^= Attempts.GetHashCode();
          if (Complete != 0) hash ^= Complete.GetHashCode();
          if (Disconnects != 0) hash ^= Disconnects.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Attempts != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Attempts);
          }
          if (Complete != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Complete);
          }
          if (Disconnects != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Disconnects);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Attempts != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attempts);
          }
          if (Complete != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Complete);
          }
          if (Disconnects != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Disconnects);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerStats other) {
          if (other == null) {
            return;
          }
          if (other.Attempts != 0) {
            Attempts = other.Attempts;
          }
          if (other.Complete != 0) {
            Complete = other.Complete;
          }
          if (other.Disconnects != 0) {
            Disconnects = other.Disconnects;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Attempts = input.ReadInt32();
                break;
              }
              case 16: {
                Complete = input.ReadInt32();
                break;
              }
              case 24: {
                Disconnects = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Rating : pb::IMessage<Rating> {
        private static readonly pb::MessageParser<Rating> _parser = new pb::MessageParser<Rating>(() => new Rating());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rating> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rating() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rating(Rating other) : this() {
          type_ = other.type_;
          rating_ = other.rating_;
          deviation_ = other.deviation_;
          volatility_ = other.volatility_;
          sessionRating_ = other.sessionRating_;
          lastRatingTimeUnix_ = other.lastRatingTimeUnix_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rating Clone() {
          return new Rating(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "rating" field.</summary>
        public const int Rating_FieldNumber = 2;
        private double rating_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Rating_ {
          get { return rating_; }
          set {
            rating_ = value;
          }
        }

        /// <summary>Field number for the "deviation" field.</summary>
        public const int DeviationFieldNumber = 3;
        private double deviation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Deviation {
          get { return deviation_; }
          set {
            deviation_ = value;
          }
        }

        /// <summary>Field number for the "volatility" field.</summary>
        public const int VolatilityFieldNumber = 4;
        private double volatility_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Volatility {
          get { return volatility_; }
          set {
            volatility_ = value;
          }
        }

        /// <summary>Field number for the "session_rating" field.</summary>
        public const int SessionRatingFieldNumber = 5;
        private double sessionRating_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double SessionRating {
          get { return sessionRating_; }
          set {
            sessionRating_ = value;
          }
        }

        /// <summary>Field number for the "last_rating_time_unix" field.</summary>
        public const int LastRatingTimeUnixFieldNumber = 10;
        private long lastRatingTimeUnix_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastRatingTimeUnix {
          get { return lastRatingTimeUnix_; }
          set {
            lastRatingTimeUnix_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rating);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rating other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rating_, other.Rating_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Deviation, other.Deviation)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volatility, other.Volatility)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionRating, other.SessionRating)) return false;
          if (LastRatingTimeUnix != other.LastRatingTimeUnix) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Rating_ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rating_);
          if (Deviation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Deviation);
          if (Volatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volatility);
          if (SessionRating != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionRating);
          if (LastRatingTimeUnix != 0L) hash ^= LastRatingTimeUnix.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Rating_ != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Rating_);
          }
          if (Deviation != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Deviation);
          }
          if (Volatility != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Volatility);
          }
          if (SessionRating != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(SessionRating);
          }
          if (LastRatingTimeUnix != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(LastRatingTimeUnix);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Rating_ != 0D) {
            size += 1 + 8;
          }
          if (Deviation != 0D) {
            size += 1 + 8;
          }
          if (Volatility != 0D) {
            size += 1 + 8;
          }
          if (SessionRating != 0D) {
            size += 1 + 8;
          }
          if (LastRatingTimeUnix != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRatingTimeUnix);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rating other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Rating_ != 0D) {
            Rating_ = other.Rating_;
          }
          if (other.Deviation != 0D) {
            Deviation = other.Deviation;
          }
          if (other.Volatility != 0D) {
            Volatility = other.Volatility;
          }
          if (other.SessionRating != 0D) {
            SessionRating = other.SessionRating;
          }
          if (other.LastRatingTimeUnix != 0L) {
            LastRatingTimeUnix = other.LastRatingTimeUnix;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                type_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
                break;
              }
              case 17: {
                Rating_ = input.ReadDouble();
                break;
              }
              case 25: {
                Deviation = input.ReadDouble();
                break;
              }
              case 33: {
                Volatility = input.ReadDouble();
                break;
              }
              case 41: {
                SessionRating = input.ReadDouble();
                break;
              }
              case 80: {
                LastRatingTimeUnix = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetMatchQueueUsersRequest : pb::IMessage<GetMatchQueueUsersRequest> {
    private static readonly pb::MessageParser<GetMatchQueueUsersRequest> _parser = new pb::MessageParser<GetMatchQueueUsersRequest>(() => new GetMatchQueueUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchQueueUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueUsersRequest(GetMatchQueueUsersRequest other) : this() {
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueUsersRequest Clone() {
      return new GetMatchQueueUsersRequest(this);
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType queue_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchQueueUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchQueueUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Queue != 0) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Queue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Queue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Queue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchQueueUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.Queue != 0) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            queue_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchQueueUsersResult : pb::IMessage<GetMatchQueueUsersResult> {
    private static readonly pb::MessageParser<GetMatchQueueUsersResult> _parser = new pb::MessageParser<GetMatchQueueUsersResult>(() => new GetMatchQueueUsersResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchQueueUsersResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueUsersResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueUsersResult(GetMatchQueueUsersResult other) : this() {
      user_ = other.user_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueUsersResult Clone() {
      return new GetMatchQueueUsersResult(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser> _repeated_user_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser> user_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.QueueUser> User {
      get { return user_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchQueueUsersResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchQueueUsersResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!user_.Equals(other.user_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= user_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      user_.WriteTo(output, _repeated_user_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += user_.CalculateSize(_repeated_user_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchQueueUsersResult other) {
      if (other == null) {
        return;
      }
      user_.Add(other.user_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLobbiesRequest : pb::IMessage<GetLobbiesRequest> {
    private static readonly pb::MessageParser<GetLobbiesRequest> _parser = new pb::MessageParser<GetLobbiesRequest>(() => new GetLobbiesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLobbiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbiesRequest(GetLobbiesRequest other) : this() {
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbiesRequest Clone() {
      return new GetLobbiesRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLobbiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLobbiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLobbiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLobbiesResult : pb::IMessage<GetLobbiesResult> {
    private static readonly pb::MessageParser<GetLobbiesResult> _parser = new pb::MessageParser<GetLobbiesResult>(() => new GetLobbiesResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLobbiesResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbiesResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbiesResult(GetLobbiesResult other) : this() {
      lobby_ = other.lobby_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbiesResult Clone() {
      return new GetLobbiesResult(this);
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary> _repeated_lobby_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary> lobby_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary> Lobby {
      get { return lobby_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLobbiesResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLobbiesResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lobby_.Equals(other.lobby_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lobby_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lobby_.WriteTo(output, _repeated_lobby_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lobby_.CalculateSize(_repeated_lobby_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLobbiesResult other) {
      if (other == null) {
        return;
      }
      lobby_.Add(other.lobby_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lobby_.AddEntriesFrom(input, _repeated_lobby_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLobbyRequest : pb::IMessage<GetLobbyRequest> {
    private static readonly pb::MessageParser<GetLobbyRequest> _parser = new pb::MessageParser<GetLobbyRequest>(() => new GetLobbyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLobbyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyRequest(GetLobbyRequest other) : this() {
      lobbyId_ = other.lobbyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyRequest Clone() {
      return new GetLobbyRequest(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private long lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLobbyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLobbyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LobbyId != 0L) hash ^= LobbyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LobbyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LobbyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LobbyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLobbyRequest other) {
      if (other == null) {
        return;
      }
      if (other.LobbyId != 0L) {
        LobbyId = other.LobbyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLobbyResult : pb::IMessage<GetLobbyResult> {
    private static readonly pb::MessageParser<GetLobbyResult> _parser = new pb::MessageParser<GetLobbyResult>(() => new GetLobbyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLobbyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyResult(GetLobbyResult other) : this() {
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyResult Clone() {
      return new GetLobbyResult(this);
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLobbyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLobbyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lobby, other.Lobby)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lobby_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lobby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLobbyResult other) {
      if (other == null) {
        return;
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lobby_ == null) {
              lobby_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.LobbySummary();
            }
            input.ReadMessage(lobby_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetActiveMatchesRequest : pb::IMessage<GetActiveMatchesRequest> {
    private static readonly pb::MessageParser<GetActiveMatchesRequest> _parser = new pb::MessageParser<GetActiveMatchesRequest>(() => new GetActiveMatchesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetActiveMatchesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchesRequest(GetActiveMatchesRequest other) : this() {
      matchType_ = other.matchType_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchesRequest Clone() {
      return new GetActiveMatchesRequest(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType matchType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetActiveMatchesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetActiveMatchesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetActiveMatchesRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            matchType_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetActiveMatchesResult : pb::IMessage<GetActiveMatchesResult> {
    private static readonly pb::MessageParser<GetActiveMatchesResult> _parser = new pb::MessageParser<GetActiveMatchesResult>(() => new GetActiveMatchesResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetActiveMatchesResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchesResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchesResult(GetActiveMatchesResult other) : this() {
      match_ = other.match_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchesResult Clone() {
      return new GetActiveMatchesResult(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch> _repeated_match_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch> match_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch> Match {
      get { return match_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetActiveMatchesResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetActiveMatchesResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!match_.Equals(other.match_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= match_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      match_.WriteTo(output, _repeated_match_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += match_.CalculateSize(_repeated_match_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetActiveMatchesResult other) {
      if (other == null) {
        return;
      }
      match_.Add(other.match_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            match_.AddEntriesFrom(input, _repeated_match_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetActiveMatchRequest : pb::IMessage<GetActiveMatchRequest> {
    private static readonly pb::MessageParser<GetActiveMatchRequest> _parser = new pb::MessageParser<GetActiveMatchRequest>(() => new GetActiveMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetActiveMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchRequest(GetActiveMatchRequest other) : this() {
      matchType_ = other.matchType_;
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchRequest Clone() {
      return new GetActiveMatchRequest(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType matchType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetActiveMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetActiveMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (MatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetActiveMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            matchType_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 16: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetActiveMatchResult : pb::IMessage<GetActiveMatchResult> {
    private static readonly pb::MessageParser<GetActiveMatchResult> _parser = new pb::MessageParser<GetActiveMatchResult>(() => new GetActiveMatchResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetActiveMatchResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchResult(GetActiveMatchResult other) : this() {
      Match = other.match_ != null ? other.Match.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveMatchResult Clone() {
      return new GetActiveMatchResult(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetActiveMatchResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetActiveMatchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetActiveMatchResult other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.ActiveMatch();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRecentMatchesRequest : pb::IMessage<GetRecentMatchesRequest> {
    private static readonly pb::MessageParser<GetRecentMatchesRequest> _parser = new pb::MessageParser<GetRecentMatchesRequest>(() => new GetRecentMatchesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRecentMatchesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatchesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatchesRequest(GetRecentMatchesRequest other) : this() {
      matchType_ = other.matchType_;
      limit_ = other.limit_;
      playerAccountId_ = other.playerAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatchesRequest Clone() {
      return new GetRecentMatchesRequest(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType matchType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "player_account_id" field.</summary>
    public const int PlayerAccountIdFieldNumber = 3;
    private long playerAccountId_;
    /// <summary>
    /// Limit results to those with the given player involved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerAccountId {
      get { return playerAccountId_; }
      set {
        playerAccountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRecentMatchesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRecentMatchesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (Limit != other.Limit) return false;
      if (PlayerAccountId != other.PlayerAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (PlayerAccountId != 0L) hash ^= PlayerAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (PlayerAccountId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (PlayerAccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRecentMatchesRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.PlayerAccountId != 0L) {
        PlayerAccountId = other.PlayerAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            matchType_ = (global::Rising_Thunder_Server_CS.Protobufs.Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerAccountId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRecentMatchesResult : pb::IMessage<GetRecentMatchesResult> {
    private static readonly pb::MessageParser<GetRecentMatchesResult> _parser = new pb::MessageParser<GetRecentMatchesResult>(() => new GetRecentMatchesResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRecentMatchesResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatchesResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatchesResult(GetRecentMatchesResult other) : this() {
      match_ = other.match_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatchesResult Clone() {
      return new GetRecentMatchesResult(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch> _repeated_match_codec
        = pb::FieldCodec.ForMessage(10, global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch.Parser);
    private readonly pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch> match_ = new pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch> Match {
      get { return match_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRecentMatchesResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRecentMatchesResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!match_.Equals(other.match_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= match_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      match_.WriteTo(output, _repeated_match_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += match_.CalculateSize(_repeated_match_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRecentMatchesResult other) {
      if (other == null) {
        return;
      }
      match_.Add(other.match_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            match_.AddEntriesFrom(input, _repeated_match_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchDetailRequest : pb::IMessage<GetMatchDetailRequest> {
    private static readonly pb::MessageParser<GetMatchDetailRequest> _parser = new pb::MessageParser<GetMatchDetailRequest>(() => new GetMatchDetailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchDetailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchDetailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchDetailRequest(GetMatchDetailRequest other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchDetailRequest Clone() {
      return new GetMatchDetailRequest(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchDetailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchDetailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchDetailRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchDetailResult : pb::IMessage<GetMatchDetailResult> {
    private static readonly pb::MessageParser<GetMatchDetailResult> _parser = new pb::MessageParser<GetMatchDetailResult>(() => new GetMatchDetailResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchDetailResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchDetailResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchDetailResult(GetMatchDetailResult other) : this() {
      Match = other.match_ != null ? other.Match.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchDetailResult Clone() {
      return new GetMatchDetailResult(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchDetailResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchDetailResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchDetailResult other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.RecentMatch();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPlayerDetailRequest : pb::IMessage<GetPlayerDetailRequest> {
    private static readonly pb::MessageParser<GetPlayerDetailRequest> _parser = new pb::MessageParser<GetPlayerDetailRequest>(() => new GetPlayerDetailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerDetailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerDetailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerDetailRequest(GetPlayerDetailRequest other) : this() {
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerDetailRequest Clone() {
      return new GetPlayerDetailRequest(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerDetailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerDetailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerDetailRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPlayerDetailResult : pb::IMessage<GetPlayerDetailResult> {
    private static readonly pb::MessageParser<GetPlayerDetailResult> _parser = new pb::MessageParser<GetPlayerDetailResult>(() => new GetPlayerDetailResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPlayerDetailResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerDetailResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerDetailResult(GetPlayerDetailResult other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPlayerDetailResult Clone() {
      return new GetPlayerDetailResult(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPlayerDetailResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPlayerDetailResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPlayerDetailResult other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::Rising_Thunder_Server_CS.Protobufs.Tbadmin.MatchPlayer();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
