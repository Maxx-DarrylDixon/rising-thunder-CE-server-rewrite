// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbadmin/stats.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tbadmin {

  /// <summary>Holder for reflection information generated from tbadmin/stats.proto</summary>
  public static partial class StatsReflection {

    #region Descriptor
    /// <summary>File descriptor for tbadmin/stats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0YmFkbWluL3N0YXRzLnByb3RvEgd0YmFkbWluGhF0YnJwYy90YnJwYy5w",
            "cm90bxoTdGJtYXRjaC9tYXRjaC5wcm90byKcAQoOVXNlckNvdW50U3RhdHMS",
            "DQoFdG90YWwYASABKAMSEQoJbm9fYWNjZXNzGAIgASgDEi8KBHJvbGUYAyAD",
            "KAsyIS50YmFkbWluLlVzZXJDb3VudFN0YXRzLlJvbGVDb3VudBo3CglSb2xl",
            "Q291bnQSGwoEcm9sZRgBIAEoDjINLnRicnBjLkFjY2VzcxINCgVjb3VudBgC",
            "IAEoAyKsAQoHU2Vzc2lvbhISCgphY2NvdW50X2lkGAEgASgDEg4KBmhhbmRs",
            "ZRgCIAEoCRINCgVlbWFpbBgDIAEoCRIVCg1idWlsZF92ZXJzaW9uGAQgASgJ",
            "EhcKD3N0YXJ0X3RpbWVfdW5peBgFIAEoAxIdChVsYXN0X2FjdGl2ZV90aW1l",
            "X3VuaXgYBiABKAMSEQoJcmVtb3RlX2lwGAcgASgJEgwKBHR5cGUYCCABKAUi",
            "8gEKFkNoYXJhY3RlclJlcG9ydE9wdGlvbnMSFwoPc3RhcnRfdGltZV91bml4",
            "GAEgASgDEhUKDWVuZF90aW1lX3VuaXgYAiABKAMSFQoNYnVpbGRfdmVyc2lv",
            "bhgEIAEoCRImCgptYXRjaF90eXBlGAUgASgOMhIudGJtYXRjaC5NYXRjaFR5",
            "cGUSGgoSaW5jbHVkZV9kaXNjb25uZWN0GAYgASgIEhgKEGluY2x1ZGVfZGlz",
            "YWdyZWUYByABKAgSFwoPbWF4X3JhdGluZ19kaWZmGAogASgFEhoKEnJhdGlu",
            "Z19idWNrZXRfc2l6ZRgLIAEoBSJOCgdNYXRjaHVwEhEKCWNoYXJfdHlwZRgB",
            "IAEoCRITCgt2ZXJzdXNfdHlwZRgCIAEoCRIMCgR3aW5zGBQgASgNEg0KBXRv",
            "dGFsGBUgASgNIk0KFFJhdGluZ1dpblJhdGlvUmVwb3J0EhIKCnJhdGluZ19j",
            "YXAYASABKAUSIQoHbWF0Y2h1cBgCIAMoCzIQLnRiYWRtaW4uTWF0Y2h1cCLh",
            "AQoOQ2hhcmFjdGVyVXNhZ2USEQoJdHlwZV9uYW1lGAEgASgJEhUKDXRvdGFs",
            "X21hdGNoZXMYAiABKA0SFAoMdW5pcXVlX3VzZXJzGAMgASgNEgwKBHdpbnMY",
            "BCABKA0SEwoLZGlzY29ubmVjdHMYBSABKA0SOwoNdmFyaWFudF90b3BfbhgG",
            "IAMoCzIkLnRiYWRtaW4uQ2hhcmFjdGVyVXNhZ2UuVmFyaWFudFVzYWdlGi8K",
            "DFZhcmlhbnRVc2FnZRIQCghzcGVjaWFscxgBIAEoCRINCgVjb3VudBgCIAEo",
            "DSLoAQoUQ2hhcmFjdGVyVXNhZ2VSZXBvcnQSEwoLcmVwb3J0X3RpbWUYASAB",
            "KAMSMAoHb3B0aW9ucxgCIAEoCzIfLnRiYWRtaW4uQ2hhcmFjdGVyUmVwb3J0",
            "T3B0aW9ucxIVCg10b3RhbF9tYXRjaGVzGAogASgNEhMKC3RvdGFsX3VzZXJz",
            "GAsgASgNEisKCmNoYXJfdXNhZ2UYDSADKAsyFy50YmFkbWluLkNoYXJhY3Rl",
            "clVzYWdlEjAKCXdpbl9yYXRpbxgOIAMoCzIdLnRiYWRtaW4uUmF0aW5nV2lu",
            "UmF0aW9SZXBvcnQiOAoSR2V0U2Vzc2lvbnNSZXF1ZXN0EhMKC21heF9hZ2Vf",
            "c2VjGAEgASgFEg0KBWxpbWl0GAIgASgFIoUBChFHZXRTZXNzaW9uc1Jlc3Vs",
            "dBIeCgRnYW1lGAEgAygLMhAudGJhZG1pbi5TZXNzaW9uEiIKCGxhdW5jaGVy",
            "GAIgAygLMhAudGJhZG1pbi5TZXNzaW9uEh0KA3dlYhgDIAMoCzIQLnRiYWRt",
            "aW4uU2Vzc2lvbhINCgV0b3RhbBgKIAEoBSJMChhHZXRDaGFyYWN0ZXJVc2Fn",
            "ZVJlcXVlc3QSMAoHb3B0aW9ucxgBIAEoCzIfLnRiYWRtaW4uQ2hhcmFjdGVy",
            "UmVwb3J0T3B0aW9ucyJIChdHZXRDaGFyYWN0ZXJVc2FnZVJlc3VsdBItCgZy",
            "ZXBvcnQYASABKAsyHS50YmFkbWluLkNoYXJhY3RlclVzYWdlUmVwb3J0MvcB",
            "CgxTdGF0c1NlcnZpY2USOQoKQ291bnRVc2VycxIMLnRicnBjLkVtcHR5Ghcu",
            "dGJhZG1pbi5Vc2VyQ291bnRTdGF0cyIEyPMYEhJMCgtHZXRTZXNzaW9ucxIb",
            "LnRiYWRtaW4uR2V0U2Vzc2lvbnNSZXF1ZXN0GhoudGJhZG1pbi5HZXRTZXNz",
            "aW9uc1Jlc3VsdCIEyPMYEhJeChFHZXRDaGFyYWN0ZXJVc2FnZRIhLnRiYWRt",
            "aW4uR2V0Q2hhcmFjdGVyVXNhZ2VSZXF1ZXN0GiAudGJhZG1pbi5HZXRDaGFy",
            "YWN0ZXJVc2FnZVJlc3VsdCIEyPMYEmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tbrpc.TbrpcReflection.Descriptor, global::Tbmatch.MatchReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.UserCountStats), global::Tbadmin.UserCountStats.Parser, new[]{ "Total", "NoAccess", "Role" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.UserCountStats.Types.RoleCount), global::Tbadmin.UserCountStats.Types.RoleCount.Parser, new[]{ "Role", "Count" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.Session), global::Tbadmin.Session.Parser, new[]{ "AccountId", "Handle", "Email", "BuildVersion", "StartTimeUnix", "LastActiveTimeUnix", "RemoteIp", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CharacterReportOptions), global::Tbadmin.CharacterReportOptions.Parser, new[]{ "StartTimeUnix", "EndTimeUnix", "BuildVersion", "MatchType", "IncludeDisconnect", "IncludeDisagree", "MaxRatingDiff", "RatingBucketSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.Matchup), global::Tbadmin.Matchup.Parser, new[]{ "CharType", "VersusType", "Wins", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.RatingWinRatioReport), global::Tbadmin.RatingWinRatioReport.Parser, new[]{ "RatingCap", "Matchup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CharacterUsage), global::Tbadmin.CharacterUsage.Parser, new[]{ "TypeName", "TotalMatches", "UniqueUsers", "Wins", "Disconnects", "VariantTopN" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CharacterUsage.Types.VariantUsage), global::Tbadmin.CharacterUsage.Types.VariantUsage.Parser, new[]{ "Specials", "Count" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CharacterUsageReport), global::Tbadmin.CharacterUsageReport.Parser, new[]{ "ReportTime", "Options", "TotalMatches", "TotalUsers", "CharUsage", "WinRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetSessionsRequest), global::Tbadmin.GetSessionsRequest.Parser, new[]{ "MaxAgeSec", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetSessionsResult), global::Tbadmin.GetSessionsResult.Parser, new[]{ "Game", "Launcher", "Web", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetCharacterUsageRequest), global::Tbadmin.GetCharacterUsageRequest.Parser, new[]{ "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetCharacterUsageResult), global::Tbadmin.GetCharacterUsageResult.Parser, new[]{ "Report" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserCountStats : pb::IMessage<UserCountStats> {
    private static readonly pb::MessageParser<UserCountStats> _parser = new pb::MessageParser<UserCountStats>(() => new UserCountStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCountStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCountStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCountStats(UserCountStats other) : this() {
      total_ = other.total_;
      noAccess_ = other.noAccess_;
      role_ = other.role_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCountStats Clone() {
      return new UserCountStats(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "no_access" field.</summary>
    public const int NoAccessFieldNumber = 2;
    private long noAccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoAccess {
      get { return noAccess_; }
      set {
        noAccess_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tbadmin.UserCountStats.Types.RoleCount> _repeated_role_codec
        = pb::FieldCodec.ForMessage(26, global::Tbadmin.UserCountStats.Types.RoleCount.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.UserCountStats.Types.RoleCount> role_ = new pbc::RepeatedField<global::Tbadmin.UserCountStats.Types.RoleCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.UserCountStats.Types.RoleCount> Role {
      get { return role_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCountStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCountStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (NoAccess != other.NoAccess) return false;
      if(!role_.Equals(other.role_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (NoAccess != 0L) hash ^= NoAccess.GetHashCode();
      hash ^= role_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Total);
      }
      if (NoAccess != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NoAccess);
      }
      role_.WriteTo(output, _repeated_role_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (NoAccess != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoAccess);
      }
      size += role_.CalculateSize(_repeated_role_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCountStats other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.NoAccess != 0L) {
        NoAccess = other.NoAccess;
      }
      role_.Add(other.role_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Total = input.ReadInt64();
            break;
          }
          case 16: {
            NoAccess = input.ReadInt64();
            break;
          }
          case 26: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserCountStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RoleCount : pb::IMessage<RoleCount> {
        private static readonly pb::MessageParser<RoleCount> _parser = new pb::MessageParser<RoleCount>(() => new RoleCount());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoleCount> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tbadmin.UserCountStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoleCount() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoleCount(RoleCount other) : this() {
          role_ = other.role_;
          count_ = other.count_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoleCount Clone() {
          return new RoleCount(this);
        }

        /// <summary>Field number for the "role" field.</summary>
        public const int RoleFieldNumber = 1;
        private global::Tbrpc.Access role_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tbrpc.Access Role {
          get { return role_; }
          set {
            role_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private long count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoleCount);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoleCount other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Role != other.Role) return false;
          if (Count != other.Count) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Role != 0) hash ^= Role.GetHashCode();
          if (Count != 0L) hash ^= Count.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Role != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Role);
          }
          if (Count != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Count);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Role != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
          }
          if (Count != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoleCount other) {
          if (other == null) {
            return;
          }
          if (other.Role != 0) {
            Role = other.Role;
          }
          if (other.Count != 0L) {
            Count = other.Count;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                role_ = (global::Tbrpc.Access) input.ReadEnum();
                break;
              }
              case 16: {
                Count = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Session : pb::IMessage<Session> {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      accountId_ = other.accountId_;
      handle_ = other.handle_;
      email_ = other.email_;
      buildVersion_ = other.buildVersion_;
      startTimeUnix_ = other.startTimeUnix_;
      lastActiveTimeUnix_ = other.lastActiveTimeUnix_;
      remoteIp_ = other.remoteIp_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 4;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time_unix" field.</summary>
    public const int StartTimeUnixFieldNumber = 5;
    private long startTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeUnix {
      get { return startTimeUnix_; }
      set {
        startTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "last_active_time_unix" field.</summary>
    public const int LastActiveTimeUnixFieldNumber = 6;
    private long lastActiveTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastActiveTimeUnix {
      get { return lastActiveTimeUnix_; }
      set {
        lastActiveTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "remote_ip" field.</summary>
    public const int RemoteIpFieldNumber = 7;
    private string remoteIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoteIp {
      get { return remoteIp_; }
      set {
        remoteIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Handle != other.Handle) return false;
      if (Email != other.Email) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (StartTimeUnix != other.StartTimeUnix) return false;
      if (LastActiveTimeUnix != other.LastActiveTimeUnix) return false;
      if (RemoteIp != other.RemoteIp) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (StartTimeUnix != 0L) hash ^= StartTimeUnix.GetHashCode();
      if (LastActiveTimeUnix != 0L) hash ^= LastActiveTimeUnix.GetHashCode();
      if (RemoteIp.Length != 0) hash ^= RemoteIp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Handle);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BuildVersion);
      }
      if (StartTimeUnix != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTimeUnix);
      }
      if (LastActiveTimeUnix != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastActiveTimeUnix);
      }
      if (RemoteIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RemoteIp);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (StartTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeUnix);
      }
      if (LastActiveTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastActiveTimeUnix);
      }
      if (RemoteIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteIp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.StartTimeUnix != 0L) {
        StartTimeUnix = other.StartTimeUnix;
      }
      if (other.LastActiveTimeUnix != 0L) {
        LastActiveTimeUnix = other.LastActiveTimeUnix;
      }
      if (other.RemoteIp.Length != 0) {
        RemoteIp = other.RemoteIp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Handle = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            BuildVersion = input.ReadString();
            break;
          }
          case 40: {
            StartTimeUnix = input.ReadInt64();
            break;
          }
          case 48: {
            LastActiveTimeUnix = input.ReadInt64();
            break;
          }
          case 58: {
            RemoteIp = input.ReadString();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterReportOptions : pb::IMessage<CharacterReportOptions> {
    private static readonly pb::MessageParser<CharacterReportOptions> _parser = new pb::MessageParser<CharacterReportOptions>(() => new CharacterReportOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterReportOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterReportOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterReportOptions(CharacterReportOptions other) : this() {
      startTimeUnix_ = other.startTimeUnix_;
      endTimeUnix_ = other.endTimeUnix_;
      buildVersion_ = other.buildVersion_;
      matchType_ = other.matchType_;
      includeDisconnect_ = other.includeDisconnect_;
      includeDisagree_ = other.includeDisagree_;
      maxRatingDiff_ = other.maxRatingDiff_;
      ratingBucketSize_ = other.ratingBucketSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterReportOptions Clone() {
      return new CharacterReportOptions(this);
    }

    /// <summary>Field number for the "start_time_unix" field.</summary>
    public const int StartTimeUnixFieldNumber = 1;
    private long startTimeUnix_;
    /// <summary>
    /// Time of first match to include, 0 = all
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeUnix {
      get { return startTimeUnix_; }
      set {
        startTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "end_time_unix" field.</summary>
    public const int EndTimeUnixFieldNumber = 2;
    private long endTimeUnix_;
    /// <summary>
    /// Time of last match to include, 0 = now
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTimeUnix {
      get { return endTimeUnix_; }
      set {
        endTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 4;
    private string buildVersion_ = "";
    /// <summary>
    /// Global filter options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 5;
    private global::Tbmatch.MatchType matchType_ = 0;
    /// <summary>
    /// Limit results to a specific match type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "include_disconnect" field.</summary>
    public const int IncludeDisconnectFieldNumber = 6;
    private bool includeDisconnect_;
    /// <summary>
    /// Include disconnected matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeDisconnect {
      get { return includeDisconnect_; }
      set {
        includeDisconnect_ = value;
      }
    }

    /// <summary>Field number for the "include_disagree" field.</summary>
    public const int IncludeDisagreeFieldNumber = 7;
    private bool includeDisagree_;
    /// <summary>
    /// Include foul-play matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeDisagree {
      get { return includeDisagree_; }
      set {
        includeDisagree_ = value;
      }
    }

    /// <summary>Field number for the "max_rating_diff" field.</summary>
    public const int MaxRatingDiffFieldNumber = 10;
    private int maxRatingDiff_;
    /// <summary>
    /// Win ratio options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRatingDiff {
      get { return maxRatingDiff_; }
      set {
        maxRatingDiff_ = value;
      }
    }

    /// <summary>Field number for the "rating_bucket_size" field.</summary>
    public const int RatingBucketSizeFieldNumber = 11;
    private int ratingBucketSize_;
    /// <summary>
    /// Width of Glicko2 rating buckets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatingBucketSize {
      get { return ratingBucketSize_; }
      set {
        ratingBucketSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterReportOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterReportOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimeUnix != other.StartTimeUnix) return false;
      if (EndTimeUnix != other.EndTimeUnix) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (MatchType != other.MatchType) return false;
      if (IncludeDisconnect != other.IncludeDisconnect) return false;
      if (IncludeDisagree != other.IncludeDisagree) return false;
      if (MaxRatingDiff != other.MaxRatingDiff) return false;
      if (RatingBucketSize != other.RatingBucketSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTimeUnix != 0L) hash ^= StartTimeUnix.GetHashCode();
      if (EndTimeUnix != 0L) hash ^= EndTimeUnix.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (IncludeDisconnect != false) hash ^= IncludeDisconnect.GetHashCode();
      if (IncludeDisagree != false) hash ^= IncludeDisagree.GetHashCode();
      if (MaxRatingDiff != 0) hash ^= MaxRatingDiff.GetHashCode();
      if (RatingBucketSize != 0) hash ^= RatingBucketSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTimeUnix != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTimeUnix);
      }
      if (EndTimeUnix != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndTimeUnix);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BuildVersion);
      }
      if (MatchType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MatchType);
      }
      if (IncludeDisconnect != false) {
        output.WriteRawTag(48);
        output.WriteBool(IncludeDisconnect);
      }
      if (IncludeDisagree != false) {
        output.WriteRawTag(56);
        output.WriteBool(IncludeDisagree);
      }
      if (MaxRatingDiff != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxRatingDiff);
      }
      if (RatingBucketSize != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RatingBucketSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeUnix);
      }
      if (EndTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimeUnix);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (IncludeDisconnect != false) {
        size += 1 + 1;
      }
      if (IncludeDisagree != false) {
        size += 1 + 1;
      }
      if (MaxRatingDiff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRatingDiff);
      }
      if (RatingBucketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatingBucketSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterReportOptions other) {
      if (other == null) {
        return;
      }
      if (other.StartTimeUnix != 0L) {
        StartTimeUnix = other.StartTimeUnix;
      }
      if (other.EndTimeUnix != 0L) {
        EndTimeUnix = other.EndTimeUnix;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.IncludeDisconnect != false) {
        IncludeDisconnect = other.IncludeDisconnect;
      }
      if (other.IncludeDisagree != false) {
        IncludeDisagree = other.IncludeDisagree;
      }
      if (other.MaxRatingDiff != 0) {
        MaxRatingDiff = other.MaxRatingDiff;
      }
      if (other.RatingBucketSize != 0) {
        RatingBucketSize = other.RatingBucketSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTimeUnix = input.ReadInt64();
            break;
          }
          case 16: {
            EndTimeUnix = input.ReadInt64();
            break;
          }
          case 34: {
            BuildVersion = input.ReadString();
            break;
          }
          case 40: {
            matchType_ = (global::Tbmatch.MatchType) input.ReadEnum();
            break;
          }
          case 48: {
            IncludeDisconnect = input.ReadBool();
            break;
          }
          case 56: {
            IncludeDisagree = input.ReadBool();
            break;
          }
          case 80: {
            MaxRatingDiff = input.ReadInt32();
            break;
          }
          case 88: {
            RatingBucketSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Matchup : pb::IMessage<Matchup> {
    private static readonly pb::MessageParser<Matchup> _parser = new pb::MessageParser<Matchup>(() => new Matchup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Matchup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matchup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matchup(Matchup other) : this() {
      charType_ = other.charType_;
      versusType_ = other.versusType_;
      wins_ = other.wins_;
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matchup Clone() {
      return new Matchup(this);
    }

    /// <summary>Field number for the "char_type" field.</summary>
    public const int CharTypeFieldNumber = 1;
    private string charType_ = "";
    /// <summary>
    /// Char type vs. opponent type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharType {
      get { return charType_; }
      set {
        charType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versus_type" field.</summary>
    public const int VersusTypeFieldNumber = 2;
    private string versusType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersusType {
      get { return versusType_; }
      set {
        versusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 20;
    private uint wins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Wins {
      get { return wins_; }
      set {
        wins_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 21;
    private uint total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Matchup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Matchup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharType != other.CharType) return false;
      if (VersusType != other.VersusType) return false;
      if (Wins != other.Wins) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharType.Length != 0) hash ^= CharType.GetHashCode();
      if (VersusType.Length != 0) hash ^= VersusType.GetHashCode();
      if (Wins != 0) hash ^= Wins.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CharType);
      }
      if (VersusType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersusType);
      }
      if (Wins != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Wins);
      }
      if (Total != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharType);
      }
      if (VersusType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersusType);
      }
      if (Wins != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Wins);
      }
      if (Total != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Matchup other) {
      if (other == null) {
        return;
      }
      if (other.CharType.Length != 0) {
        CharType = other.CharType;
      }
      if (other.VersusType.Length != 0) {
        VersusType = other.VersusType;
      }
      if (other.Wins != 0) {
        Wins = other.Wins;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CharType = input.ReadString();
            break;
          }
          case 18: {
            VersusType = input.ReadString();
            break;
          }
          case 160: {
            Wins = input.ReadUInt32();
            break;
          }
          case 168: {
            Total = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RatingWinRatioReport : pb::IMessage<RatingWinRatioReport> {
    private static readonly pb::MessageParser<RatingWinRatioReport> _parser = new pb::MessageParser<RatingWinRatioReport>(() => new RatingWinRatioReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RatingWinRatioReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingWinRatioReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingWinRatioReport(RatingWinRatioReport other) : this() {
      ratingCap_ = other.ratingCap_;
      matchup_ = other.matchup_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingWinRatioReport Clone() {
      return new RatingWinRatioReport(this);
    }

    /// <summary>Field number for the "rating_cap" field.</summary>
    public const int RatingCapFieldNumber = 1;
    private int ratingCap_;
    /// <summary>
    /// Max Glicko2 rating for these matchups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatingCap {
      get { return ratingCap_; }
      set {
        ratingCap_ = value;
      }
    }

    /// <summary>Field number for the "matchup" field.</summary>
    public const int MatchupFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tbadmin.Matchup> _repeated_matchup_codec
        = pb::FieldCodec.ForMessage(18, global::Tbadmin.Matchup.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.Matchup> matchup_ = new pbc::RepeatedField<global::Tbadmin.Matchup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.Matchup> Matchup {
      get { return matchup_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RatingWinRatioReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RatingWinRatioReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RatingCap != other.RatingCap) return false;
      if(!matchup_.Equals(other.matchup_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RatingCap != 0) hash ^= RatingCap.GetHashCode();
      hash ^= matchup_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RatingCap != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RatingCap);
      }
      matchup_.WriteTo(output, _repeated_matchup_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RatingCap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatingCap);
      }
      size += matchup_.CalculateSize(_repeated_matchup_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RatingWinRatioReport other) {
      if (other == null) {
        return;
      }
      if (other.RatingCap != 0) {
        RatingCap = other.RatingCap;
      }
      matchup_.Add(other.matchup_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RatingCap = input.ReadInt32();
            break;
          }
          case 18: {
            matchup_.AddEntriesFrom(input, _repeated_matchup_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Overall stats for an individual character.
  /// </summary>
  public sealed partial class CharacterUsage : pb::IMessage<CharacterUsage> {
    private static readonly pb::MessageParser<CharacterUsage> _parser = new pb::MessageParser<CharacterUsage>(() => new CharacterUsage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterUsage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterUsage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterUsage(CharacterUsage other) : this() {
      typeName_ = other.typeName_;
      totalMatches_ = other.totalMatches_;
      uniqueUsers_ = other.uniqueUsers_;
      wins_ = other.wins_;
      disconnects_ = other.disconnects_;
      variantTopN_ = other.variantTopN_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterUsage Clone() {
      return new CharacterUsage(this);
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_matches" field.</summary>
    public const int TotalMatchesFieldNumber = 2;
    private uint totalMatches_;
    /// <summary>
    /// Number of match slots involved in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalMatches {
      get { return totalMatches_; }
      set {
        totalMatches_ = value;
      }
    }

    /// <summary>Field number for the "unique_users" field.</summary>
    public const int UniqueUsersFieldNumber = 3;
    private uint uniqueUsers_;
    /// <summary>
    /// Number of unique users who played the character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UniqueUsers {
      get { return uniqueUsers_; }
      set {
        uniqueUsers_ = value;
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 4;
    private uint wins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Wins {
      get { return wins_; }
      set {
        wins_ = value;
      }
    }

    /// <summary>Field number for the "disconnects" field.</summary>
    public const int DisconnectsFieldNumber = 5;
    private uint disconnects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Disconnects {
      get { return disconnects_; }
      set {
        disconnects_ = value;
      }
    }

    /// <summary>Field number for the "variant_top_n" field.</summary>
    public const int VariantTopNFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Tbadmin.CharacterUsage.Types.VariantUsage> _repeated_variantTopN_codec
        = pb::FieldCodec.ForMessage(50, global::Tbadmin.CharacterUsage.Types.VariantUsage.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.CharacterUsage.Types.VariantUsage> variantTopN_ = new pbc::RepeatedField<global::Tbadmin.CharacterUsage.Types.VariantUsage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.CharacterUsage.Types.VariantUsage> VariantTopN {
      get { return variantTopN_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterUsage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterUsage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      if (TotalMatches != other.TotalMatches) return false;
      if (UniqueUsers != other.UniqueUsers) return false;
      if (Wins != other.Wins) return false;
      if (Disconnects != other.Disconnects) return false;
      if(!variantTopN_.Equals(other.variantTopN_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (TotalMatches != 0) hash ^= TotalMatches.GetHashCode();
      if (UniqueUsers != 0) hash ^= UniqueUsers.GetHashCode();
      if (Wins != 0) hash ^= Wins.GetHashCode();
      if (Disconnects != 0) hash ^= Disconnects.GetHashCode();
      hash ^= variantTopN_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (TotalMatches != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalMatches);
      }
      if (UniqueUsers != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UniqueUsers);
      }
      if (Wins != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Wins);
      }
      if (Disconnects != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Disconnects);
      }
      variantTopN_.WriteTo(output, _repeated_variantTopN_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (TotalMatches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalMatches);
      }
      if (UniqueUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniqueUsers);
      }
      if (Wins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wins);
      }
      if (Disconnects != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Disconnects);
      }
      size += variantTopN_.CalculateSize(_repeated_variantTopN_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterUsage other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.TotalMatches != 0) {
        TotalMatches = other.TotalMatches;
      }
      if (other.UniqueUsers != 0) {
        UniqueUsers = other.UniqueUsers;
      }
      if (other.Wins != 0) {
        Wins = other.Wins;
      }
      if (other.Disconnects != 0) {
        Disconnects = other.Disconnects;
      }
      variantTopN_.Add(other.variantTopN_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
          case 16: {
            TotalMatches = input.ReadUInt32();
            break;
          }
          case 24: {
            UniqueUsers = input.ReadUInt32();
            break;
          }
          case 32: {
            Wins = input.ReadUInt32();
            break;
          }
          case 40: {
            Disconnects = input.ReadUInt32();
            break;
          }
          case 50: {
            variantTopN_.AddEntriesFrom(input, _repeated_variantTopN_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CharacterUsage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class VariantUsage : pb::IMessage<VariantUsage> {
        private static readonly pb::MessageParser<VariantUsage> _parser = new pb::MessageParser<VariantUsage>(() => new VariantUsage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VariantUsage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tbadmin.CharacterUsage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantUsage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantUsage(VariantUsage other) : this() {
          specials_ = other.specials_;
          count_ = other.count_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantUsage Clone() {
          return new VariantUsage(this);
        }

        /// <summary>Field number for the "specials" field.</summary>
        public const int SpecialsFieldNumber = 1;
        private string specials_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Specials {
          get { return specials_; }
          set {
            specials_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VariantUsage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VariantUsage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Specials != other.Specials) return false;
          if (Count != other.Count) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Specials.Length != 0) hash ^= Specials.GetHashCode();
          if (Count != 0) hash ^= Count.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Specials.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Specials);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Specials.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Specials);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VariantUsage other) {
          if (other == null) {
            return;
          }
          if (other.Specials.Length != 0) {
            Specials = other.Specials;
          }
          if (other.Count != 0) {
            Count = other.Count;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Specials = input.ReadString();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CharacterUsageReport : pb::IMessage<CharacterUsageReport> {
    private static readonly pb::MessageParser<CharacterUsageReport> _parser = new pb::MessageParser<CharacterUsageReport>(() => new CharacterUsageReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterUsageReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterUsageReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterUsageReport(CharacterUsageReport other) : this() {
      reportTime_ = other.reportTime_;
      Options = other.options_ != null ? other.Options.Clone() : null;
      totalMatches_ = other.totalMatches_;
      totalUsers_ = other.totalUsers_;
      charUsage_ = other.charUsage_.Clone();
      winRatio_ = other.winRatio_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterUsageReport Clone() {
      return new CharacterUsageReport(this);
    }

    /// <summary>Field number for the "report_time" field.</summary>
    public const int ReportTimeFieldNumber = 1;
    private long reportTime_;
    /// <summary>
    /// Time this report was generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportTime {
      get { return reportTime_; }
      set {
        reportTime_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private global::Tbadmin.CharacterReportOptions options_;
    /// <summary>
    /// Query parameters that bounded the report scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.CharacterReportOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "total_matches" field.</summary>
    public const int TotalMatchesFieldNumber = 10;
    private uint totalMatches_;
    /// <summary>
    /// Matches observed in this report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalMatches {
      get { return totalMatches_; }
      set {
        totalMatches_ = value;
      }
    }

    /// <summary>Field number for the "total_users" field.</summary>
    public const int TotalUsersFieldNumber = 11;
    private uint totalUsers_;
    /// <summary>
    /// Total unique users considered for the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalUsers {
      get { return totalUsers_; }
      set {
        totalUsers_ = value;
      }
    }

    /// <summary>Field number for the "char_usage" field.</summary>
    public const int CharUsageFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Tbadmin.CharacterUsage> _repeated_charUsage_codec
        = pb::FieldCodec.ForMessage(106, global::Tbadmin.CharacterUsage.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.CharacterUsage> charUsage_ = new pbc::RepeatedField<global::Tbadmin.CharacterUsage>();
    /// <summary>
    /// Summary stats for each character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.CharacterUsage> CharUsage {
      get { return charUsage_; }
    }

    /// <summary>Field number for the "win_ratio" field.</summary>
    public const int WinRatioFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Tbadmin.RatingWinRatioReport> _repeated_winRatio_codec
        = pb::FieldCodec.ForMessage(114, global::Tbadmin.RatingWinRatioReport.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.RatingWinRatioReport> winRatio_ = new pbc::RepeatedField<global::Tbadmin.RatingWinRatioReport>();
    /// <summary>
    /// Half-matrix of win/loss ratios for each character combo &amp; rating band.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.RatingWinRatioReport> WinRatio {
      get { return winRatio_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterUsageReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterUsageReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportTime != other.ReportTime) return false;
      if (!object.Equals(Options, other.Options)) return false;
      if (TotalMatches != other.TotalMatches) return false;
      if (TotalUsers != other.TotalUsers) return false;
      if(!charUsage_.Equals(other.charUsage_)) return false;
      if(!winRatio_.Equals(other.winRatio_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportTime != 0L) hash ^= ReportTime.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (TotalMatches != 0) hash ^= TotalMatches.GetHashCode();
      if (TotalUsers != 0) hash ^= TotalUsers.GetHashCode();
      hash ^= charUsage_.GetHashCode();
      hash ^= winRatio_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportTime);
      }
      if (options_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Options);
      }
      if (TotalMatches != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TotalMatches);
      }
      if (TotalUsers != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TotalUsers);
      }
      charUsage_.WriteTo(output, _repeated_charUsage_codec);
      winRatio_.WriteTo(output, _repeated_winRatio_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportTime);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (TotalMatches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalMatches);
      }
      if (TotalUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalUsers);
      }
      size += charUsage_.CalculateSize(_repeated_charUsage_codec);
      size += winRatio_.CalculateSize(_repeated_winRatio_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterUsageReport other) {
      if (other == null) {
        return;
      }
      if (other.ReportTime != 0L) {
        ReportTime = other.ReportTime;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Tbadmin.CharacterReportOptions();
        }
        Options.MergeFrom(other.Options);
      }
      if (other.TotalMatches != 0) {
        TotalMatches = other.TotalMatches;
      }
      if (other.TotalUsers != 0) {
        TotalUsers = other.TotalUsers;
      }
      charUsage_.Add(other.charUsage_);
      winRatio_.Add(other.winRatio_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportTime = input.ReadInt64();
            break;
          }
          case 18: {
            if (options_ == null) {
              options_ = new global::Tbadmin.CharacterReportOptions();
            }
            input.ReadMessage(options_);
            break;
          }
          case 80: {
            TotalMatches = input.ReadUInt32();
            break;
          }
          case 88: {
            TotalUsers = input.ReadUInt32();
            break;
          }
          case 106: {
            charUsage_.AddEntriesFrom(input, _repeated_charUsage_codec);
            break;
          }
          case 114: {
            winRatio_.AddEntriesFrom(input, _repeated_winRatio_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSessionsRequest : pb::IMessage<GetSessionsRequest> {
    private static readonly pb::MessageParser<GetSessionsRequest> _parser = new pb::MessageParser<GetSessionsRequest>(() => new GetSessionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionsRequest(GetSessionsRequest other) : this() {
      maxAgeSec_ = other.maxAgeSec_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionsRequest Clone() {
      return new GetSessionsRequest(this);
    }

    /// <summary>Field number for the "max_age_sec" field.</summary>
    public const int MaxAgeSecFieldNumber = 1;
    private int maxAgeSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAgeSec {
      get { return maxAgeSec_; }
      set {
        maxAgeSec_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxAgeSec != other.MaxAgeSec) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxAgeSec != 0) hash ^= MaxAgeSec.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxAgeSec != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxAgeSec);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxAgeSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAgeSec);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxAgeSec != 0) {
        MaxAgeSec = other.MaxAgeSec;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxAgeSec = input.ReadInt32();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSessionsResult : pb::IMessage<GetSessionsResult> {
    private static readonly pb::MessageParser<GetSessionsResult> _parser = new pb::MessageParser<GetSessionsResult>(() => new GetSessionsResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionsResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionsResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionsResult(GetSessionsResult other) : this() {
      game_ = other.game_.Clone();
      launcher_ = other.launcher_.Clone();
      web_ = other.web_.Clone();
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionsResult Clone() {
      return new GetSessionsResult(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.Session> _repeated_game_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.Session.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.Session> game_ = new pbc::RepeatedField<global::Tbadmin.Session>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.Session> Game {
      get { return game_; }
    }

    /// <summary>Field number for the "launcher" field.</summary>
    public const int LauncherFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tbadmin.Session> _repeated_launcher_codec
        = pb::FieldCodec.ForMessage(18, global::Tbadmin.Session.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.Session> launcher_ = new pbc::RepeatedField<global::Tbadmin.Session>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.Session> Launcher {
      get { return launcher_; }
    }

    /// <summary>Field number for the "web" field.</summary>
    public const int WebFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tbadmin.Session> _repeated_web_codec
        = pb::FieldCodec.ForMessage(26, global::Tbadmin.Session.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.Session> web_ = new pbc::RepeatedField<global::Tbadmin.Session>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.Session> Web {
      get { return web_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 10;
    private int total_;
    /// <summary>
    /// Total sessions active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionsResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionsResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!game_.Equals(other.game_)) return false;
      if(!launcher_.Equals(other.launcher_)) return false;
      if(!web_.Equals(other.web_)) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= game_.GetHashCode();
      hash ^= launcher_.GetHashCode();
      hash ^= web_.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      game_.WriteTo(output, _repeated_game_codec);
      launcher_.WriteTo(output, _repeated_launcher_codec);
      web_.WriteTo(output, _repeated_web_codec);
      if (Total != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += game_.CalculateSize(_repeated_game_codec);
      size += launcher_.CalculateSize(_repeated_launcher_codec);
      size += web_.CalculateSize(_repeated_web_codec);
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionsResult other) {
      if (other == null) {
        return;
      }
      game_.Add(other.game_);
      launcher_.Add(other.launcher_);
      web_.Add(other.web_);
      if (other.Total != 0) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            game_.AddEntriesFrom(input, _repeated_game_codec);
            break;
          }
          case 18: {
            launcher_.AddEntriesFrom(input, _repeated_launcher_codec);
            break;
          }
          case 26: {
            web_.AddEntriesFrom(input, _repeated_web_codec);
            break;
          }
          case 80: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCharacterUsageRequest : pb::IMessage<GetCharacterUsageRequest> {
    private static readonly pb::MessageParser<GetCharacterUsageRequest> _parser = new pb::MessageParser<GetCharacterUsageRequest>(() => new GetCharacterUsageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCharacterUsageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCharacterUsageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCharacterUsageRequest(GetCharacterUsageRequest other) : this() {
      Options = other.options_ != null ? other.Options.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCharacterUsageRequest Clone() {
      return new GetCharacterUsageRequest(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 1;
    private global::Tbadmin.CharacterReportOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.CharacterReportOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCharacterUsageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCharacterUsageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (options_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCharacterUsageRequest other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Tbadmin.CharacterReportOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (options_ == null) {
              options_ = new global::Tbadmin.CharacterReportOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCharacterUsageResult : pb::IMessage<GetCharacterUsageResult> {
    private static readonly pb::MessageParser<GetCharacterUsageResult> _parser = new pb::MessageParser<GetCharacterUsageResult>(() => new GetCharacterUsageResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCharacterUsageResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.StatsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCharacterUsageResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCharacterUsageResult(GetCharacterUsageResult other) : this() {
      Report = other.report_ != null ? other.Report.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCharacterUsageResult Clone() {
      return new GetCharacterUsageResult(this);
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 1;
    private global::Tbadmin.CharacterUsageReport report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.CharacterUsageReport Report {
      get { return report_; }
      set {
        report_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCharacterUsageResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCharacterUsageResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Report, other.Report)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (report_ != null) hash ^= Report.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (report_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Report);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (report_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Report);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCharacterUsageResult other) {
      if (other == null) {
        return;
      }
      if (other.report_ != null) {
        if (report_ == null) {
          report_ = new global::Tbadmin.CharacterUsageReport();
        }
        Report.MergeFrom(other.Report);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (report_ == null) {
              report_ = new global::Tbadmin.CharacterUsageReport();
            }
            input.ReadMessage(report_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
