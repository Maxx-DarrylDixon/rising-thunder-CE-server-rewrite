// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbadmin/audit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tbadmin {

  /// <summary>Holder for reflection information generated from tbadmin/audit.proto</summary>
  public static partial class AuditReflection {

    #region Descriptor
    /// <summary>File descriptor for tbadmin/audit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuditReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0YmFkbWluL2F1ZGl0LnByb3RvEgd0YmFkbWluGhF0YnJwYy90YnJwYy5w",
            "cm90bxoVdGJtYXRjaC9hY2NvdW50LnByb3RvGhJ0Ym1hdGNoL3Nob3AucHJv",
            "dG8aE3RibWF0Y2gvcXVlcnkucHJvdG8iQwoOQWNjb3VudFN1bW1hcnkSEgoK",
            "YWNjb3VudF9pZBgBIAEoAxINCgVlbWFpbBgCIAEoCRIOCgZoYW5kbGUYAyAB",
            "KAkiYQoMQXVkaXRBY2NvdW50EiUKBHVzZXIYASABKAsyFy50YmFkbWluLkFj",
            "Y291bnRTdW1tYXJ5EioKDGxvZ2luX3N0YXR1cxgCIAEoDjIULnRibWF0Y2gu",
            "TG9naW5TdGF0dXMiSAoKQXVkaXRPcmRlchIUCgxvcmRlcl9udW1iZXIYASAB",
            "KAMSJAoGc3RhdHVzGAIgASgOMhQudGJtYXRjaC5PcmRlclN0YXR1cyKLAgoK",
            "QXVkaXRFdmVudBImCgVhY3RvchgCIAEoCzIXLnRiYWRtaW4uQWNjb3VudFN1",
            "bW1hcnkSEgoKZXZlbnRfdGltZRgDIAEoCRIrCgpldmVudF90eXBlGAQgASgO",
            "MhcudGJhZG1pbi5BdWRpdEV2ZW50VHlwZRIRCglyZW1vdGVfaXAYBSABKAkS",
            "EwoLc2VydmVyX2hvc3QYBiABKAkSEQoJb3BlcmF0aW9uGAkgASgJEg0KBXF1",
            "ZXJ5GAogASgJEiYKB2FjY291bnQYCyABKAsyFS50YmFkbWluLkF1ZGl0QWNj",
            "b3VudBIiCgVvcmRlchgMIAEoCzITLnRiYWRtaW4uQXVkaXRPcmRlciK5AgoS",
            "QXVkaXRFdmVudENyaXRlcmlhEhgKEGFjdG9yX2FjY291bnRfaWQYASABKAMS",
            "JgoKZXZlbnRfdGltZRgCIAEoCzISLnRibWF0Y2guVGltZVJhbmdlEisKCmV2",
            "ZW50X3R5cGUYAyABKA4yFy50YmFkbWluLkF1ZGl0RXZlbnRUeXBlEhUKDXJl",
            "bW90ZV9pcF9uZXQYBCABKAkSKQoLc2VydmVyX2hvc3QYBSABKAsyFC50Ym1h",
            "dGNoLlN0cmluZ01hdGNoEicKCW9wZXJhdGlvbhgGIAEoCzIULnRibWF0Y2gu",
            "U3RyaW5nTWF0Y2gSIwoFcXVlcnkYByABKAsyFC50Ym1hdGNoLlN0cmluZ01h",
            "dGNoEhIKCmFjY291bnRfaWQYCyABKAMSEAoIb3JkZXJfaWQYDCABKAMiiwIK",
            "DkF1ZGl0RXZlbnRTb3J0Ei0KBWZpcnN0GAEgASgOMh4udGJhZG1pbi5BdWRp",
            "dEV2ZW50U29ydC5Tb3J0QnkSLgoGc2Vjb25kGAIgASgOMh4udGJhZG1pbi5B",
            "dWRpdEV2ZW50U29ydC5Tb3J0QnkSEgoKZGVzY2VuZGluZxgDIAEoCCKFAQoG",
            "U29ydEJ5EhAKDFNPUlRfQllfWkVSTxAAEgwKCEFDVE9SX0lEEAESDgoKRVZF",
            "TlRfVElNRRACEg0KCVJFTU9URV9JUBADEg8KC1NFUlZFUl9IT1NUEAQSDQoJ",
            "T1BFUkFUSU9OEAUSDgoKQUNDT1VOVF9JRBAGEgwKCE9SREVSX0lEEAcikAEK",
            "GVNlYXJjaEF1ZGl0SGlzdG9yeVJlcXVlc3QSLQoIY3JpdGVyaWEYASABKAsy",
            "Gy50YmFkbWluLkF1ZGl0RXZlbnRDcml0ZXJpYRIlCgRzb3J0GAIgASgLMhcu",
            "dGJhZG1pbi5BdWRpdEV2ZW50U29ydBIOCgZvZmZzZXQYBSABKAUSDQoFbGlt",
            "aXQYBiABKAUiVAoYU2VhcmNoQXVkaXRIaXN0b3J5UmVzdWx0EiMKBmV2ZW50",
            "cxgBIAMoCzITLnRiYWRtaW4uQXVkaXRFdmVudBITCgtlbmRfb2ZfZGF0YRgC",
            "IAEoCCpTCg5BdWRpdEV2ZW50VHlwZRIUChBBVURJVF9FVkVOVF9aRVJPEAAS",
            "CAoEVVNFUhABEgsKB0FDQ09VTlQQAhIJCgVPUkRFUhADEgkKBVFVRVJZEAQy",
            "cQoMQXVkaXRTZXJ2aWNlEmEKElNlYXJjaEF1ZGl0SGlzdG9yeRIiLnRiYWRt",
            "aW4uU2VhcmNoQXVkaXRIaXN0b3J5UmVxdWVzdBohLnRiYWRtaW4uU2VhcmNo",
            "QXVkaXRIaXN0b3J5UmVzdWx0IgTI8xgYYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tbrpc.TbrpcReflection.Descriptor, global::Tbmatch.AccountReflection.Descriptor, global::Tbmatch.ShopReflection.Descriptor, global::Tbmatch.QueryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tbadmin.AuditEventType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AccountSummary), global::Tbadmin.AccountSummary.Parser, new[]{ "AccountId", "Email", "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AuditAccount), global::Tbadmin.AuditAccount.Parser, new[]{ "User", "LoginStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AuditOrder), global::Tbadmin.AuditOrder.Parser, new[]{ "OrderNumber", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AuditEvent), global::Tbadmin.AuditEvent.Parser, new[]{ "Actor", "EventTime", "EventType", "RemoteIp", "ServerHost", "Operation", "Query", "Account", "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AuditEventCriteria), global::Tbadmin.AuditEventCriteria.Parser, new[]{ "ActorAccountId", "EventTime", "EventType", "RemoteIpNet", "ServerHost", "Operation", "Query", "AccountId", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AuditEventSort), global::Tbadmin.AuditEventSort.Parser, new[]{ "First", "Second", "Descending" }, null, new[]{ typeof(global::Tbadmin.AuditEventSort.Types.SortBy) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SearchAuditHistoryRequest), global::Tbadmin.SearchAuditHistoryRequest.Parser, new[]{ "Criteria", "Sort", "Offset", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SearchAuditHistoryResult), global::Tbadmin.SearchAuditHistoryResult.Parser, new[]{ "Events", "EndOfData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AuditEventType {
    [pbr::OriginalName("AUDIT_EVENT_ZERO")] AuditEventZero = 0,
    [pbr::OriginalName("USER")] User = 1,
    [pbr::OriginalName("ACCOUNT")] Account = 2,
    [pbr::OriginalName("ORDER")] Order = 3,
    [pbr::OriginalName("QUERY")] Query = 4,
  }

  #endregion

  #region Messages
  public sealed partial class AccountSummary : pb::IMessage<AccountSummary> {
    private static readonly pb::MessageParser<AccountSummary> _parser = new pb::MessageParser<AccountSummary>(() => new AccountSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSummary(AccountSummary other) : this() {
      accountId_ = other.accountId_;
      email_ = other.email_;
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSummary Clone() {
      return new AccountSummary(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 3;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Email != other.Email) return false;
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountSummary other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Handle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditAccount : pb::IMessage<AuditAccount> {
    private static readonly pb::MessageParser<AuditAccount> _parser = new pb::MessageParser<AuditAccount>(() => new AuditAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditAccount(AuditAccount other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      loginStatus_ = other.loginStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditAccount Clone() {
      return new AuditAccount(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Tbadmin.AccountSummary user_;
    /// <summary>
    /// Account that was affected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AccountSummary User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "login_status" field.</summary>
    public const int LoginStatusFieldNumber = 2;
    private global::Tbmatch.LoginStatus loginStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.LoginStatus LoginStatus {
      get { return loginStatus_; }
      set {
        loginStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (LoginStatus != other.LoginStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (LoginStatus != 0) hash ^= LoginStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (LoginStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LoginStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (LoginStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditAccount other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Tbadmin.AccountSummary();
        }
        User.MergeFrom(other.User);
      }
      if (other.LoginStatus != 0) {
        LoginStatus = other.LoginStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Tbadmin.AccountSummary();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            loginStatus_ = (global::Tbmatch.LoginStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditOrder : pb::IMessage<AuditOrder> {
    private static readonly pb::MessageParser<AuditOrder> _parser = new pb::MessageParser<AuditOrder>(() => new AuditOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditOrder(AuditOrder other) : this() {
      orderNumber_ = other.orderNumber_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditOrder Clone() {
      return new AuditOrder(this);
    }

    /// <summary>Field number for the "order_number" field.</summary>
    public const int OrderNumberFieldNumber = 1;
    private long orderNumber_;
    /// <summary>
    /// Order that was affected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Tbmatch.OrderStatus status_ = 0;
    /// <summary>
    /// Order status as of the end of this event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.OrderStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderNumber != other.OrderNumber) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderNumber != 0L) hash ^= OrderNumber.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OrderNumber);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderNumber);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditOrder other) {
      if (other == null) {
        return;
      }
      if (other.OrderNumber != 0L) {
        OrderNumber = other.OrderNumber;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderNumber = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::Tbmatch.OrderStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditEvent : pb::IMessage<AuditEvent> {
    private static readonly pb::MessageParser<AuditEvent> _parser = new pb::MessageParser<AuditEvent>(() => new AuditEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEvent(AuditEvent other) : this() {
      Actor = other.actor_ != null ? other.Actor.Clone() : null;
      eventTime_ = other.eventTime_;
      eventType_ = other.eventType_;
      remoteIp_ = other.remoteIp_;
      serverHost_ = other.serverHost_;
      operation_ = other.operation_;
      query_ = other.query_;
      Account = other.account_ != null ? other.Account.Clone() : null;
      Order = other.order_ != null ? other.Order.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEvent Clone() {
      return new AuditEvent(this);
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 2;
    private global::Tbadmin.AccountSummary actor_;
    /// <summary>
    /// User who initiated the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AccountSummary Actor {
      get { return actor_; }
      set {
        actor_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 3;
    private string eventTime_ = "";
    /// <summary>
    /// When the operation occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 4;
    private global::Tbadmin.AuditEventType eventType_ = 0;
    /// <summary>
    /// Category of the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditEventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "remote_ip" field.</summary>
    public const int RemoteIpFieldNumber = 5;
    private string remoteIp_ = "";
    /// <summary>
    /// IP address of the initiating session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoteIp {
      get { return remoteIp_; }
      set {
        remoteIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_host" field.</summary>
    public const int ServerHostFieldNumber = 6;
    private string serverHost_ = "";
    /// <summary>
    /// Hostname of the server that handled the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerHost {
      get { return serverHost_; }
      set {
        serverHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 9;
    private string operation_ = "";
    /// <summary>
    /// Name of the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Operation {
      get { return operation_; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 10;
    private string query_ = "";
    /// <summary>
    /// Parameters of the query, if one was invoked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 11;
    private global::Tbadmin.AuditAccount account_;
    /// <summary>
    /// Account that was affected, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditAccount Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 12;
    private global::Tbadmin.AuditOrder order_;
    /// <summary>
    /// Order that was affected, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditOrder Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Actor, other.Actor)) return false;
      if (EventTime != other.EventTime) return false;
      if (EventType != other.EventType) return false;
      if (RemoteIp != other.RemoteIp) return false;
      if (ServerHost != other.ServerHost) return false;
      if (Operation != other.Operation) return false;
      if (Query != other.Query) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actor_ != null) hash ^= Actor.GetHashCode();
      if (EventTime.Length != 0) hash ^= EventTime.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (RemoteIp.Length != 0) hash ^= RemoteIp.GetHashCode();
      if (ServerHost.Length != 0) hash ^= ServerHost.GetHashCode();
      if (Operation.Length != 0) hash ^= Operation.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (order_ != null) hash ^= Order.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Actor);
      }
      if (EventTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EventTime);
      }
      if (EventType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EventType);
      }
      if (RemoteIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RemoteIp);
      }
      if (ServerHost.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServerHost);
      }
      if (Operation.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Operation);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Query);
      }
      if (account_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Account);
      }
      if (order_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Order);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
      }
      if (EventTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventTime);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (RemoteIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteIp);
      }
      if (ServerHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerHost);
      }
      if (Operation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Operation);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditEvent other) {
      if (other == null) {
        return;
      }
      if (other.actor_ != null) {
        if (actor_ == null) {
          actor_ = new global::Tbadmin.AccountSummary();
        }
        Actor.MergeFrom(other.Actor);
      }
      if (other.EventTime.Length != 0) {
        EventTime = other.EventTime;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.RemoteIp.Length != 0) {
        RemoteIp = other.RemoteIp;
      }
      if (other.ServerHost.Length != 0) {
        ServerHost = other.ServerHost;
      }
      if (other.Operation.Length != 0) {
        Operation = other.Operation;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::Tbadmin.AuditAccount();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.order_ != null) {
        if (order_ == null) {
          order_ = new global::Tbadmin.AuditOrder();
        }
        Order.MergeFrom(other.Order);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (actor_ == null) {
              actor_ = new global::Tbadmin.AccountSummary();
            }
            input.ReadMessage(actor_);
            break;
          }
          case 26: {
            EventTime = input.ReadString();
            break;
          }
          case 32: {
            eventType_ = (global::Tbadmin.AuditEventType) input.ReadEnum();
            break;
          }
          case 42: {
            RemoteIp = input.ReadString();
            break;
          }
          case 50: {
            ServerHost = input.ReadString();
            break;
          }
          case 74: {
            Operation = input.ReadString();
            break;
          }
          case 82: {
            Query = input.ReadString();
            break;
          }
          case 90: {
            if (account_ == null) {
              account_ = new global::Tbadmin.AuditAccount();
            }
            input.ReadMessage(account_);
            break;
          }
          case 98: {
            if (order_ == null) {
              order_ = new global::Tbadmin.AuditOrder();
            }
            input.ReadMessage(order_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Criteria that can constrain a search for audit events.
  /// </summary>
  public sealed partial class AuditEventCriteria : pb::IMessage<AuditEventCriteria> {
    private static readonly pb::MessageParser<AuditEventCriteria> _parser = new pb::MessageParser<AuditEventCriteria>(() => new AuditEventCriteria());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditEventCriteria> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEventCriteria() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEventCriteria(AuditEventCriteria other) : this() {
      actorAccountId_ = other.actorAccountId_;
      EventTime = other.eventTime_ != null ? other.EventTime.Clone() : null;
      eventType_ = other.eventType_;
      remoteIpNet_ = other.remoteIpNet_;
      ServerHost = other.serverHost_ != null ? other.ServerHost.Clone() : null;
      Operation = other.operation_ != null ? other.Operation.Clone() : null;
      Query = other.query_ != null ? other.Query.Clone() : null;
      accountId_ = other.accountId_;
      orderId_ = other.orderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEventCriteria Clone() {
      return new AuditEventCriteria(this);
    }

    /// <summary>Field number for the "actor_account_id" field.</summary>
    public const int ActorAccountIdFieldNumber = 1;
    private long actorAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActorAccountId {
      get { return actorAccountId_; }
      set {
        actorAccountId_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 2;
    private global::Tbmatch.TimeRange eventTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.TimeRange EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private global::Tbadmin.AuditEventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditEventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "remote_ip_net" field.</summary>
    public const int RemoteIpNetFieldNumber = 4;
    private string remoteIpNet_ = "";
    /// <summary>
    /// CIDR netmask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoteIpNet {
      get { return remoteIpNet_; }
      set {
        remoteIpNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_host" field.</summary>
    public const int ServerHostFieldNumber = 5;
    private global::Tbmatch.StringMatch serverHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.StringMatch ServerHost {
      get { return serverHost_; }
      set {
        serverHost_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 6;
    private global::Tbmatch.StringMatch operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.StringMatch Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 7;
    private global::Tbmatch.StringMatch query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.StringMatch Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 11;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 12;
    private long orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditEventCriteria);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditEventCriteria other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorAccountId != other.ActorAccountId) return false;
      if (!object.Equals(EventTime, other.EventTime)) return false;
      if (EventType != other.EventType) return false;
      if (RemoteIpNet != other.RemoteIpNet) return false;
      if (!object.Equals(ServerHost, other.ServerHost)) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      if (!object.Equals(Query, other.Query)) return false;
      if (AccountId != other.AccountId) return false;
      if (OrderId != other.OrderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActorAccountId != 0L) hash ^= ActorAccountId.GetHashCode();
      if (eventTime_ != null) hash ^= EventTime.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (RemoteIpNet.Length != 0) hash ^= RemoteIpNet.GetHashCode();
      if (serverHost_ != null) hash ^= ServerHost.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (OrderId != 0L) hash ^= OrderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorAccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorAccountId);
      }
      if (eventTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventTime);
      }
      if (EventType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (RemoteIpNet.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RemoteIpNet);
      }
      if (serverHost_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ServerHost);
      }
      if (operation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Operation);
      }
      if (query_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Query);
      }
      if (AccountId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(AccountId);
      }
      if (OrderId != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(OrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActorAccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorAccountId);
      }
      if (eventTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventTime);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (RemoteIpNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteIpNet);
      }
      if (serverHost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerHost);
      }
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (OrderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditEventCriteria other) {
      if (other == null) {
        return;
      }
      if (other.ActorAccountId != 0L) {
        ActorAccountId = other.ActorAccountId;
      }
      if (other.eventTime_ != null) {
        if (eventTime_ == null) {
          eventTime_ = new global::Tbmatch.TimeRange();
        }
        EventTime.MergeFrom(other.EventTime);
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.RemoteIpNet.Length != 0) {
        RemoteIpNet = other.RemoteIpNet;
      }
      if (other.serverHost_ != null) {
        if (serverHost_ == null) {
          serverHost_ = new global::Tbmatch.StringMatch();
        }
        ServerHost.MergeFrom(other.ServerHost);
      }
      if (other.operation_ != null) {
        if (operation_ == null) {
          operation_ = new global::Tbmatch.StringMatch();
        }
        Operation.MergeFrom(other.Operation);
      }
      if (other.query_ != null) {
        if (query_ == null) {
          query_ = new global::Tbmatch.StringMatch();
        }
        Query.MergeFrom(other.Query);
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.OrderId != 0L) {
        OrderId = other.OrderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActorAccountId = input.ReadInt64();
            break;
          }
          case 18: {
            if (eventTime_ == null) {
              eventTime_ = new global::Tbmatch.TimeRange();
            }
            input.ReadMessage(eventTime_);
            break;
          }
          case 24: {
            eventType_ = (global::Tbadmin.AuditEventType) input.ReadEnum();
            break;
          }
          case 34: {
            RemoteIpNet = input.ReadString();
            break;
          }
          case 42: {
            if (serverHost_ == null) {
              serverHost_ = new global::Tbmatch.StringMatch();
            }
            input.ReadMessage(serverHost_);
            break;
          }
          case 50: {
            if (operation_ == null) {
              operation_ = new global::Tbmatch.StringMatch();
            }
            input.ReadMessage(operation_);
            break;
          }
          case 58: {
            if (query_ == null) {
              query_ = new global::Tbmatch.StringMatch();
            }
            input.ReadMessage(query_);
            break;
          }
          case 88: {
            AccountId = input.ReadInt64();
            break;
          }
          case 96: {
            OrderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Options for sorting audit events returned by a query.
  /// </summary>
  public sealed partial class AuditEventSort : pb::IMessage<AuditEventSort> {
    private static readonly pb::MessageParser<AuditEventSort> _parser = new pb::MessageParser<AuditEventSort>(() => new AuditEventSort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditEventSort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEventSort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEventSort(AuditEventSort other) : this() {
      first_ = other.first_;
      second_ = other.second_;
      descending_ = other.descending_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditEventSort Clone() {
      return new AuditEventSort(this);
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 1;
    private global::Tbadmin.AuditEventSort.Types.SortBy first_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditEventSort.Types.SortBy First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 2;
    private global::Tbadmin.AuditEventSort.Types.SortBy second_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditEventSort.Types.SortBy Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    /// <summary>Field number for the "descending" field.</summary>
    public const int DescendingFieldNumber = 3;
    private bool descending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Descending {
      get { return descending_; }
      set {
        descending_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditEventSort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditEventSort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (First != other.First) return false;
      if (Second != other.Second) return false;
      if (Descending != other.Descending) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (First != 0) hash ^= First.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      if (Descending != false) hash ^= Descending.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (First != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) First);
      }
      if (Second != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Second);
      }
      if (Descending != false) {
        output.WriteRawTag(24);
        output.WriteBool(Descending);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (First != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) First);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Second);
      }
      if (Descending != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditEventSort other) {
      if (other == null) {
        return;
      }
      if (other.First != 0) {
        First = other.First;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
      if (other.Descending != false) {
        Descending = other.Descending;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            first_ = (global::Tbadmin.AuditEventSort.Types.SortBy) input.ReadEnum();
            break;
          }
          case 16: {
            second_ = (global::Tbadmin.AuditEventSort.Types.SortBy) input.ReadEnum();
            break;
          }
          case 24: {
            Descending = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuditEventSort message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SortBy {
        [pbr::OriginalName("SORT_BY_ZERO")] Zero = 0,
        [pbr::OriginalName("ACTOR_ID")] ActorId = 1,
        [pbr::OriginalName("EVENT_TIME")] EventTime = 2,
        [pbr::OriginalName("REMOTE_IP")] RemoteIp = 3,
        [pbr::OriginalName("SERVER_HOST")] ServerHost = 4,
        [pbr::OriginalName("OPERATION")] Operation = 5,
        [pbr::OriginalName("ACCOUNT_ID")] AccountId = 6,
        [pbr::OriginalName("ORDER_ID")] OrderId = 7,
      }

    }
    #endregion

  }

  public sealed partial class SearchAuditHistoryRequest : pb::IMessage<SearchAuditHistoryRequest> {
    private static readonly pb::MessageParser<SearchAuditHistoryRequest> _parser = new pb::MessageParser<SearchAuditHistoryRequest>(() => new SearchAuditHistoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAuditHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAuditHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAuditHistoryRequest(SearchAuditHistoryRequest other) : this() {
      Criteria = other.criteria_ != null ? other.Criteria.Clone() : null;
      Sort = other.sort_ != null ? other.Sort.Clone() : null;
      offset_ = other.offset_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAuditHistoryRequest Clone() {
      return new SearchAuditHistoryRequest(this);
    }

    /// <summary>Field number for the "criteria" field.</summary>
    public const int CriteriaFieldNumber = 1;
    private global::Tbadmin.AuditEventCriteria criteria_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditEventCriteria Criteria {
      get { return criteria_; }
      set {
        criteria_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 2;
    private global::Tbadmin.AuditEventSort sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditEventSort Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchAuditHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchAuditHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Criteria, other.Criteria)) return false;
      if (!object.Equals(Sort, other.Sort)) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (criteria_ != null) hash ^= Criteria.GetHashCode();
      if (sort_ != null) hash ^= Sort.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (criteria_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Criteria);
      }
      if (sort_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sort);
      }
      if (Offset != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Offset);
      }
      if (Limit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (criteria_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Criteria);
      }
      if (sort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sort);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchAuditHistoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.criteria_ != null) {
        if (criteria_ == null) {
          criteria_ = new global::Tbadmin.AuditEventCriteria();
        }
        Criteria.MergeFrom(other.Criteria);
      }
      if (other.sort_ != null) {
        if (sort_ == null) {
          sort_ = new global::Tbadmin.AuditEventSort();
        }
        Sort.MergeFrom(other.Sort);
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (criteria_ == null) {
              criteria_ = new global::Tbadmin.AuditEventCriteria();
            }
            input.ReadMessage(criteria_);
            break;
          }
          case 18: {
            if (sort_ == null) {
              sort_ = new global::Tbadmin.AuditEventSort();
            }
            input.ReadMessage(sort_);
            break;
          }
          case 40: {
            Offset = input.ReadInt32();
            break;
          }
          case 48: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchAuditHistoryResult : pb::IMessage<SearchAuditHistoryResult> {
    private static readonly pb::MessageParser<SearchAuditHistoryResult> _parser = new pb::MessageParser<SearchAuditHistoryResult>(() => new SearchAuditHistoryResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAuditHistoryResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.AuditReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAuditHistoryResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAuditHistoryResult(SearchAuditHistoryResult other) : this() {
      events_ = other.events_.Clone();
      endOfData_ = other.endOfData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAuditHistoryResult Clone() {
      return new SearchAuditHistoryResult(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.AuditEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.AuditEvent.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.AuditEvent> events_ = new pbc::RepeatedField<global::Tbadmin.AuditEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.AuditEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "end_of_data" field.</summary>
    public const int EndOfDataFieldNumber = 2;
    private bool endOfData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndOfData {
      get { return endOfData_; }
      set {
        endOfData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchAuditHistoryResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchAuditHistoryResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      if (EndOfData != other.EndOfData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (EndOfData != false) hash ^= EndOfData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (EndOfData != false) {
        output.WriteRawTag(16);
        output.WriteBool(EndOfData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (EndOfData != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchAuditHistoryResult other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      if (other.EndOfData != false) {
        EndOfData = other.EndOfData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 16: {
            EndOfData = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
