// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tbadmin/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tbadmin {

  /// <summary>Holder for reflection information generated from tbadmin/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for tbadmin/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0YmFkbWluL2NvbmZpZy5wcm90bxIHdGJhZG1pbhoRdGJycGMvdGJycGMu",
            "cHJvdG8aE3RibWF0Y2gvbWF0Y2gucHJvdG8iNQoMR2xvYmFsQ29uZmlnEhkK",
            "EXJlcV9idWlsZF92ZXJzaW9uGAEgASgJOgrq+RgGR2xvYmFsIosJChBNYXRj",
            "aFF1ZXVlQ29uZmlnEhQKDHByb3Bvc2FsX3R0bBgBIAEoBRIYChBxdWV1ZV90",
            "aWNrZXRfdHRsGAIgASgFEhMKC3NlbGVjdF9zaXplGAMgASgFEhgKEGVjaGVs",
            "b25fZGlzdF9taW4YBCABKAESGAoQZWNoZWxvbl9kaXN0X21heBgFIAEoARIc",
            "ChRlY2hlbG9uX2Rpc3RfcGVyX3NlYxgGIAEoARIbChNlY2hlbG9uX3Njb3Jl",
            "X2NvZWZmGAcgASgBEiMKG2VjaGVsb25fZGlzdF9ub3JtYWxpemVkX21pbhgk",
            "IAEoARIjChtlY2hlbG9uX2Rpc3Rfbm9ybWFsaXplZF9tYXgYJSABKAESFgoO",
            "cG9pbnRfZGlzdF9taW4YCCABKAESFgoOcG9pbnRfZGlzdF9tYXgYCSABKAES",
            "GgoScG9pbnRfZGlzdF9wZXJfc2VjGAogASgBEhkKEXBvaW50X3Njb3JlX2Nv",
            "ZWZmGAsgASgBEiEKGXBvaW50X2Rpc3Rfbm9ybWFsaXplZF9taW4YJiABKAES",
            "IQoZcG9pbnRfZGlzdF9ub3JtYWxpemVkX21heBgnIAEoARIdChVsYXN0X29w",
            "cF9leGNsdWRlX3RpbWUYDCABKAESGAoQbGFzdF9vcHBfdGltZW91dBgNIAEo",
            "ARIkChxjcm9zc19jb250aW5lbnRfZXhjbHVkZV90aW1lGA4gASgBEhYKDnBp",
            "bmdfc2NvcmVfbWluGA8gASgBEhYKDnBpbmdfc2NvcmVfbWF4GBAgASgBEhoK",
            "EnBpbmdfc2NvcmVfcGVyX3NlYxgRIAEoARIYChBwaW5nX3Njb3JlX2NvZWZm",
            "GBIgASgBEiEKGXBpbmdfc2NvcmVfbm9ybWFsaXplZF9taW4YHiABKAESIQoZ",
            "cGluZ19zY29yZV9ub3JtYWxpemVkX21heBgfIAEoARIUCgxnZW9fZGlzdF9t",
            "aW4YEyABKAESFAoMZ2VvX2Rpc3RfbWF4GBQgASgBEhgKEGdlb19kaXN0X3Bl",
            "cl9zZWMYFSABKAESFwoPZ2VvX3Njb3JlX2NvZWZmGBYgASgBEh8KF2dlb19k",
            "aXN0X25vcm1hbGl6ZWRfbWluGCAgASgBEh8KF2dlb19kaXN0X25vcm1hbGl6",
            "ZWRfbWF4GCEgASgBEhcKD3JhdGluZ19kaXN0X21pbhgXIAEoARIbChNyYXRp",
            "bmdfZGlzdF9wZXJfc2VjGBkgASgBEhoKEnJhdGluZ19zY29yZV9jb2VmZhga",
            "IAEoARIiChpyYXRpbmdfZGlzdF9ub3JtYWxpemVkX21pbhgiIAEoARIiChpy",
            "YXRpbmdfZGlzdF9ub3JtYWxpemVkX21heBgjIAEoARIYChBtYWludGVuYW5j",
            "ZV9tb2RlGBwgASgFEhwKFGFjdGl2ZV9tYXRjaF90aW1lb3V0GB0gASgBEhgK",
            "EHdhaXRfdGltZW91dF9zZWMYKCABKAUSJAocX19kZXByZWNhdGVkX3JhdGlu",
            "Z19kaXN0X21heBgYIAEoAToO6vkYCk1hdGNoUXVldWUiTwoPTWF0Y2hVc2Vy",
            "Q29uZmlnEhYKDnBpbmdfdGFibGVfdHRsGAEgASgFEhUKDWJsYWNrbGlzdF90",
            "dGwYAiABKAU6Der5GAlNYXRjaFVzZXIicQoLTG9iYnlDb25maWcSEwoLbWF4",
            "X21lbWJlcnMYASABKAUSEQoJbWF0Y2hfdHRsGAIgASgFEhEKCWxvYmJ5X3R0",
            "bBgDIAEoBRIcChRhY3RpdmVfbWF0Y2hfdGltZW91dBgEIAEoBToJ6vkYBUxv",
            "YmJ5IlgKE0xvZ0FnZ3JlZ2F0b3JDb25maWcSFQoNbWF0Y2hfbG9nX3R0bBgB",
            "IAEoBRIXCg9kZWZhdWx0X2xvZ190dGwYFCABKAU6Eer5GA1Mb2dBZ2dyZWdh",
            "dG9yIjUKEUZlYXR1cmVEZWZpbml0aW9uEgsKA3RhZxgBIAEoCRITCgtkZXNj",
            "cmlwdGlvbhgCIAEoCSLFAQoLRmVhdHVyZVJ1bGUSDwoHcnVsZV9pZBgBIAEo",
            "AxIuCgtmZWF0dXJlX3NldBgCIAEoCzIZLnRibWF0Y2guQ2xpZW50RmVhdHVy",
            "ZVNldBIPCgdlbmFibGVkGAMgASgIEhAKCHByaW9yaXR5GAQgASgFEg0KBW93",
            "bmVyGAUgASgJEg0KBW5vdGVzGAYgASgJEhgKEGFjdGl2ZV90aW1lX3VuaXgY",
            "CiABKAMSGgoSaW5hY3RpdmVfdGltZV91bml4GAsgASgDIj4KFUdldEdsb2Jh",
            "bENvbmZpZ1Jlc3VsdBIlCgZjb25maWcYASABKAsyFS50YmFkbWluLkdsb2Jh",
            "bENvbmZpZyI/ChZTZXRHbG9iYWxDb25maWdSZXF1ZXN0EiUKBmNvbmZpZxgB",
            "IAEoCzIVLnRiYWRtaW4uR2xvYmFsQ29uZmlnIkYKGUdldE1hdGNoUXVldWVD",
            "b25maWdSZXN1bHQSKQoGY29uZmlnGAEgASgLMhkudGJhZG1pbi5NYXRjaFF1",
            "ZXVlQ29uZmlnIkcKGlNldE1hdGNoUXVldWVDb25maWdSZXF1ZXN0EikKBmNv",
            "bmZpZxgBIAEoCzIZLnRiYWRtaW4uTWF0Y2hRdWV1ZUNvbmZpZyJEChhHZXRN",
            "YXRjaFVzZXJDb25maWdSZXN1bHQSKAoGY29uZmlnGAEgASgLMhgudGJhZG1p",
            "bi5NYXRjaFVzZXJDb25maWciRQoZU2V0TWF0Y2hVc2VyQ29uZmlnUmVxdWVz",
            "dBIoCgZjb25maWcYASABKAsyGC50YmFkbWluLk1hdGNoVXNlckNvbmZpZyI8",
            "ChRHZXRMb2JieUNvbmZpZ1Jlc3VsdBIkCgZjb25maWcYASABKAsyFC50YmFk",
            "bWluLkxvYmJ5Q29uZmlnIj0KFVNldExvYmJ5Q29uZmlnUmVxdWVzdBIkCgZj",
            "b25maWcYASABKAsyFC50YmFkbWluLkxvYmJ5Q29uZmlnIkcKHExpc3RGZWF0",
            "dXJlRGVmaW5pdGlvbnNSZXN1bHQSJwoDZGVmGAEgAygLMhoudGJhZG1pbi5G",
            "ZWF0dXJlRGVmaW5pdGlvbiJGChtTZXRGZWF0dXJlRGVmaW5pdGlvblJlcXVl",
            "c3QSJwoDZGVmGAEgASgLMhoudGJhZG1pbi5GZWF0dXJlRGVmaW5pdGlvbiIt",
            "Ch5EZWxldGVGZWF0dXJlRGVmaW5pdGlvblJlcXVlc3QSCwoDdGFnGAEgASgJ",
            "IjwKFkxpc3RGZWF0dXJlUnVsZXNSZXN1bHQSIgoEcnVsZRgBIAMoCzIULnRi",
            "YWRtaW4uRmVhdHVyZVJ1bGUiSQoXR2V0QWN0aXZlRmVhdHVyZXNSZXN1bHQS",
            "LgoLZmVhdHVyZV9zZXQYASABKAsyGS50Ym1hdGNoLkNsaWVudEZlYXR1cmVT",
            "ZXQiPgoYQ3JlYXRlRmVhdHVyZVJ1bGVSZXF1ZXN0EiIKBHJ1bGUYASABKAsy",
            "FC50YmFkbWluLkZlYXR1cmVSdWxlIj4KGFVwZGF0ZUZlYXR1cmVSdWxlUmVx",
            "dWVzdBIiCgRydWxlGAEgASgLMhQudGJhZG1pbi5GZWF0dXJlUnVsZSIrChhE",
            "ZWxldGVGZWF0dXJlUnVsZVJlcXVlc3QSDwoHcnVsZV9pZBgBIAEoAyLCAQoO",
            "RGF0YWJhc2VDb25maWcSDAoEdXNlchgBIAEoCRIQCghwYXNzd29yZBgCIAEo",
            "CRIMCgRob3N0GAMgASgJEgwKBHBvcnQYBCABKAUSEAoIZGF0YWJhc2UYBSAB",
            "KAkSFwoPY29ubmVjdF90aW1lb3V0GAYgASgFEhAKCG1heF9pZGxlGAcgASgF",
            "EhAKCG1heF9vcGVuGAggASgFEhAKCHNzbF9tb2RlGAkgASgJEhMKC3NjaGVt",
            "YV9wYXRoGBQgASgJItUBCgtSZWRpc0NvbmZpZxIMCgRob3N0GAEgASgJEgwK",
            "BHBvcnQYAiABKAUSEAoIcGFzc3dvcmQYAyABKAkSEAoIbWF4X2lkbGUYBCAB",
            "KAUSEAoIZGF0YWJhc2UYBSABKAUSGgoSY29ubmVjdF90aW1lb3V0X21zGAog",
            "ASgFEhcKD3JlYWRfdGltZW91dF9tcxgLIAEoBRIYChB3cml0ZV90aW1lb3V0",
            "X21zGAwgASgFEhAKCGx1YV9wYXRoGA0gASgJEhMKC2x1YV9pbmNsdWRlGA4g",
            "AygJIrsBCgpHQXBpQ29uZmlnEhEKCXByb3h5X3VybBgBIAEoCRISCgpwcm9q",
            "ZWN0X2lkGAIgASgJEioKBGF1dGgYBCABKA4yHC50YmFkbWluLkdBcGlDb25m",
            "aWcuQXV0aFR5cGUSEwoLZ2NlX2FjY291bnQYCiABKAkSEwoLc2RrX2FjY291",
            "bnQYCyABKAkiMAoIQXV0aFR5cGUSEgoOQVVUSF9UWVBFX1pFUk8QABIHCgNH",
            "Q0UQARIHCgNTREsQAiJOChBHY3NTdG9yYWdlQ29uZmlnEhEKCXByb3h5X3Vy",
            "bBgBIAEoCRISCgpwcm9qZWN0X2lkGAIgASgJEhMKC2J1Y2tldF9uYW1lGAMg",
            "ASgJIjMKDlNlc3Npb25BdXRoS2V5Eg8KB2N1cnJlbnQYASABKAkSEAoIcHJl",
            "dmlvdXMYAiABKAki0AEKCVJQQ0NvbmZpZxIRCglodHRwX3BvcnQYASABKAUS",
            "DwoHcnBjX3VyaRgCIAEoCRIsCgtzZXNzaW9uX2tleRgDIAEoCzIXLnRiYWRt",
            "aW4uU2Vzc2lvbkF1dGhLZXkSHAoUc2Vzc2lvbl90aW1lb3V0X3NlY3MYBCAB",
            "KAUSIgoac2Vzc2lvbl9hY3RpdmVfd2luZG93X3NlY3MYBSABKAUSGAoQbWF4",
            "X3JlcXVlc3Rfc2l6ZRgGIAEoAxIVCg1qc29uX2xvZ19wYXRoGAogASgJIk4K",
            "DFBheW1lbnRDcmVkcxIPCgdhcGlfdXJsGAEgASgJEhQKDGFwaV9sb2dpbl9p",
            "ZBgCIAEoCRIXCg90cmFuc2FjdGlvbl9rZXkYAyABKAkiXgoSUG9ydGFsQ2xp",
            "ZW50Q29uZmlnEhUKDXJlcXVlc3RfcXVldWUYASABKAkSFAoMcmVwb3J0X3F1",
            "ZXVlGAIgASgJEhsKE3Jlc3BvbnNlX3RpbWVvdXRfbXMYAyABKAUifQoNTW9u",
            "aXRvckNvbmZpZxIQCgh2YXJzX3VyaRgBIAEoCRISCgpoZWFsdGhfdXJpGAIg",
            "ASgJEhYKDnZhcnNfYWxsb3dfbmV0GAMgAygJEhgKEGhlYWx0aF9hbGxvd19u",
            "ZXQYBCADKAkSFAoMYXBwY29uZnpfdXJpGBUgASgJIm4KDk1haWxHbG9iYWxW",
            "YXJzEhYKDnNlbmRlcl9hZGRyZXNzGAEgASgJEhEKCXNpdGVfbmFtZRgCIAEo",
            "CRITCgtzZW5kZXJfbmFtZRgEIAEoCRIcChRhY2NvdW50X3JlY292ZXJ5X3Vy",
            "bBgDIAEoCSKeAgoKTWFpbENvbmZpZxIqCgRob3N0GAEgAygLMhwudGJhZG1p",
            "bi5NYWlsQ29uZmlnLk1haWxIb3N0EgsKA3RscxgDIAEoCBIcChRpbnNlY3Vy",
            "ZV9za2lwX3ZlcmlmeRgEIAEoCBIRCglhdXRoX3VzZXIYBSABKAkSFQoNYXV0",
            "aF9wYXNzd29yZBgGIAEoCRIVCg10ZW1wbGF0ZV9wYXRoGAcgASgJEhQKDGlu",
            "Y2x1ZGVfcGF0aBgIIAEoCRITCgthdXRvX3JlbG9hZBgJIAEoCBIlCgR2YXJz",
            "GBQgASgLMhcudGJhZG1pbi5NYWlsR2xvYmFsVmFycxomCghNYWlsSG9zdBIM",
            "CgRob3N0GAEgASgJEgwKBHBvcnQYAiABKAUilAEKEE1hdGNoTWFrZXJDb25m",
            "aWcSDwoHZW5hYmxlZBgBIAEoCBIgChhtYXN0ZXJfcmV0cnlfaW50ZXJ2YWxf",
            "bXMYAiABKAUSHQoVbWFzdGVyX2xvY2tfZXhwaXJ5X21zGAMgASgFEhYKDnBv",
            "bGxfcGVyaW9kX21zGAQgASgFEhYKDmVycm9yX3JldHJ5X21zGAUgASgFIi8K",
            "EUFkbWluU2VydmVyQ29uZmlnEhoKEmVuYWJsZV9leHBvcnRfdHJpbRgBIAEo",
            "CCKlBgoMU2VydmVyQ29uZmlnEioKCWRiX2NvbmZpZxgBIAEoCzIXLnRiYWRt",
            "aW4uRGF0YWJhc2VDb25maWcSJgoKcnBjX2NvbmZpZxgCIAEoCzISLnRiYWRt",
            "aW4uUlBDQ29uZmlnEioKDHJlZGlzX2NvbmZpZxgDIAEoCzIULnRiYWRtaW4u",
            "UmVkaXNDb25maWcSIQoEbWFpbBgEIAEoCzITLnRiYWRtaW4uTWFpbENvbmZp",
            "ZxIsCg1wYXltZW50X2NyZWRzGAUgASgLMhUudGJhZG1pbi5QYXltZW50Q3Jl",
            "ZHMSMgoNcG9ydGFsX2NsaWVudBgGIAEoCzIbLnRiYWRtaW4uUG9ydGFsQ2xp",
            "ZW50Q29uZmlnEi4KC21hdGNoX21ha2VyGAcgASgLMhkudGJhZG1pbi5NYXRj",
            "aE1ha2VyQ29uZmlnEi4KDm1vbml0b3JfY29uZmlnGAogASgLMhYudGJhZG1p",
            "bi5Nb25pdG9yQ29uZmlnEjEKDmRlc3luY19zdG9yYWdlGAsgASgLMhkudGJh",
            "ZG1pbi5HY3NTdG9yYWdlQ29uZmlnEjAKDWNyYXNoX3N0b3JhZ2UYDCABKAsy",
            "GS50YmFkbWluLkdjc1N0b3JhZ2VDb25maWcSHQoVc3RhY2t3YWxrX2JpbmFy",
            "eV9wYXRoGA0gASgJEjQKEW1hdGNoX2xvZ19zdG9yYWdlGA4gASgLMhkudGJh",
            "ZG1pbi5HY3NTdG9yYWdlQ29uZmlnEh0KFWdlb2xpdGVfZGF0YWJhc2VfZmls",
            "ZRgUIAEoCRIjCgZnb29nbGUYHiABKAsyEy50YmFkbWluLkdBcGlDb25maWcS",
            "GAoQYmlncXVlcnlfZGF0YXNldBgfIAEoCRIXCg9iaWdxdWVyeV9wcmVmaXgY",
            "ICABKAkSFAoMZ29fbWF4X3Byb2NzGCggASgFEhoKEnBvcnRhbF9zaW1fZW5h",
            "YmxlZBg9IAEoCBIUCgxhZG1pbl9zZXJ2ZXIYRiABKAgSNwoTYWRtaW5fc2Vy",
            "dmVyX2NvbmZpZxhHIAEoCzIaLnRiYWRtaW4uQWRtaW5TZXJ2ZXJDb25maWci",
            "vQQKDUFjY291bnRDb25maWcSGwoTbWluX3Bhc3N3b3JkX2xlbmd0aBgBIAEo",
            "BRIcChRtaW5fcGFzc3dvcmRfY2xhc3NlcxgCIAEoBRImCg9yZWdpc3Rlcl9h",
            "Y2Nlc3MYAyADKA4yDS50YnJwYy5BY2Nlc3MSIwobZW1haWxfdmFsaWRhdGVf",
            "Y29uZmlybV9zZWNzGAQgASgFEiEKGWVtYWlsX3ZhbGlkYXRlX3VybF9wcmVm",
            "aXgYBSABKAkSHQoVdmFsaWRhdGVfbm9uY2VfbGVuZ3RoGAYgASgFEiIKGnBh",
            "c3N3b3JkX3Jlc2V0X2V4cGlyZV9zZWNzGAcgASgFEiIKGnBhc3N3b3JkX3Jl",
            "c2V0X2NvZGVfbGVuZ3RoGAggASgFEh4KFm1heF91c2VyX3NlYXJjaF9yZXN1",
            "bHQYCiABKAUSHQoVbG9ja291dF9kdXJhdGlvbl9taW5zGBQgASgFEhkKEWxv",
            "Y2tvdXRfdGhyZXNob2xkGBUgASgFEigKIHJlc2V0X2xvY2tvdXRfY291bnRl",
            "cl9hZnRlcl9taW5zGBYgASgFEiIKGnNlc3Npb25fdGlja2V0X2V4cGlyZV9z",
            "ZWNzGB4gASgFEiAKGHJlcXVpcmVfcmVnaXN0cmF0aW9uX2tleRgoIAEoCBIe",
            "ChZkaXNhbGxvd19oYW5kbGVfcmVnZXhwGCkgAygJEhoKEm51a2VfaGFuZGxl",
            "X3ByZWZpeBgqIAEoCRIUCgxudWtlX3JldHJpZXMYKyABKAUiYQoQTGV2ZWxQ",
            "cm9ncmVzc2lvbhIQCghiYXNlbGluZRgBIAEoBRITCgtjb2VmZmljaWVudBgC",
            "IAEoARIQCghtYXRjaF94cBgDIAEoBRIUCgx3aW5fYm9udXNfeHAYBCABKAUi",
            "RwoMRWNoZWxvblJ1bGVzEhMKC3RpZXJfcG9pbnRzGAEgAygFEhMKC2lnbm9y",
            "ZV9sb3NzGAIgASgIEg0KBWZpbmFsGAMgASgIInoKDUVjaGVsb25Db25maWcS",
            "JgoHZWNoZWxvbhgBIAMoCzIVLnRiYWRtaW4uRWNoZWxvblJ1bGVzEiAKGHdp",
            "bl9zdHJlYWtfYm9udXNfbWluaW11bRgKIAEoBRIfChd3aW5fc3RyZWFrX2Jv",
            "bnVzX3BvaW50cxgLIAEoBSKiAQoKUmFua0NvbmZpZxIyCg9wbGF5ZXJfcHJv",
            "Z3Jlc3MYASABKAsyGS50YmFkbWluLkxldmVsUHJvZ3Jlc3Npb24SMAoNY2hh",
            "cl9wcm9ncmVzcxgCIAEoCzIZLnRiYWRtaW4uTGV2ZWxQcm9ncmVzc2lvbhIu",
            "Cg5lY2hlbG9uX2NvbmZpZxgDIAEoCzIWLnRiYWRtaW4uRWNoZWxvbkNvbmZp",
            "ZyLDAQoTR2xpY2tvMlJhdGluZ0NvbmZpZxILCgN0YXUYASABKAISGgoScmF0",
            "aW5nX3BlcmlvZF9taW5zGAIgASgFEhkKEWNoZWNrX3BlcmlvZF9taW5zGAMg",
            "ASgFEhUKDW1heF9kZXZpYXRpb24YCiABKAISFQoNbWluX2RldmlhdGlvbhgL",
            "IAEoAhIfChdkZXZpYXRpb25fZGVjYXlfcGVyaW9kcxgMIAEoAhIZChF0eXBp",
            "Y2FsX2RldmlhdGlvbhgNIAEoAiK8BQoSTWF0Y2hTZXJ2aWNlQ29uZmlnEh4K",
            "Fm1hdGNoX3JlYWR5X3RpbWVvdXRfbXMYAiABKAUSIQoEcmFuaxgHIAEoCzIT",
            "LnRiYWRtaW4uUmFua0NvbmZpZxIaChJtYXhfcmVjZW50X3Jlc3VsdHMYCCAB",
            "KAUSHQoVbWF4X3BhY2tldF9sb3NzX3JhdGlvGBUgASgCEh8KF2Rlc3luY19y",
            "ZXBvcnRfbWF4X2RyaWZ0GB4gASgFEjMKDXJhdGluZ19jb25maWcYMiABKAsy",
            "HC50YmFkbWluLkdsaWNrbzJSYXRpbmdDb25maWcSHQoVdW5yYXRlZF9nbGlj",
            "a29fcmF0aW5nGDwgASgCEh0KFWRlZmF1bHRfZ2xpY2tvX3JhdGluZxg9IAMo",
            "AhIpCiFzZXNzaW9uX3JhdGluZ19hZGp1c3RfY29lZmZpY2llbnQYQSABKAIS",
            "HAoUbHVhX2NvbmZpZ19jYWNoZV9zZWMYRiABKAUSHAoUc3RyaWN0X2dhbWVf",
            "c2Vzc2lvbnMYUCABKAgSKgoiX19kZXByZWNhdGVkX2dldF9yYW5rZWRfdGlt",
            "ZW91dF9tcxgBIAEoBRImCh5fX2RlcHJlY2F0ZWRfcHJvdmlkZV9sb2NhbF9m",
            "c20YAyABKAgSIAoYX19kZXByZWNhdGVkX3JlcGxheV9wYXRoGAQgASgJEicK",
            "H19fZGVwcmVjYXRlZF9tYXRjaF9saWZldGltZV9zZWMYBiABKAUSIAoYX19k",
            "ZXByZWNhdGVkX3NlbGVjdF9zaXplGAkgASgFEicKH19fZGVwcmVjYXRlZF9k",
            "ZXN5bmNfcmVwb3J0X3BhdGgYBSABKAkSIAoYX19waW5nX3Rlc3RfbGlmZXRp",
            "bWVfc2VjGBQgASgFEiEKGV9fZGVwcmVjYXRlZF9nYW1lc190b193aW4YKCAB",
            "KAUiQwoSTG9iYnlTZXJ2aWNlQ29uZmlnEhgKEGpvaW5fY29kZV9sZW5ndGgY",
            "ASABKAUSEwoLbWF4X21lbWJlcnMYAiABKAUi4QEKDVBheW1lbnRDb25maWcS",
            "EgoKdGltZW91dF9tcxgBIAEoBRIQCghjdXJyZW5jeRgCIAEoCRIRCgl0ZXN0",
            "X21vZGUYAyABKAgSMwoIdmFsX21vZGUYBCABKA4yIS50YmFkbWluLlBheW1l",
            "bnRDb25maWcuVmFsaWRhdGlvbhIhChlkaXJlY3RfcmVzcG9uc2VfZGVsaW1p",
            "dGVyGAUgASgJIj8KClZhbGlkYXRpb24SEwoPVkFMSURBVElPTl9aRVJPEAAS",
            "CAoETk9ORRABEggKBFRFU1QQAhIICgRMSVZFEAMioAIKDEN1cnJlbmN5RGVz",
            "YxIMCgRjb2RlGAEgASgJEhEKCXByZWNpc2lvbhgCIAEoBRIOCgZzeW1ib2wY",
            "AyABKAkSFAoMY291bnRyeV9pc28zGAQgAygJEh4KFmJhbGFuY2VfcHVyY2hh",
            "c2VfYWxsb3cYKCABKAgSLgoYYmFsYW5jZV9wdXJjaGFzZV9kZWZhdWx0GCkg",
            "AygLMgwudGJycGMuTW9uZXkSKgoUYmFsYW5jZV9wdXJjaGFzZV9taW4YKiAB",
            "KAsyDC50YnJwYy5Nb25leRIqChRiYWxhbmNlX3B1cmNoYXNlX21heBgrIAEo",
            "CzIMLnRicnBjLk1vbmV5EiEKC2JhbGFuY2VfbWF4GDIgASgLMgwudGJycGMu",
            "TW9uZXkiTwoOQ3VycmVuY3lDb25maWcSIwoEZGVzYxgBIAMoCzIVLnRiYWRt",
            "aW4uQ3VycmVuY3lEZXNjEhgKEGRlZmF1bHRfY3VycmVuY3kYAiABKAkixAEK",
            "ClNob3BDb25maWcSJwoHcGF5bWVudBgBIAEoCzIWLnRiYWRtaW4uUGF5bWVu",
            "dENvbmZpZxIpCghjdXJyZW5jeRgCIAEoCzIXLnRiYWRtaW4uQ3VycmVuY3lD",
            "b25maWcSHwoXbWF4X29yZGVyX3NlYXJjaF9yZXN1bHQYCiABKAUSHwoXb3Jk",
            "ZXJfaGlzdG9yeV9wYWdlX3NpemUYCyABKAUSIAoYbWF4X2JhbGFuY2VfaGlz",
            "dG9yeV9kYXlzGAwgASgFImMKC0V2ZW50Q29uZmlnEh4KFmNoYW5nZV93YWl0",
            "X3RpbWVvdXRfbXMYCiABKAUSFwoPZXZlbnRfZXhwaXJ5X21zGAsgASgFEhsK",
            "E3VzZXJfa2V5X2V4cGlyeV9zZWMYDCABKAUiTQoLQXVkaXRDb25maWcSHwoX",
            "bWF4X2F1ZGl0X3NlYXJjaF9yZXN1bHQYASABKAUSHQoVbWF4X2F1ZGl0X3Nl",
            "YXJjaF9kYXlzGAIgASgFIm8KEUNyYXNoUmVwb3J0Q29uZmlnEiIKGnNob3Vs",
            "ZF9zdG9yZV9jcmFzaF9idW5kbGVzGAEgASgIEhwKFG1heF92ZXJzaW9uc190",
            "b19rZWVwGAIgASgFEhgKEHBvbGxpbmdfaW50ZXJ2YWwYAyABKAUiYwoSU2Vy",
            "dmVyUm9sbG91dEZsYWdzEiEKGXNlY3VyZV9wb3J0YWxfdWRwX3RyYWZmaWMY",
            "AiABKAgSKgoiX19kZXByZWNhdGVkX2F1dG9fcmVzdW1lX2dldF9tYXRjaBgB",
            "IAEoCCIuChJEZXN5bmNSZXBvcnRDb25maWcSGAoQcG9sbGluZ19pbnRlcnZh",
            "bBgDIAEoBSJuChBFeHBvcnRUcmltQ29uZmlnEhQKDHRyaW1fZW5hYmxlZBgB",
            "IAEoCBIUCgxtaW5fYWdlX2RheXMYAiABKAUSEgoKYmF0Y2hfc2l6ZRgDIAEo",
            "BRIaChJ0cmltX2ludGVydmFsX21pbnMYBCABKAUiiQQKCUFwcENvbmZpZxIu",
            "Cg5hY2NvdW50X2NvbmZpZxgBIAEoCzIWLnRiYWRtaW4uQWNjb3VudENvbmZp",
            "ZxIxCgxtYXRjaF9jb25maWcYAiABKAsyGy50YmFkbWluLk1hdGNoU2Vydmlj",
            "ZUNvbmZpZxIoCgtzaG9wX2NvbmZpZxgDIAEoCzITLnRiYWRtaW4uU2hvcENv",
            "bmZpZxIqCgxldmVudF9jb25maWcYBCABKAsyFC50YmFkbWluLkV2ZW50Q29u",
            "ZmlnEioKDGF1ZGl0X2NvbmZpZxgFIAEoCzIULnRiYWRtaW4uQXVkaXRDb25m",
            "aWcSMQoMbG9iYnlfY29uZmlnGAYgASgLMhsudGJhZG1pbi5Mb2JieVNlcnZp",
            "Y2VDb25maWcSNwoTY3Jhc2hfcmVwb3J0X2NvbmZpZxgHIAEoCzIaLnRiYWRt",
            "aW4uQ3Jhc2hSZXBvcnRDb25maWcSOQoUc2VydmVyX3JvbGxvdXRfZmxhZ3MY",
            "CCABKAsyGy50YmFkbWluLlNlcnZlclJvbGxvdXRGbGFncxI5ChRkZXN5bmNf",
            "cmVwb3J0X2NvbmZpZxgJIAEoCzIbLnRiYWRtaW4uRGVzeW5jUmVwb3J0Q29u",
            "ZmlnEjUKEmV4cG9ydF90cmltX2NvbmZpZxgKIAEoCzIZLnRiYWRtaW4uRXhw",
            "b3J0VHJpbUNvbmZpZyL0AwoPRkVDb250ZW50Q29uZmlnEhAKCGRhdGFfZGly",
            "GAEgASgJEhIKCnN0YXRpY19kaXIYAiABKAkSEgoKZGV2ZWxfbW9kZRgDIAEo",
            "CBITCgttZXNzYWdlX2RpchgEIAEoCRIYChBhcHBsaWNhdGlvbl9uYW1lGAUg",
            "ASgJEhoKEnJlY2FwdGNoYV9zaXRlX2tleRgGIAEoCRIcChRyZWNhcHRjaGFf",
            "c2VjcmV0X2tleRgHIAEoCRIcChRyZWNhcHRjaGFfdmVyaWZ5X3VybBgIIAEo",
            "CRIbChNyZWNhcHRjaGFfcHJveHlfdXJsGAkgASgJEiMKG3JlY2FwdGNoYV9m",
            "YWlsdXJlX3RocmVzaG9sZBgKIAEoBRIaChJjYW5vbmljYWxfaG9zdG5hbWUY",
            "CyABKAkSGAoQY2Fub25pY2FsX3NjaGVtZRgMIAEoCRIfChdpbnRlcm5hbF9l",
            "cnJvcl90ZW1wbGF0ZRgUIAEoCRIaChJub3RfZm91bmRfdGVtcGxhdGUYFSAB",
            "KAkSGwoTbG9naW5fcmVkaXJlY3RfcGF0aBgWIAEoCRIdChVsYXVuY2hlcl9k",
            "b3dubG9hZF91cmwYHiABKAkSEQoJZm9ydW1fdXJsGB8gASgJEhwKFGxhbmRp",
            "bmdfcmVkaXJlY3RfdXJsGCggASgJIoEBCg9GRUJhY2tlbmRDb25maWcSKwoM",
            "bWF0Y2hfY2xpZW50GAEgASgLMhUudGJycGMuTEJDbGllbnRDb25maWcSEQoJ",
            "YXBwX2xvZ2luGAIgASgJEhQKDGFwcF9wYXNzd29yZBgDIAEoCRIYChBzdGFy",
            "dHVwX3dhaXRfc2VjGAogASgFIpYBChZWYW5pbGxhSlNDb25uZWN0Q29uZmln",
            "EhEKCWNsaWVudF9pZBgBIAEoCRIOCgZzZWNyZXQYAiABKAkSFAoMbWF4X2Fn",
            "ZV9zZWNzGAMgASgFEhMKC3VuYXV0aF9yb2xlGAQgASgJEhoKEmJsZXNzX2Vt",
            "YWlsX3N1ZmZpeBgKIAEoCRISCgpibGVzc19yb2xlGAsgASgJIo8DCghGRUNv",
            "bmZpZxIRCglodHRwX3BvcnQYASABKAUSLAoLc2Vzc2lvbl9rZXkYAiABKAsy",
            "Fy50YmFkbWluLlNlc3Npb25BdXRoS2V5EhwKFHNlc3Npb25fdGltZW91dF9z",
            "ZWNzGAMgASgFEhQKDGdvX21heF9wcm9jcxgEIAEoBRIcChRqc29uX2FjY2Vz",
            "c19sb2dfcGF0aBgFIAEoCRIuCg5tb25pdG9yX2NvbmZpZxgKIAEoCzIWLnRi",
            "YWRtaW4uTW9uaXRvckNvbmZpZxIqCgxyZWRpc19jb25maWcYPCABKAsyFC50",
            "YmFkbWluLlJlZGlzQ29uZmlnEjAKDmNvbnRlbnRfY29uZmlnGD0gASgLMhgu",
            "dGJhZG1pbi5GRUNvbnRlbnRDb25maWcSMAoOYmFja2VuZF9jb25maWcYPiAB",
            "KAsyGC50YmFkbWluLkZFQmFja2VuZENvbmZpZxIwCgd2YW5pbGxhGEYgASgL",
            "Mh8udGJhZG1pbi5WYW5pbGxhSlNDb25uZWN0Q29uZmlnIrQDCg5NYXRjaE1v",
            "bkNvbmZpZxIRCglodHRwX3BvcnQYASABKAUSEAoIZGF0YV9kaXIYAyABKAkS",
            "EgoKc3RhdGljX2RpchgEIAEoCRIRCglnZW9pcF9kaXIYBiABKAkSDwoHbXNn",
            "X2RpchgHIAEoCRITCgtzZXNzaW9uX2RpchgIIAEoCRIxCg5kZXN5bmNfc3Rv",
            "cmFnZRgLIAEoCzIZLnRiYWRtaW4uR2NzU3RvcmFnZUNvbmZpZxIwCg1jcmFz",
            "aF9zdG9yYWdlGAwgASgLMhkudGJhZG1pbi5HY3NTdG9yYWdlQ29uZmlnEjAK",
            "DmJhY2tlbmRfY29uZmlnGA0gASgLMhgudGJhZG1pbi5GRUJhY2tlbmRDb25m",
            "aWcSGQoRcG9sbF9pbnRlcnZhbF9zZWMYFSABKAUSIQoZc2Vzc2lvbl9jb3Vu",
            "dF9tYXhfYWdlX3NlYxgfIAEoBRIcChRzZXNzaW9uX3Jlc3VsdF9saW1pdBgg",
            "IAEoBRIaChJsb2JieV9yZXN1bHRfbGltaXQYKSABKAUSIQoZYWN0aXZlX21h",
            "dGNoX3Jlc3VsdF9saW1pdBgqIAEoBTLfCQoSTWF0Y2hDb25maWdTZXJ2aWNl",
            "EkUKD0dldEdsb2JhbENvbmZpZxIMLnRicnBjLkVtcHR5Gh4udGJhZG1pbi5H",
            "ZXRHbG9iYWxDb25maWdSZXN1bHQiBMjzGBsSRgoPU2V0R2xvYmFsQ29uZmln",
            "Eh8udGJhZG1pbi5TZXRHbG9iYWxDb25maWdSZXF1ZXN0GgwudGJycGMuRW1w",
            "dHkiBMjzGBwSTQoTR2V0TWF0Y2hRdWV1ZUNvbmZpZxIMLnRicnBjLkVtcHR5",
            "GiIudGJhZG1pbi5HZXRNYXRjaFF1ZXVlQ29uZmlnUmVzdWx0IgTI8xgbEk4K",
            "E1NldE1hdGNoUXVldWVDb25maWcSIy50YmFkbWluLlNldE1hdGNoUXVldWVD",
            "b25maWdSZXF1ZXN0GgwudGJycGMuRW1wdHkiBMjzGBwSSwoSR2V0TWF0Y2hV",
            "c2VyQ29uZmlnEgwudGJycGMuRW1wdHkaIS50YmFkbWluLkdldE1hdGNoVXNl",
            "ckNvbmZpZ1Jlc3VsdCIEyPMYGxJMChJTZXRNYXRjaFVzZXJDb25maWcSIi50",
            "YmFkbWluLlNldE1hdGNoVXNlckNvbmZpZ1JlcXVlc3QaDC50YnJwYy5FbXB0",
            "eSIEyPMYHBJDCg5HZXRMb2JieUNvbmZpZxIMLnRicnBjLkVtcHR5Gh0udGJh",
            "ZG1pbi5HZXRMb2JieUNvbmZpZ1Jlc3VsdCIEyPMYGxJECg5TZXRMb2JieUNv",
            "bmZpZxIeLnRiYWRtaW4uU2V0TG9iYnlDb25maWdSZXF1ZXN0GgwudGJycGMu",
            "RW1wdHkiBMjzGBwSUwoWTGlzdEZlYXR1cmVEZWZpbml0aW9ucxIMLnRicnBj",
            "LkVtcHR5GiUudGJhZG1pbi5MaXN0RmVhdHVyZURlZmluaXRpb25zUmVzdWx0",
            "IgTI8xgbElAKFFNldEZlYXR1cmVEZWZpbml0aW9uEiQudGJhZG1pbi5TZXRG",
            "ZWF0dXJlRGVmaW5pdGlvblJlcXVlc3QaDC50YnJwYy5FbXB0eSIEyPMYHBJW",
            "ChdEZWxldGVGZWF0dXJlRGVmaW5pdGlvbhInLnRiYWRtaW4uRGVsZXRlRmVh",
            "dHVyZURlZmluaXRpb25SZXF1ZXN0GgwudGJycGMuRW1wdHkiBMjzGBwSRwoQ",
            "TGlzdEZlYXR1cmVSdWxlcxIMLnRicnBjLkVtcHR5Gh8udGJhZG1pbi5MaXN0",
            "RmVhdHVyZVJ1bGVzUmVzdWx0IgTI8xgbEkkKEUdldEFjdGl2ZUZlYXR1cmVz",
            "EgwudGJycGMuRW1wdHkaIC50YmFkbWluLkdldEFjdGl2ZUZlYXR1cmVzUmVz",
            "dWx0IgTI8xgbEkoKEUNyZWF0ZUZlYXR1cmVSdWxlEiEudGJhZG1pbi5DcmVh",
            "dGVGZWF0dXJlUnVsZVJlcXVlc3QaDC50YnJwYy5FbXB0eSIEyPMYHBJKChFV",
            "cGRhdGVGZWF0dXJlUnVsZRIhLnRiYWRtaW4uVXBkYXRlRmVhdHVyZVJ1bGVS",
            "ZXF1ZXN0GgwudGJycGMuRW1wdHkiBMjzGBwSSgoRRGVsZXRlRmVhdHVyZVJ1",
            "bGUSIS50YmFkbWluLkRlbGV0ZUZlYXR1cmVSdWxlUmVxdWVzdBoMLnRicnBj",
            "LkVtcHR5IgTI8xgcMkcKDUNvbmZpZ1NlcnZpY2USNgoMR2V0QXBwQ29uZmln",
            "EgwudGJycGMuRW1wdHkaEi50YmFkbWluLkFwcENvbmZpZyIEyPMYFGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tbrpc.TbrpcReflection.Descriptor, global::Tbmatch.MatchReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GlobalConfig), global::Tbadmin.GlobalConfig.Parser, new[]{ "ReqBuildVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MatchQueueConfig), global::Tbadmin.MatchQueueConfig.Parser, new[]{ "ProposalTtl", "QueueTicketTtl", "SelectSize", "EchelonDistMin", "EchelonDistMax", "EchelonDistPerSec", "EchelonScoreCoeff", "EchelonDistNormalizedMin", "EchelonDistNormalizedMax", "PointDistMin", "PointDistMax", "PointDistPerSec", "PointScoreCoeff", "PointDistNormalizedMin", "PointDistNormalizedMax", "LastOppExcludeTime", "LastOppTimeout", "CrossContinentExcludeTime", "PingScoreMin", "PingScoreMax", "PingScorePerSec", "PingScoreCoeff", "PingScoreNormalizedMin", "PingScoreNormalizedMax", "GeoDistMin", "GeoDistMax", "GeoDistPerSec", "GeoScoreCoeff", "GeoDistNormalizedMin", "GeoDistNormalizedMax", "RatingDistMin", "RatingDistPerSec", "RatingScoreCoeff", "RatingDistNormalizedMin", "RatingDistNormalizedMax", "MaintenanceMode", "ActiveMatchTimeout", "WaitTimeoutSec", "DeprecatedRatingDistMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MatchUserConfig), global::Tbadmin.MatchUserConfig.Parser, new[]{ "PingTableTtl", "BlacklistTtl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.LobbyConfig), global::Tbadmin.LobbyConfig.Parser, new[]{ "MaxMembers", "MatchTtl", "LobbyTtl", "ActiveMatchTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.LogAggregatorConfig), global::Tbadmin.LogAggregatorConfig.Parser, new[]{ "MatchLogTtl", "DefaultLogTtl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.FeatureDefinition), global::Tbadmin.FeatureDefinition.Parser, new[]{ "Tag", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.FeatureRule), global::Tbadmin.FeatureRule.Parser, new[]{ "RuleId", "FeatureSet", "Enabled", "Priority", "Owner", "Notes", "ActiveTimeUnix", "InactiveTimeUnix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetGlobalConfigResult), global::Tbadmin.GetGlobalConfigResult.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SetGlobalConfigRequest), global::Tbadmin.SetGlobalConfigRequest.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetMatchQueueConfigResult), global::Tbadmin.GetMatchQueueConfigResult.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SetMatchQueueConfigRequest), global::Tbadmin.SetMatchQueueConfigRequest.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetMatchUserConfigResult), global::Tbadmin.GetMatchUserConfigResult.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SetMatchUserConfigRequest), global::Tbadmin.SetMatchUserConfigRequest.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetLobbyConfigResult), global::Tbadmin.GetLobbyConfigResult.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SetLobbyConfigRequest), global::Tbadmin.SetLobbyConfigRequest.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.ListFeatureDefinitionsResult), global::Tbadmin.ListFeatureDefinitionsResult.Parser, new[]{ "Def" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SetFeatureDefinitionRequest), global::Tbadmin.SetFeatureDefinitionRequest.Parser, new[]{ "Def" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.DeleteFeatureDefinitionRequest), global::Tbadmin.DeleteFeatureDefinitionRequest.Parser, new[]{ "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.ListFeatureRulesResult), global::Tbadmin.ListFeatureRulesResult.Parser, new[]{ "Rule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GetActiveFeaturesResult), global::Tbadmin.GetActiveFeaturesResult.Parser, new[]{ "FeatureSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CreateFeatureRuleRequest), global::Tbadmin.CreateFeatureRuleRequest.Parser, new[]{ "Rule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.UpdateFeatureRuleRequest), global::Tbadmin.UpdateFeatureRuleRequest.Parser, new[]{ "Rule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.DeleteFeatureRuleRequest), global::Tbadmin.DeleteFeatureRuleRequest.Parser, new[]{ "RuleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.DatabaseConfig), global::Tbadmin.DatabaseConfig.Parser, new[]{ "User", "Password", "Host", "Port", "Database", "ConnectTimeout", "MaxIdle", "MaxOpen", "SslMode", "SchemaPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.RedisConfig), global::Tbadmin.RedisConfig.Parser, new[]{ "Host", "Port", "Password", "MaxIdle", "Database", "ConnectTimeoutMs", "ReadTimeoutMs", "WriteTimeoutMs", "LuaPath", "LuaInclude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GApiConfig), global::Tbadmin.GApiConfig.Parser, new[]{ "ProxyUrl", "ProjectId", "Auth", "GceAccount", "SdkAccount" }, null, new[]{ typeof(global::Tbadmin.GApiConfig.Types.AuthType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.GcsStorageConfig), global::Tbadmin.GcsStorageConfig.Parser, new[]{ "ProxyUrl", "ProjectId", "BucketName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.SessionAuthKey), global::Tbadmin.SessionAuthKey.Parser, new[]{ "Current", "Previous" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.RPCConfig), global::Tbadmin.RPCConfig.Parser, new[]{ "HttpPort", "RpcUri", "SessionKey", "SessionTimeoutSecs", "SessionActiveWindowSecs", "MaxRequestSize", "JsonLogPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.PaymentCreds), global::Tbadmin.PaymentCreds.Parser, new[]{ "ApiUrl", "ApiLoginId", "TransactionKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.PortalClientConfig), global::Tbadmin.PortalClientConfig.Parser, new[]{ "RequestQueue", "ReportQueue", "ResponseTimeoutMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MonitorConfig), global::Tbadmin.MonitorConfig.Parser, new[]{ "VarsUri", "HealthUri", "VarsAllowNet", "HealthAllowNet", "AppconfzUri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MailGlobalVars), global::Tbadmin.MailGlobalVars.Parser, new[]{ "SenderAddress", "SiteName", "SenderName", "AccountRecoveryUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MailConfig), global::Tbadmin.MailConfig.Parser, new[]{ "Host", "Tls", "InsecureSkipVerify", "AuthUser", "AuthPassword", "TemplatePath", "IncludePath", "AutoReload", "Vars" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MailConfig.Types.MailHost), global::Tbadmin.MailConfig.Types.MailHost.Parser, new[]{ "Host", "Port" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MatchMakerConfig), global::Tbadmin.MatchMakerConfig.Parser, new[]{ "Enabled", "MasterRetryIntervalMs", "MasterLockExpiryMs", "PollPeriodMs", "ErrorRetryMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AdminServerConfig), global::Tbadmin.AdminServerConfig.Parser, new[]{ "EnableExportTrim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.ServerConfig), global::Tbadmin.ServerConfig.Parser, new[]{ "DbConfig", "RpcConfig", "RedisConfig", "Mail", "PaymentCreds", "PortalClient", "MatchMaker", "MonitorConfig", "DesyncStorage", "CrashStorage", "StackwalkBinaryPath", "MatchLogStorage", "GeoliteDatabaseFile", "Google", "BigqueryDataset", "BigqueryPrefix", "GoMaxProcs", "PortalSimEnabled", "AdminServer", "AdminServerConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AccountConfig), global::Tbadmin.AccountConfig.Parser, new[]{ "MinPasswordLength", "MinPasswordClasses", "RegisterAccess", "EmailValidateConfirmSecs", "EmailValidateUrlPrefix", "ValidateNonceLength", "PasswordResetExpireSecs", "PasswordResetCodeLength", "MaxUserSearchResult", "LockoutDurationMins", "LockoutThreshold", "ResetLockoutCounterAfterMins", "SessionTicketExpireSecs", "RequireRegistrationKey", "DisallowHandleRegexp", "NukeHandlePrefix", "NukeRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.LevelProgression), global::Tbadmin.LevelProgression.Parser, new[]{ "Baseline", "Coefficient", "MatchXp", "WinBonusXp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.EchelonRules), global::Tbadmin.EchelonRules.Parser, new[]{ "TierPoints", "IgnoreLoss", "Final" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.EchelonConfig), global::Tbadmin.EchelonConfig.Parser, new[]{ "Echelon", "WinStreakBonusMinimum", "WinStreakBonusPoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.RankConfig), global::Tbadmin.RankConfig.Parser, new[]{ "PlayerProgress", "CharProgress", "EchelonConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.Glicko2RatingConfig), global::Tbadmin.Glicko2RatingConfig.Parser, new[]{ "Tau", "RatingPeriodMins", "CheckPeriodMins", "MaxDeviation", "MinDeviation", "DeviationDecayPeriods", "TypicalDeviation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MatchServiceConfig), global::Tbadmin.MatchServiceConfig.Parser, new[]{ "MatchReadyTimeoutMs", "Rank", "MaxRecentResults", "MaxPacketLossRatio", "DesyncReportMaxDrift", "RatingConfig", "UnratedGlickoRating", "DefaultGlickoRating", "SessionRatingAdjustCoefficient", "LuaConfigCacheSec", "StrictGameSessions", "DeprecatedGetRankedTimeoutMs", "DeprecatedProvideLocalFsm", "DeprecatedReplayPath", "DeprecatedMatchLifetimeSec", "DeprecatedSelectSize", "DeprecatedDesyncReportPath", "PingTestLifetimeSec", "DeprecatedGamesToWin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.LobbyServiceConfig), global::Tbadmin.LobbyServiceConfig.Parser, new[]{ "JoinCodeLength", "MaxMembers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.PaymentConfig), global::Tbadmin.PaymentConfig.Parser, new[]{ "TimeoutMs", "Currency", "TestMode", "ValMode", "DirectResponseDelimiter" }, null, new[]{ typeof(global::Tbadmin.PaymentConfig.Types.Validation) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CurrencyDesc), global::Tbadmin.CurrencyDesc.Parser, new[]{ "Code", "Precision", "Symbol", "CountryIso3", "BalancePurchaseAllow", "BalancePurchaseDefault", "BalancePurchaseMin", "BalancePurchaseMax", "BalanceMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CurrencyConfig), global::Tbadmin.CurrencyConfig.Parser, new[]{ "Desc", "DefaultCurrency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.ShopConfig), global::Tbadmin.ShopConfig.Parser, new[]{ "Payment", "Currency", "MaxOrderSearchResult", "OrderHistoryPageSize", "MaxBalanceHistoryDays" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.EventConfig), global::Tbadmin.EventConfig.Parser, new[]{ "ChangeWaitTimeoutMs", "EventExpiryMs", "UserKeyExpirySec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AuditConfig), global::Tbadmin.AuditConfig.Parser, new[]{ "MaxAuditSearchResult", "MaxAuditSearchDays" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.CrashReportConfig), global::Tbadmin.CrashReportConfig.Parser, new[]{ "ShouldStoreCrashBundles", "MaxVersionsToKeep", "PollingInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.ServerRolloutFlags), global::Tbadmin.ServerRolloutFlags.Parser, new[]{ "SecurePortalUdpTraffic", "DeprecatedAutoResumeGetMatch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.DesyncReportConfig), global::Tbadmin.DesyncReportConfig.Parser, new[]{ "PollingInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.ExportTrimConfig), global::Tbadmin.ExportTrimConfig.Parser, new[]{ "TrimEnabled", "MinAgeDays", "BatchSize", "TrimIntervalMins" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.AppConfig), global::Tbadmin.AppConfig.Parser, new[]{ "AccountConfig", "MatchConfig", "ShopConfig", "EventConfig", "AuditConfig", "LobbyConfig", "CrashReportConfig", "ServerRolloutFlags", "DesyncReportConfig", "ExportTrimConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.FEContentConfig), global::Tbadmin.FEContentConfig.Parser, new[]{ "DataDir", "StaticDir", "DevelMode", "MessageDir", "ApplicationName", "RecaptchaSiteKey", "RecaptchaSecretKey", "RecaptchaVerifyUrl", "RecaptchaProxyUrl", "RecaptchaFailureThreshold", "CanonicalHostname", "CanonicalScheme", "InternalErrorTemplate", "NotFoundTemplate", "LoginRedirectPath", "LauncherDownloadUrl", "ForumUrl", "LandingRedirectUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.FEBackendConfig), global::Tbadmin.FEBackendConfig.Parser, new[]{ "MatchClient", "AppLogin", "AppPassword", "StartupWaitSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.VanillaJSConnectConfig), global::Tbadmin.VanillaJSConnectConfig.Parser, new[]{ "ClientId", "Secret", "MaxAgeSecs", "UnauthRole", "BlessEmailSuffix", "BlessRole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.FEConfig), global::Tbadmin.FEConfig.Parser, new[]{ "HttpPort", "SessionKey", "SessionTimeoutSecs", "GoMaxProcs", "JsonAccessLogPath", "MonitorConfig", "RedisConfig", "ContentConfig", "BackendConfig", "Vanilla" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tbadmin.MatchMonConfig), global::Tbadmin.MatchMonConfig.Parser, new[]{ "HttpPort", "DataDir", "StaticDir", "GeoipDir", "MsgDir", "SessionDir", "DesyncStorage", "CrashStorage", "BackendConfig", "PollIntervalSec", "SessionCountMaxAgeSec", "SessionResultLimit", "LobbyResultLimit", "ActiveMatchResultLimit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GlobalConfig : pb::IMessage<GlobalConfig> {
    private static readonly pb::MessageParser<GlobalConfig> _parser = new pb::MessageParser<GlobalConfig>(() => new GlobalConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalConfig(GlobalConfig other) : this() {
      reqBuildVersion_ = other.reqBuildVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalConfig Clone() {
      return new GlobalConfig(this);
    }

    /// <summary>Field number for the "req_build_version" field.</summary>
    public const int ReqBuildVersionFieldNumber = 1;
    private string reqBuildVersion_ = "";
    /// <summary>
    /// Build version required by the server to login.
    /// If blank, any build will be allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReqBuildVersion {
      get { return reqBuildVersion_; }
      set {
        reqBuildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqBuildVersion != other.ReqBuildVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqBuildVersion.Length != 0) hash ^= ReqBuildVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqBuildVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReqBuildVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqBuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReqBuildVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalConfig other) {
      if (other == null) {
        return;
      }
      if (other.ReqBuildVersion.Length != 0) {
        ReqBuildVersion = other.ReqBuildVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReqBuildVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchQueueConfig : pb::IMessage<MatchQueueConfig> {
    private static readonly pb::MessageParser<MatchQueueConfig> _parser = new pb::MessageParser<MatchQueueConfig>(() => new MatchQueueConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchQueueConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchQueueConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchQueueConfig(MatchQueueConfig other) : this() {
      proposalTtl_ = other.proposalTtl_;
      queueTicketTtl_ = other.queueTicketTtl_;
      selectSize_ = other.selectSize_;
      echelonDistMin_ = other.echelonDistMin_;
      echelonDistMax_ = other.echelonDistMax_;
      echelonDistPerSec_ = other.echelonDistPerSec_;
      echelonScoreCoeff_ = other.echelonScoreCoeff_;
      echelonDistNormalizedMin_ = other.echelonDistNormalizedMin_;
      echelonDistNormalizedMax_ = other.echelonDistNormalizedMax_;
      pointDistMin_ = other.pointDistMin_;
      pointDistMax_ = other.pointDistMax_;
      pointDistPerSec_ = other.pointDistPerSec_;
      pointScoreCoeff_ = other.pointScoreCoeff_;
      pointDistNormalizedMin_ = other.pointDistNormalizedMin_;
      pointDistNormalizedMax_ = other.pointDistNormalizedMax_;
      lastOppExcludeTime_ = other.lastOppExcludeTime_;
      lastOppTimeout_ = other.lastOppTimeout_;
      crossContinentExcludeTime_ = other.crossContinentExcludeTime_;
      pingScoreMin_ = other.pingScoreMin_;
      pingScoreMax_ = other.pingScoreMax_;
      pingScorePerSec_ = other.pingScorePerSec_;
      pingScoreCoeff_ = other.pingScoreCoeff_;
      pingScoreNormalizedMin_ = other.pingScoreNormalizedMin_;
      pingScoreNormalizedMax_ = other.pingScoreNormalizedMax_;
      geoDistMin_ = other.geoDistMin_;
      geoDistMax_ = other.geoDistMax_;
      geoDistPerSec_ = other.geoDistPerSec_;
      geoScoreCoeff_ = other.geoScoreCoeff_;
      geoDistNormalizedMin_ = other.geoDistNormalizedMin_;
      geoDistNormalizedMax_ = other.geoDistNormalizedMax_;
      ratingDistMin_ = other.ratingDistMin_;
      ratingDistPerSec_ = other.ratingDistPerSec_;
      ratingScoreCoeff_ = other.ratingScoreCoeff_;
      ratingDistNormalizedMin_ = other.ratingDistNormalizedMin_;
      ratingDistNormalizedMax_ = other.ratingDistNormalizedMax_;
      maintenanceMode_ = other.maintenanceMode_;
      activeMatchTimeout_ = other.activeMatchTimeout_;
      waitTimeoutSec_ = other.waitTimeoutSec_;
      DeprecatedRatingDistMax_ = other.DeprecatedRatingDistMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchQueueConfig Clone() {
      return new MatchQueueConfig(this);
    }

    /// <summary>Field number for the "proposal_ttl" field.</summary>
    public const int ProposalTtlFieldNumber = 1;
    private int proposalTtl_;
    /// <summary>
    /// Time to live for proposal keys in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProposalTtl {
      get { return proposalTtl_; }
      set {
        proposalTtl_ = value;
      }
    }

    /// <summary>Field number for the "queue_ticket_ttl" field.</summary>
    public const int QueueTicketTtlFieldNumber = 2;
    private int queueTicketTtl_;
    /// <summary>
    /// Time to live for queue tickets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueTicketTtl {
      get { return queueTicketTtl_; }
      set {
        queueTicketTtl_ = value;
      }
    }

    /// <summary>Field number for the "select_size" field.</summary>
    public const int SelectSizeFieldNumber = 3;
    private int selectSize_;
    /// <summary>
    /// How many users to consider at once from top and bottom of time queue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectSize {
      get { return selectSize_; }
      set {
        selectSize_ = value;
      }
    }

    /// <summary>Field number for the "echelon_dist_min" field.</summary>
    public const int EchelonDistMinFieldNumber = 4;
    private double echelonDistMin_;
    /// <summary>
    /// Control how much echelon may differ to qualify.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EchelonDistMin {
      get { return echelonDistMin_; }
      set {
        echelonDistMin_ = value;
      }
    }

    /// <summary>Field number for the "echelon_dist_max" field.</summary>
    public const int EchelonDistMaxFieldNumber = 5;
    private double echelonDistMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EchelonDistMax {
      get { return echelonDistMax_; }
      set {
        echelonDistMax_ = value;
      }
    }

    /// <summary>Field number for the "echelon_dist_per_sec" field.</summary>
    public const int EchelonDistPerSecFieldNumber = 6;
    private double echelonDistPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EchelonDistPerSec {
      get { return echelonDistPerSec_; }
      set {
        echelonDistPerSec_ = value;
      }
    }

    /// <summary>Field number for the "echelon_score_coeff" field.</summary>
    public const int EchelonScoreCoeffFieldNumber = 7;
    private double echelonScoreCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EchelonScoreCoeff {
      get { return echelonScoreCoeff_; }
      set {
        echelonScoreCoeff_ = value;
      }
    }

    /// <summary>Field number for the "echelon_dist_normalized_min" field.</summary>
    public const int EchelonDistNormalizedMinFieldNumber = 36;
    private double echelonDistNormalizedMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EchelonDistNormalizedMin {
      get { return echelonDistNormalizedMin_; }
      set {
        echelonDistNormalizedMin_ = value;
      }
    }

    /// <summary>Field number for the "echelon_dist_normalized_max" field.</summary>
    public const int EchelonDistNormalizedMaxFieldNumber = 37;
    private double echelonDistNormalizedMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EchelonDistNormalizedMax {
      get { return echelonDistNormalizedMax_; }
      set {
        echelonDistNormalizedMax_ = value;
      }
    }

    /// <summary>Field number for the "point_dist_min" field.</summary>
    public const int PointDistMinFieldNumber = 8;
    private double pointDistMin_;
    /// <summary>
    /// Control how much total rank points may differ to qualify.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointDistMin {
      get { return pointDistMin_; }
      set {
        pointDistMin_ = value;
      }
    }

    /// <summary>Field number for the "point_dist_max" field.</summary>
    public const int PointDistMaxFieldNumber = 9;
    private double pointDistMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointDistMax {
      get { return pointDistMax_; }
      set {
        pointDistMax_ = value;
      }
    }

    /// <summary>Field number for the "point_dist_per_sec" field.</summary>
    public const int PointDistPerSecFieldNumber = 10;
    private double pointDistPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointDistPerSec {
      get { return pointDistPerSec_; }
      set {
        pointDistPerSec_ = value;
      }
    }

    /// <summary>Field number for the "point_score_coeff" field.</summary>
    public const int PointScoreCoeffFieldNumber = 11;
    private double pointScoreCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointScoreCoeff {
      get { return pointScoreCoeff_; }
      set {
        pointScoreCoeff_ = value;
      }
    }

    /// <summary>Field number for the "point_dist_normalized_min" field.</summary>
    public const int PointDistNormalizedMinFieldNumber = 38;
    private double pointDistNormalizedMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointDistNormalizedMin {
      get { return pointDistNormalizedMin_; }
      set {
        pointDistNormalizedMin_ = value;
      }
    }

    /// <summary>Field number for the "point_dist_normalized_max" field.</summary>
    public const int PointDistNormalizedMaxFieldNumber = 39;
    private double pointDistNormalizedMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointDistNormalizedMax {
      get { return pointDistNormalizedMax_; }
      set {
        pointDistNormalizedMax_ = value;
      }
    }

    /// <summary>Field number for the "last_opp_exclude_time" field.</summary>
    public const int LastOppExcludeTimeFieldNumber = 12;
    private double lastOppExcludeTime_;
    /// <summary>
    /// How long to prevent 2 players from repeating the same match-up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastOppExcludeTime {
      get { return lastOppExcludeTime_; }
      set {
        lastOppExcludeTime_ = value;
      }
    }

    /// <summary>Field number for the "last_opp_timeout" field.</summary>
    public const int LastOppTimeoutFieldNumber = 13;
    private double lastOppTimeout_;
    /// <summary>
    /// How long to remember the last opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastOppTimeout {
      get { return lastOppTimeout_; }
      set {
        lastOppTimeout_ = value;
      }
    }

    /// <summary>Field number for the "cross_continent_exclude_time" field.</summary>
    public const int CrossContinentExcludeTimeFieldNumber = 14;
    private double crossContinentExcludeTime_;
    /// <summary>
    /// How long to wait before matching to a player on another continent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CrossContinentExcludeTime {
      get { return crossContinentExcludeTime_; }
      set {
        crossContinentExcludeTime_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_min" field.</summary>
    public const int PingScoreMinFieldNumber = 15;
    private double pingScoreMin_;
    /// <summary>
    /// Ping score minimum and increase with wait time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PingScoreMin {
      get { return pingScoreMin_; }
      set {
        pingScoreMin_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_max" field.</summary>
    public const int PingScoreMaxFieldNumber = 16;
    private double pingScoreMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PingScoreMax {
      get { return pingScoreMax_; }
      set {
        pingScoreMax_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_per_sec" field.</summary>
    public const int PingScorePerSecFieldNumber = 17;
    private double pingScorePerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PingScorePerSec {
      get { return pingScorePerSec_; }
      set {
        pingScorePerSec_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_coeff" field.</summary>
    public const int PingScoreCoeffFieldNumber = 18;
    private double pingScoreCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PingScoreCoeff {
      get { return pingScoreCoeff_; }
      set {
        pingScoreCoeff_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_normalized_min" field.</summary>
    public const int PingScoreNormalizedMinFieldNumber = 30;
    private double pingScoreNormalizedMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PingScoreNormalizedMin {
      get { return pingScoreNormalizedMin_; }
      set {
        pingScoreNormalizedMin_ = value;
      }
    }

    /// <summary>Field number for the "ping_score_normalized_max" field.</summary>
    public const int PingScoreNormalizedMaxFieldNumber = 31;
    private double pingScoreNormalizedMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PingScoreNormalizedMax {
      get { return pingScoreNormalizedMax_; }
      set {
        pingScoreNormalizedMax_ = value;
      }
    }

    /// <summary>Field number for the "geo_dist_min" field.</summary>
    public const int GeoDistMinFieldNumber = 19;
    private double geoDistMin_;
    /// <summary>
    /// Geo distance minimum and increase with wait time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoDistMin {
      get { return geoDistMin_; }
      set {
        geoDistMin_ = value;
      }
    }

    /// <summary>Field number for the "geo_dist_max" field.</summary>
    public const int GeoDistMaxFieldNumber = 20;
    private double geoDistMax_;
    /// <summary>
    /// 25,000km should be further than any possible distance between two points on earth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoDistMax {
      get { return geoDistMax_; }
      set {
        geoDistMax_ = value;
      }
    }

    /// <summary>Field number for the "geo_dist_per_sec" field.</summary>
    public const int GeoDistPerSecFieldNumber = 21;
    private double geoDistPerSec_;
    /// <summary>
    /// 200 km per second gets from LA to NY in 20 seconds, covers the world in 2 mins
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoDistPerSec {
      get { return geoDistPerSec_; }
      set {
        geoDistPerSec_ = value;
      }
    }

    /// <summary>Field number for the "geo_score_coeff" field.</summary>
    public const int GeoScoreCoeffFieldNumber = 22;
    private double geoScoreCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoScoreCoeff {
      get { return geoScoreCoeff_; }
      set {
        geoScoreCoeff_ = value;
      }
    }

    /// <summary>Field number for the "geo_dist_normalized_min" field.</summary>
    public const int GeoDistNormalizedMinFieldNumber = 32;
    private double geoDistNormalizedMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoDistNormalizedMin {
      get { return geoDistNormalizedMin_; }
      set {
        geoDistNormalizedMin_ = value;
      }
    }

    /// <summary>Field number for the "geo_dist_normalized_max" field.</summary>
    public const int GeoDistNormalizedMaxFieldNumber = 33;
    private double geoDistNormalizedMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoDistNormalizedMax {
      get { return geoDistNormalizedMax_; }
      set {
        geoDistNormalizedMax_ = value;
      }
    }

    /// <summary>Field number for the "rating_dist_min" field.</summary>
    public const int RatingDistMinFieldNumber = 23;
    private double ratingDistMin_;
    /// <summary>
    /// Rating distance minimum and increase with wait time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RatingDistMin {
      get { return ratingDistMin_; }
      set {
        ratingDistMin_ = value;
      }
    }

    /// <summary>Field number for the "rating_dist_per_sec" field.</summary>
    public const int RatingDistPerSecFieldNumber = 25;
    private double ratingDistPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RatingDistPerSec {
      get { return ratingDistPerSec_; }
      set {
        ratingDistPerSec_ = value;
      }
    }

    /// <summary>Field number for the "rating_score_coeff" field.</summary>
    public const int RatingScoreCoeffFieldNumber = 26;
    private double ratingScoreCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RatingScoreCoeff {
      get { return ratingScoreCoeff_; }
      set {
        ratingScoreCoeff_ = value;
      }
    }

    /// <summary>Field number for the "rating_dist_normalized_min" field.</summary>
    public const int RatingDistNormalizedMinFieldNumber = 34;
    private double ratingDistNormalizedMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RatingDistNormalizedMin {
      get { return ratingDistNormalizedMin_; }
      set {
        ratingDistNormalizedMin_ = value;
      }
    }

    /// <summary>Field number for the "rating_dist_normalized_max" field.</summary>
    public const int RatingDistNormalizedMaxFieldNumber = 35;
    private double ratingDistNormalizedMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RatingDistNormalizedMax {
      get { return ratingDistNormalizedMax_; }
      set {
        ratingDistNormalizedMax_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_mode" field.</summary>
    public const int MaintenanceModeFieldNumber = 28;
    private int maintenanceMode_;
    /// <summary>
    /// 0==normal, 1==in maintenance mode: no one enters queue, message about server maintenance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaintenanceMode {
      get { return maintenanceMode_; }
      set {
        maintenanceMode_ = value;
      }
    }

    /// <summary>Field number for the "active_match_timeout" field.</summary>
    public const int ActiveMatchTimeoutFieldNumber = 29;
    private double activeMatchTimeout_;
    /// <summary>
    /// Time after which old active matches are forcibly removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ActiveMatchTimeout {
      get { return activeMatchTimeout_; }
      set {
        activeMatchTimeout_ = value;
      }
    }

    /// <summary>Field number for the "wait_timeout_sec" field.</summary>
    public const int WaitTimeoutSecFieldNumber = 40;
    private int waitTimeoutSec_;
    /// <summary>
    /// How long to wait in the queue before timing out.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTimeoutSec {
      get { return waitTimeoutSec_; }
      set {
        waitTimeoutSec_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_rating_dist_max" field.</summary>
    public const int DeprecatedRatingDistMaxFieldNumber = 24;
    private double DeprecatedRatingDistMax_;
    /// <summary>
    /// Unused - rating dist keeps climbing forever
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeprecatedRatingDistMax {
      get { return DeprecatedRatingDistMax_; }
      set {
        DeprecatedRatingDistMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchQueueConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchQueueConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProposalTtl != other.ProposalTtl) return false;
      if (QueueTicketTtl != other.QueueTicketTtl) return false;
      if (SelectSize != other.SelectSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EchelonDistMin, other.EchelonDistMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EchelonDistMax, other.EchelonDistMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EchelonDistPerSec, other.EchelonDistPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EchelonScoreCoeff, other.EchelonScoreCoeff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EchelonDistNormalizedMin, other.EchelonDistNormalizedMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EchelonDistNormalizedMax, other.EchelonDistNormalizedMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointDistMin, other.PointDistMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointDistMax, other.PointDistMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointDistPerSec, other.PointDistPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointScoreCoeff, other.PointScoreCoeff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointDistNormalizedMin, other.PointDistNormalizedMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointDistNormalizedMax, other.PointDistNormalizedMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastOppExcludeTime, other.LastOppExcludeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastOppTimeout, other.LastOppTimeout)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CrossContinentExcludeTime, other.CrossContinentExcludeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PingScoreMin, other.PingScoreMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PingScoreMax, other.PingScoreMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PingScorePerSec, other.PingScorePerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PingScoreCoeff, other.PingScoreCoeff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PingScoreNormalizedMin, other.PingScoreNormalizedMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PingScoreNormalizedMax, other.PingScoreNormalizedMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoDistMin, other.GeoDistMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoDistMax, other.GeoDistMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoDistPerSec, other.GeoDistPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoScoreCoeff, other.GeoScoreCoeff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoDistNormalizedMin, other.GeoDistNormalizedMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoDistNormalizedMax, other.GeoDistNormalizedMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RatingDistMin, other.RatingDistMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RatingDistPerSec, other.RatingDistPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RatingScoreCoeff, other.RatingScoreCoeff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RatingDistNormalizedMin, other.RatingDistNormalizedMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RatingDistNormalizedMax, other.RatingDistNormalizedMax)) return false;
      if (MaintenanceMode != other.MaintenanceMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ActiveMatchTimeout, other.ActiveMatchTimeout)) return false;
      if (WaitTimeoutSec != other.WaitTimeoutSec) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeprecatedRatingDistMax, other.DeprecatedRatingDistMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProposalTtl != 0) hash ^= ProposalTtl.GetHashCode();
      if (QueueTicketTtl != 0) hash ^= QueueTicketTtl.GetHashCode();
      if (SelectSize != 0) hash ^= SelectSize.GetHashCode();
      if (EchelonDistMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EchelonDistMin);
      if (EchelonDistMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EchelonDistMax);
      if (EchelonDistPerSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EchelonDistPerSec);
      if (EchelonScoreCoeff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EchelonScoreCoeff);
      if (EchelonDistNormalizedMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EchelonDistNormalizedMin);
      if (EchelonDistNormalizedMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EchelonDistNormalizedMax);
      if (PointDistMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointDistMin);
      if (PointDistMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointDistMax);
      if (PointDistPerSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointDistPerSec);
      if (PointScoreCoeff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointScoreCoeff);
      if (PointDistNormalizedMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointDistNormalizedMin);
      if (PointDistNormalizedMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointDistNormalizedMax);
      if (LastOppExcludeTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastOppExcludeTime);
      if (LastOppTimeout != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastOppTimeout);
      if (CrossContinentExcludeTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CrossContinentExcludeTime);
      if (PingScoreMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PingScoreMin);
      if (PingScoreMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PingScoreMax);
      if (PingScorePerSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PingScorePerSec);
      if (PingScoreCoeff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PingScoreCoeff);
      if (PingScoreNormalizedMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PingScoreNormalizedMin);
      if (PingScoreNormalizedMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PingScoreNormalizedMax);
      if (GeoDistMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoDistMin);
      if (GeoDistMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoDistMax);
      if (GeoDistPerSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoDistPerSec);
      if (GeoScoreCoeff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoScoreCoeff);
      if (GeoDistNormalizedMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoDistNormalizedMin);
      if (GeoDistNormalizedMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoDistNormalizedMax);
      if (RatingDistMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RatingDistMin);
      if (RatingDistPerSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RatingDistPerSec);
      if (RatingScoreCoeff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RatingScoreCoeff);
      if (RatingDistNormalizedMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RatingDistNormalizedMin);
      if (RatingDistNormalizedMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RatingDistNormalizedMax);
      if (MaintenanceMode != 0) hash ^= MaintenanceMode.GetHashCode();
      if (ActiveMatchTimeout != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ActiveMatchTimeout);
      if (WaitTimeoutSec != 0) hash ^= WaitTimeoutSec.GetHashCode();
      if (DeprecatedRatingDistMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeprecatedRatingDistMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProposalTtl != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProposalTtl);
      }
      if (QueueTicketTtl != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(QueueTicketTtl);
      }
      if (SelectSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SelectSize);
      }
      if (EchelonDistMin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(EchelonDistMin);
      }
      if (EchelonDistMax != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EchelonDistMax);
      }
      if (EchelonDistPerSec != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(EchelonDistPerSec);
      }
      if (EchelonScoreCoeff != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(EchelonScoreCoeff);
      }
      if (PointDistMin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PointDistMin);
      }
      if (PointDistMax != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PointDistMax);
      }
      if (PointDistPerSec != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(PointDistPerSec);
      }
      if (PointScoreCoeff != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(PointScoreCoeff);
      }
      if (LastOppExcludeTime != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(LastOppExcludeTime);
      }
      if (LastOppTimeout != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(LastOppTimeout);
      }
      if (CrossContinentExcludeTime != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(CrossContinentExcludeTime);
      }
      if (PingScoreMin != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(PingScoreMin);
      }
      if (PingScoreMax != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(PingScoreMax);
      }
      if (PingScorePerSec != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(PingScorePerSec);
      }
      if (PingScoreCoeff != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(PingScoreCoeff);
      }
      if (GeoDistMin != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(GeoDistMin);
      }
      if (GeoDistMax != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(GeoDistMax);
      }
      if (GeoDistPerSec != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(GeoDistPerSec);
      }
      if (GeoScoreCoeff != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(GeoScoreCoeff);
      }
      if (RatingDistMin != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(RatingDistMin);
      }
      if (DeprecatedRatingDistMax != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(DeprecatedRatingDistMax);
      }
      if (RatingDistPerSec != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(RatingDistPerSec);
      }
      if (RatingScoreCoeff != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(RatingScoreCoeff);
      }
      if (MaintenanceMode != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(MaintenanceMode);
      }
      if (ActiveMatchTimeout != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(ActiveMatchTimeout);
      }
      if (PingScoreNormalizedMin != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(PingScoreNormalizedMin);
      }
      if (PingScoreNormalizedMax != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(PingScoreNormalizedMax);
      }
      if (GeoDistNormalizedMin != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(GeoDistNormalizedMin);
      }
      if (GeoDistNormalizedMax != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(GeoDistNormalizedMax);
      }
      if (RatingDistNormalizedMin != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(RatingDistNormalizedMin);
      }
      if (RatingDistNormalizedMax != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(RatingDistNormalizedMax);
      }
      if (EchelonDistNormalizedMin != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(EchelonDistNormalizedMin);
      }
      if (EchelonDistNormalizedMax != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(EchelonDistNormalizedMax);
      }
      if (PointDistNormalizedMin != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(PointDistNormalizedMin);
      }
      if (PointDistNormalizedMax != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(PointDistNormalizedMax);
      }
      if (WaitTimeoutSec != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(WaitTimeoutSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProposalTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProposalTtl);
      }
      if (QueueTicketTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueueTicketTtl);
      }
      if (SelectSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectSize);
      }
      if (EchelonDistMin != 0D) {
        size += 1 + 8;
      }
      if (EchelonDistMax != 0D) {
        size += 1 + 8;
      }
      if (EchelonDistPerSec != 0D) {
        size += 1 + 8;
      }
      if (EchelonScoreCoeff != 0D) {
        size += 1 + 8;
      }
      if (EchelonDistNormalizedMin != 0D) {
        size += 2 + 8;
      }
      if (EchelonDistNormalizedMax != 0D) {
        size += 2 + 8;
      }
      if (PointDistMin != 0D) {
        size += 1 + 8;
      }
      if (PointDistMax != 0D) {
        size += 1 + 8;
      }
      if (PointDistPerSec != 0D) {
        size += 1 + 8;
      }
      if (PointScoreCoeff != 0D) {
        size += 1 + 8;
      }
      if (PointDistNormalizedMin != 0D) {
        size += 2 + 8;
      }
      if (PointDistNormalizedMax != 0D) {
        size += 2 + 8;
      }
      if (LastOppExcludeTime != 0D) {
        size += 1 + 8;
      }
      if (LastOppTimeout != 0D) {
        size += 1 + 8;
      }
      if (CrossContinentExcludeTime != 0D) {
        size += 1 + 8;
      }
      if (PingScoreMin != 0D) {
        size += 1 + 8;
      }
      if (PingScoreMax != 0D) {
        size += 2 + 8;
      }
      if (PingScorePerSec != 0D) {
        size += 2 + 8;
      }
      if (PingScoreCoeff != 0D) {
        size += 2 + 8;
      }
      if (PingScoreNormalizedMin != 0D) {
        size += 2 + 8;
      }
      if (PingScoreNormalizedMax != 0D) {
        size += 2 + 8;
      }
      if (GeoDistMin != 0D) {
        size += 2 + 8;
      }
      if (GeoDistMax != 0D) {
        size += 2 + 8;
      }
      if (GeoDistPerSec != 0D) {
        size += 2 + 8;
      }
      if (GeoScoreCoeff != 0D) {
        size += 2 + 8;
      }
      if (GeoDistNormalizedMin != 0D) {
        size += 2 + 8;
      }
      if (GeoDistNormalizedMax != 0D) {
        size += 2 + 8;
      }
      if (RatingDistMin != 0D) {
        size += 2 + 8;
      }
      if (RatingDistPerSec != 0D) {
        size += 2 + 8;
      }
      if (RatingScoreCoeff != 0D) {
        size += 2 + 8;
      }
      if (RatingDistNormalizedMin != 0D) {
        size += 2 + 8;
      }
      if (RatingDistNormalizedMax != 0D) {
        size += 2 + 8;
      }
      if (MaintenanceMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaintenanceMode);
      }
      if (ActiveMatchTimeout != 0D) {
        size += 2 + 8;
      }
      if (WaitTimeoutSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WaitTimeoutSec);
      }
      if (DeprecatedRatingDistMax != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchQueueConfig other) {
      if (other == null) {
        return;
      }
      if (other.ProposalTtl != 0) {
        ProposalTtl = other.ProposalTtl;
      }
      if (other.QueueTicketTtl != 0) {
        QueueTicketTtl = other.QueueTicketTtl;
      }
      if (other.SelectSize != 0) {
        SelectSize = other.SelectSize;
      }
      if (other.EchelonDistMin != 0D) {
        EchelonDistMin = other.EchelonDistMin;
      }
      if (other.EchelonDistMax != 0D) {
        EchelonDistMax = other.EchelonDistMax;
      }
      if (other.EchelonDistPerSec != 0D) {
        EchelonDistPerSec = other.EchelonDistPerSec;
      }
      if (other.EchelonScoreCoeff != 0D) {
        EchelonScoreCoeff = other.EchelonScoreCoeff;
      }
      if (other.EchelonDistNormalizedMin != 0D) {
        EchelonDistNormalizedMin = other.EchelonDistNormalizedMin;
      }
      if (other.EchelonDistNormalizedMax != 0D) {
        EchelonDistNormalizedMax = other.EchelonDistNormalizedMax;
      }
      if (other.PointDistMin != 0D) {
        PointDistMin = other.PointDistMin;
      }
      if (other.PointDistMax != 0D) {
        PointDistMax = other.PointDistMax;
      }
      if (other.PointDistPerSec != 0D) {
        PointDistPerSec = other.PointDistPerSec;
      }
      if (other.PointScoreCoeff != 0D) {
        PointScoreCoeff = other.PointScoreCoeff;
      }
      if (other.PointDistNormalizedMin != 0D) {
        PointDistNormalizedMin = other.PointDistNormalizedMin;
      }
      if (other.PointDistNormalizedMax != 0D) {
        PointDistNormalizedMax = other.PointDistNormalizedMax;
      }
      if (other.LastOppExcludeTime != 0D) {
        LastOppExcludeTime = other.LastOppExcludeTime;
      }
      if (other.LastOppTimeout != 0D) {
        LastOppTimeout = other.LastOppTimeout;
      }
      if (other.CrossContinentExcludeTime != 0D) {
        CrossContinentExcludeTime = other.CrossContinentExcludeTime;
      }
      if (other.PingScoreMin != 0D) {
        PingScoreMin = other.PingScoreMin;
      }
      if (other.PingScoreMax != 0D) {
        PingScoreMax = other.PingScoreMax;
      }
      if (other.PingScorePerSec != 0D) {
        PingScorePerSec = other.PingScorePerSec;
      }
      if (other.PingScoreCoeff != 0D) {
        PingScoreCoeff = other.PingScoreCoeff;
      }
      if (other.PingScoreNormalizedMin != 0D) {
        PingScoreNormalizedMin = other.PingScoreNormalizedMin;
      }
      if (other.PingScoreNormalizedMax != 0D) {
        PingScoreNormalizedMax = other.PingScoreNormalizedMax;
      }
      if (other.GeoDistMin != 0D) {
        GeoDistMin = other.GeoDistMin;
      }
      if (other.GeoDistMax != 0D) {
        GeoDistMax = other.GeoDistMax;
      }
      if (other.GeoDistPerSec != 0D) {
        GeoDistPerSec = other.GeoDistPerSec;
      }
      if (other.GeoScoreCoeff != 0D) {
        GeoScoreCoeff = other.GeoScoreCoeff;
      }
      if (other.GeoDistNormalizedMin != 0D) {
        GeoDistNormalizedMin = other.GeoDistNormalizedMin;
      }
      if (other.GeoDistNormalizedMax != 0D) {
        GeoDistNormalizedMax = other.GeoDistNormalizedMax;
      }
      if (other.RatingDistMin != 0D) {
        RatingDistMin = other.RatingDistMin;
      }
      if (other.RatingDistPerSec != 0D) {
        RatingDistPerSec = other.RatingDistPerSec;
      }
      if (other.RatingScoreCoeff != 0D) {
        RatingScoreCoeff = other.RatingScoreCoeff;
      }
      if (other.RatingDistNormalizedMin != 0D) {
        RatingDistNormalizedMin = other.RatingDistNormalizedMin;
      }
      if (other.RatingDistNormalizedMax != 0D) {
        RatingDistNormalizedMax = other.RatingDistNormalizedMax;
      }
      if (other.MaintenanceMode != 0) {
        MaintenanceMode = other.MaintenanceMode;
      }
      if (other.ActiveMatchTimeout != 0D) {
        ActiveMatchTimeout = other.ActiveMatchTimeout;
      }
      if (other.WaitTimeoutSec != 0) {
        WaitTimeoutSec = other.WaitTimeoutSec;
      }
      if (other.DeprecatedRatingDistMax != 0D) {
        DeprecatedRatingDistMax = other.DeprecatedRatingDistMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProposalTtl = input.ReadInt32();
            break;
          }
          case 16: {
            QueueTicketTtl = input.ReadInt32();
            break;
          }
          case 24: {
            SelectSize = input.ReadInt32();
            break;
          }
          case 33: {
            EchelonDistMin = input.ReadDouble();
            break;
          }
          case 41: {
            EchelonDistMax = input.ReadDouble();
            break;
          }
          case 49: {
            EchelonDistPerSec = input.ReadDouble();
            break;
          }
          case 57: {
            EchelonScoreCoeff = input.ReadDouble();
            break;
          }
          case 65: {
            PointDistMin = input.ReadDouble();
            break;
          }
          case 73: {
            PointDistMax = input.ReadDouble();
            break;
          }
          case 81: {
            PointDistPerSec = input.ReadDouble();
            break;
          }
          case 89: {
            PointScoreCoeff = input.ReadDouble();
            break;
          }
          case 97: {
            LastOppExcludeTime = input.ReadDouble();
            break;
          }
          case 105: {
            LastOppTimeout = input.ReadDouble();
            break;
          }
          case 113: {
            CrossContinentExcludeTime = input.ReadDouble();
            break;
          }
          case 121: {
            PingScoreMin = input.ReadDouble();
            break;
          }
          case 129: {
            PingScoreMax = input.ReadDouble();
            break;
          }
          case 137: {
            PingScorePerSec = input.ReadDouble();
            break;
          }
          case 145: {
            PingScoreCoeff = input.ReadDouble();
            break;
          }
          case 153: {
            GeoDistMin = input.ReadDouble();
            break;
          }
          case 161: {
            GeoDistMax = input.ReadDouble();
            break;
          }
          case 169: {
            GeoDistPerSec = input.ReadDouble();
            break;
          }
          case 177: {
            GeoScoreCoeff = input.ReadDouble();
            break;
          }
          case 185: {
            RatingDistMin = input.ReadDouble();
            break;
          }
          case 193: {
            DeprecatedRatingDistMax = input.ReadDouble();
            break;
          }
          case 201: {
            RatingDistPerSec = input.ReadDouble();
            break;
          }
          case 209: {
            RatingScoreCoeff = input.ReadDouble();
            break;
          }
          case 224: {
            MaintenanceMode = input.ReadInt32();
            break;
          }
          case 233: {
            ActiveMatchTimeout = input.ReadDouble();
            break;
          }
          case 241: {
            PingScoreNormalizedMin = input.ReadDouble();
            break;
          }
          case 249: {
            PingScoreNormalizedMax = input.ReadDouble();
            break;
          }
          case 257: {
            GeoDistNormalizedMin = input.ReadDouble();
            break;
          }
          case 265: {
            GeoDistNormalizedMax = input.ReadDouble();
            break;
          }
          case 273: {
            RatingDistNormalizedMin = input.ReadDouble();
            break;
          }
          case 281: {
            RatingDistNormalizedMax = input.ReadDouble();
            break;
          }
          case 289: {
            EchelonDistNormalizedMin = input.ReadDouble();
            break;
          }
          case 297: {
            EchelonDistNormalizedMax = input.ReadDouble();
            break;
          }
          case 305: {
            PointDistNormalizedMin = input.ReadDouble();
            break;
          }
          case 313: {
            PointDistNormalizedMax = input.ReadDouble();
            break;
          }
          case 320: {
            WaitTimeoutSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchUserConfig : pb::IMessage<MatchUserConfig> {
    private static readonly pb::MessageParser<MatchUserConfig> _parser = new pb::MessageParser<MatchUserConfig>(() => new MatchUserConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchUserConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchUserConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchUserConfig(MatchUserConfig other) : this() {
      pingTableTtl_ = other.pingTableTtl_;
      blacklistTtl_ = other.blacklistTtl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchUserConfig Clone() {
      return new MatchUserConfig(this);
    }

    /// <summary>Field number for the "ping_table_ttl" field.</summary>
    public const int PingTableTtlFieldNumber = 1;
    private int pingTableTtl_;
    /// <summary>
    /// Time to live for the ping table if we fail to clean up session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PingTableTtl {
      get { return pingTableTtl_; }
      set {
        pingTableTtl_ = value;
      }
    }

    /// <summary>Field number for the "blacklist_ttl" field.</summary>
    public const int BlacklistTtlFieldNumber = 2;
    private int blacklistTtl_;
    /// <summary>
    /// Time to live for the blacklist if we fail to clean up session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlacklistTtl {
      get { return blacklistTtl_; }
      set {
        blacklistTtl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchUserConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchUserConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingTableTtl != other.PingTableTtl) return false;
      if (BlacklistTtl != other.BlacklistTtl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingTableTtl != 0) hash ^= PingTableTtl.GetHashCode();
      if (BlacklistTtl != 0) hash ^= BlacklistTtl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingTableTtl != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PingTableTtl);
      }
      if (BlacklistTtl != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlacklistTtl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingTableTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PingTableTtl);
      }
      if (BlacklistTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlacklistTtl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchUserConfig other) {
      if (other == null) {
        return;
      }
      if (other.PingTableTtl != 0) {
        PingTableTtl = other.PingTableTtl;
      }
      if (other.BlacklistTtl != 0) {
        BlacklistTtl = other.BlacklistTtl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PingTableTtl = input.ReadInt32();
            break;
          }
          case 16: {
            BlacklistTtl = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LobbyConfig : pb::IMessage<LobbyConfig> {
    private static readonly pb::MessageParser<LobbyConfig> _parser = new pb::MessageParser<LobbyConfig>(() => new LobbyConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyConfig(LobbyConfig other) : this() {
      maxMembers_ = other.maxMembers_;
      matchTtl_ = other.matchTtl_;
      lobbyTtl_ = other.lobbyTtl_;
      activeMatchTimeout_ = other.activeMatchTimeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyConfig Clone() {
      return new LobbyConfig(this);
    }

    /// <summary>Field number for the "max_members" field.</summary>
    public const int MaxMembersFieldNumber = 1;
    private int maxMembers_;
    /// <summary>
    /// Max number of users to allow in a lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMembers {
      get { return maxMembers_; }
      set {
        maxMembers_ = value;
      }
    }

    /// <summary>Field number for the "match_ttl" field.</summary>
    public const int MatchTtlFieldNumber = 2;
    private int matchTtl_;
    /// <summary>
    /// Time-to-live for match keys generated by the lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchTtl {
      get { return matchTtl_; }
      set {
        matchTtl_ = value;
      }
    }

    /// <summary>Field number for the "lobby_ttl" field.</summary>
    public const int LobbyTtlFieldNumber = 3;
    private int lobbyTtl_;
    /// <summary>
    /// Time to live for lobby keys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyTtl {
      get { return lobbyTtl_; }
      set {
        lobbyTtl_ = value;
      }
    }

    /// <summary>Field number for the "active_match_timeout" field.</summary>
    public const int ActiveMatchTimeoutFieldNumber = 4;
    private int activeMatchTimeout_;
    /// <summary>
    /// How long lobby matches remain in the active matches list if leaked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveMatchTimeout {
      get { return activeMatchTimeout_; }
      set {
        activeMatchTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxMembers != other.MaxMembers) return false;
      if (MatchTtl != other.MatchTtl) return false;
      if (LobbyTtl != other.LobbyTtl) return false;
      if (ActiveMatchTimeout != other.ActiveMatchTimeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxMembers != 0) hash ^= MaxMembers.GetHashCode();
      if (MatchTtl != 0) hash ^= MatchTtl.GetHashCode();
      if (LobbyTtl != 0) hash ^= LobbyTtl.GetHashCode();
      if (ActiveMatchTimeout != 0) hash ^= ActiveMatchTimeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxMembers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxMembers);
      }
      if (MatchTtl != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatchTtl);
      }
      if (LobbyTtl != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LobbyTtl);
      }
      if (ActiveMatchTimeout != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveMatchTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxMembers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMembers);
      }
      if (MatchTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchTtl);
      }
      if (LobbyTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LobbyTtl);
      }
      if (ActiveMatchTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveMatchTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxMembers != 0) {
        MaxMembers = other.MaxMembers;
      }
      if (other.MatchTtl != 0) {
        MatchTtl = other.MatchTtl;
      }
      if (other.LobbyTtl != 0) {
        LobbyTtl = other.LobbyTtl;
      }
      if (other.ActiveMatchTimeout != 0) {
        ActiveMatchTimeout = other.ActiveMatchTimeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxMembers = input.ReadInt32();
            break;
          }
          case 16: {
            MatchTtl = input.ReadInt32();
            break;
          }
          case 24: {
            LobbyTtl = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveMatchTimeout = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogAggregatorConfig : pb::IMessage<LogAggregatorConfig> {
    private static readonly pb::MessageParser<LogAggregatorConfig> _parser = new pb::MessageParser<LogAggregatorConfig>(() => new LogAggregatorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogAggregatorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAggregatorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAggregatorConfig(LogAggregatorConfig other) : this() {
      matchLogTtl_ = other.matchLogTtl_;
      defaultLogTtl_ = other.defaultLogTtl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAggregatorConfig Clone() {
      return new LogAggregatorConfig(this);
    }

    /// <summary>Field number for the "match_log_ttl" field.</summary>
    public const int MatchLogTtlFieldNumber = 1;
    private int matchLogTtl_;
    /// <summary>
    /// Time to live for log types in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchLogTtl {
      get { return matchLogTtl_; }
      set {
        matchLogTtl_ = value;
      }
    }

    /// <summary>Field number for the "default_log_ttl" field.</summary>
    public const int DefaultLogTtlFieldNumber = 20;
    private int defaultLogTtl_;
    /// <summary>
    /// Default time to live for unspecified log types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultLogTtl {
      get { return defaultLogTtl_; }
      set {
        defaultLogTtl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogAggregatorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogAggregatorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchLogTtl != other.MatchLogTtl) return false;
      if (DefaultLogTtl != other.DefaultLogTtl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchLogTtl != 0) hash ^= MatchLogTtl.GetHashCode();
      if (DefaultLogTtl != 0) hash ^= DefaultLogTtl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchLogTtl != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MatchLogTtl);
      }
      if (DefaultLogTtl != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DefaultLogTtl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchLogTtl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchLogTtl);
      }
      if (DefaultLogTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultLogTtl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogAggregatorConfig other) {
      if (other == null) {
        return;
      }
      if (other.MatchLogTtl != 0) {
        MatchLogTtl = other.MatchLogTtl;
      }
      if (other.DefaultLogTtl != 0) {
        DefaultLogTtl = other.DefaultLogTtl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchLogTtl = input.ReadInt32();
            break;
          }
          case 160: {
            DefaultLogTtl = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a client feature flag.
  /// </summary>
  public sealed partial class FeatureDefinition : pb::IMessage<FeatureDefinition> {
    private static readonly pb::MessageParser<FeatureDefinition> _parser = new pb::MessageParser<FeatureDefinition>(() => new FeatureDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureDefinition(FeatureDefinition other) : this() {
      tag_ = other.tag_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureDefinition Clone() {
      return new FeatureDefinition(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    /// <summary>
    /// Unique tag identifying the feature.  Cannot be empty or contain spaces.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Free-form description of the feature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Describes when a set of feature flags are enabled.
  /// </summary>
  public sealed partial class FeatureRule : pb::IMessage<FeatureRule> {
    private static readonly pb::MessageParser<FeatureRule> _parser = new pb::MessageParser<FeatureRule>(() => new FeatureRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureRule(FeatureRule other) : this() {
      ruleId_ = other.ruleId_;
      FeatureSet = other.featureSet_ != null ? other.FeatureSet.Clone() : null;
      enabled_ = other.enabled_;
      priority_ = other.priority_;
      owner_ = other.owner_;
      notes_ = other.notes_;
      activeTimeUnix_ = other.activeTimeUnix_;
      inactiveTimeUnix_ = other.inactiveTimeUnix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureRule Clone() {
      return new FeatureRule(this);
    }

    /// <summary>Field number for the "rule_id" field.</summary>
    public const int RuleIdFieldNumber = 1;
    private long ruleId_;
    /// <summary>
    /// Server-generated unique ID of the rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RuleId {
      get { return ruleId_; }
      set {
        ruleId_ = value;
      }
    }

    /// <summary>Field number for the "feature_set" field.</summary>
    public const int FeatureSetFieldNumber = 2;
    private global::Tbmatch.ClientFeatureSet featureSet_;
    /// <summary>
    /// Feature tags and values enabled by the rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.ClientFeatureSet FeatureSet {
      get { return featureSet_; }
      set {
        featureSet_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 3;
    private bool enabled_;
    /// <summary>
    /// Rule is only effective when enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 4;
    private int priority_;
    /// <summary>
    /// Rules are evaluated in increasing priority order, with higher priority
    /// rules taking precedence in case of conflict on a feature tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private string owner_ = "";
    /// <summary>
    /// Who owns this rule?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 6;
    private string notes_ = "";
    /// <summary>
    /// Free-form text about this rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_time_unix" field.</summary>
    public const int ActiveTimeUnixFieldNumber = 10;
    private long activeTimeUnix_;
    /// <summary>
    /// If set, time after which the rule becomes active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActiveTimeUnix {
      get { return activeTimeUnix_; }
      set {
        activeTimeUnix_ = value;
      }
    }

    /// <summary>Field number for the "inactive_time_unix" field.</summary>
    public const int InactiveTimeUnixFieldNumber = 11;
    private long inactiveTimeUnix_;
    /// <summary>
    /// If set, time after which the rule becomes inactive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InactiveTimeUnix {
      get { return inactiveTimeUnix_; }
      set {
        inactiveTimeUnix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuleId != other.RuleId) return false;
      if (!object.Equals(FeatureSet, other.FeatureSet)) return false;
      if (Enabled != other.Enabled) return false;
      if (Priority != other.Priority) return false;
      if (Owner != other.Owner) return false;
      if (Notes != other.Notes) return false;
      if (ActiveTimeUnix != other.ActiveTimeUnix) return false;
      if (InactiveTimeUnix != other.InactiveTimeUnix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuleId != 0L) hash ^= RuleId.GetHashCode();
      if (featureSet_ != null) hash ^= FeatureSet.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      if (ActiveTimeUnix != 0L) hash ^= ActiveTimeUnix.GetHashCode();
      if (InactiveTimeUnix != 0L) hash ^= InactiveTimeUnix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RuleId);
      }
      if (featureSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FeatureSet);
      }
      if (Enabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enabled);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Owner);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Notes);
      }
      if (ActiveTimeUnix != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ActiveTimeUnix);
      }
      if (InactiveTimeUnix != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(InactiveTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RuleId);
      }
      if (featureSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureSet);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      if (ActiveTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActiveTimeUnix);
      }
      if (InactiveTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InactiveTimeUnix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureRule other) {
      if (other == null) {
        return;
      }
      if (other.RuleId != 0L) {
        RuleId = other.RuleId;
      }
      if (other.featureSet_ != null) {
        if (featureSet_ == null) {
          featureSet_ = new global::Tbmatch.ClientFeatureSet();
        }
        FeatureSet.MergeFrom(other.FeatureSet);
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      if (other.ActiveTimeUnix != 0L) {
        ActiveTimeUnix = other.ActiveTimeUnix;
      }
      if (other.InactiveTimeUnix != 0L) {
        InactiveTimeUnix = other.InactiveTimeUnix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RuleId = input.ReadInt64();
            break;
          }
          case 18: {
            if (featureSet_ == null) {
              featureSet_ = new global::Tbmatch.ClientFeatureSet();
            }
            input.ReadMessage(featureSet_);
            break;
          }
          case 24: {
            Enabled = input.ReadBool();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
          case 42: {
            Owner = input.ReadString();
            break;
          }
          case 50: {
            Notes = input.ReadString();
            break;
          }
          case 80: {
            ActiveTimeUnix = input.ReadInt64();
            break;
          }
          case 88: {
            InactiveTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGlobalConfigResult : pb::IMessage<GetGlobalConfigResult> {
    private static readonly pb::MessageParser<GetGlobalConfigResult> _parser = new pb::MessageParser<GetGlobalConfigResult>(() => new GetGlobalConfigResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGlobalConfigResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalConfigResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalConfigResult(GetGlobalConfigResult other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalConfigResult Clone() {
      return new GetGlobalConfigResult(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.GlobalConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GlobalConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGlobalConfigResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGlobalConfigResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGlobalConfigResult other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.GlobalConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.GlobalConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetGlobalConfigRequest : pb::IMessage<SetGlobalConfigRequest> {
    private static readonly pb::MessageParser<SetGlobalConfigRequest> _parser = new pb::MessageParser<SetGlobalConfigRequest>(() => new SetGlobalConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGlobalConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGlobalConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGlobalConfigRequest(SetGlobalConfigRequest other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGlobalConfigRequest Clone() {
      return new SetGlobalConfigRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.GlobalConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GlobalConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGlobalConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGlobalConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGlobalConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.GlobalConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.GlobalConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchQueueConfigResult : pb::IMessage<GetMatchQueueConfigResult> {
    private static readonly pb::MessageParser<GetMatchQueueConfigResult> _parser = new pb::MessageParser<GetMatchQueueConfigResult>(() => new GetMatchQueueConfigResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchQueueConfigResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueConfigResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueConfigResult(GetMatchQueueConfigResult other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchQueueConfigResult Clone() {
      return new GetMatchQueueConfigResult(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.MatchQueueConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MatchQueueConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchQueueConfigResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchQueueConfigResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchQueueConfigResult other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.MatchQueueConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.MatchQueueConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMatchQueueConfigRequest : pb::IMessage<SetMatchQueueConfigRequest> {
    private static readonly pb::MessageParser<SetMatchQueueConfigRequest> _parser = new pb::MessageParser<SetMatchQueueConfigRequest>(() => new SetMatchQueueConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMatchQueueConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchQueueConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchQueueConfigRequest(SetMatchQueueConfigRequest other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchQueueConfigRequest Clone() {
      return new SetMatchQueueConfigRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.MatchQueueConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MatchQueueConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMatchQueueConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMatchQueueConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMatchQueueConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.MatchQueueConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.MatchQueueConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchUserConfigResult : pb::IMessage<GetMatchUserConfigResult> {
    private static readonly pb::MessageParser<GetMatchUserConfigResult> _parser = new pb::MessageParser<GetMatchUserConfigResult>(() => new GetMatchUserConfigResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchUserConfigResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchUserConfigResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchUserConfigResult(GetMatchUserConfigResult other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchUserConfigResult Clone() {
      return new GetMatchUserConfigResult(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.MatchUserConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MatchUserConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchUserConfigResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchUserConfigResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchUserConfigResult other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.MatchUserConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.MatchUserConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMatchUserConfigRequest : pb::IMessage<SetMatchUserConfigRequest> {
    private static readonly pb::MessageParser<SetMatchUserConfigRequest> _parser = new pb::MessageParser<SetMatchUserConfigRequest>(() => new SetMatchUserConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMatchUserConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchUserConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchUserConfigRequest(SetMatchUserConfigRequest other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchUserConfigRequest Clone() {
      return new SetMatchUserConfigRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.MatchUserConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MatchUserConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMatchUserConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMatchUserConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMatchUserConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.MatchUserConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.MatchUserConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLobbyConfigResult : pb::IMessage<GetLobbyConfigResult> {
    private static readonly pb::MessageParser<GetLobbyConfigResult> _parser = new pb::MessageParser<GetLobbyConfigResult>(() => new GetLobbyConfigResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLobbyConfigResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyConfigResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyConfigResult(GetLobbyConfigResult other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLobbyConfigResult Clone() {
      return new GetLobbyConfigResult(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.LobbyConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.LobbyConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLobbyConfigResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLobbyConfigResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLobbyConfigResult other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.LobbyConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.LobbyConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetLobbyConfigRequest : pb::IMessage<SetLobbyConfigRequest> {
    private static readonly pb::MessageParser<SetLobbyConfigRequest> _parser = new pb::MessageParser<SetLobbyConfigRequest>(() => new SetLobbyConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetLobbyConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLobbyConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLobbyConfigRequest(SetLobbyConfigRequest other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLobbyConfigRequest Clone() {
      return new SetLobbyConfigRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Tbadmin.LobbyConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.LobbyConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetLobbyConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetLobbyConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetLobbyConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tbadmin.LobbyConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Tbadmin.LobbyConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListFeatureDefinitionsResult : pb::IMessage<ListFeatureDefinitionsResult> {
    private static readonly pb::MessageParser<ListFeatureDefinitionsResult> _parser = new pb::MessageParser<ListFeatureDefinitionsResult>(() => new ListFeatureDefinitionsResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFeatureDefinitionsResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFeatureDefinitionsResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFeatureDefinitionsResult(ListFeatureDefinitionsResult other) : this() {
      def_ = other.def_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFeatureDefinitionsResult Clone() {
      return new ListFeatureDefinitionsResult(this);
    }

    /// <summary>Field number for the "def" field.</summary>
    public const int DefFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.FeatureDefinition> _repeated_def_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.FeatureDefinition.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.FeatureDefinition> def_ = new pbc::RepeatedField<global::Tbadmin.FeatureDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.FeatureDefinition> Def {
      get { return def_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFeatureDefinitionsResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFeatureDefinitionsResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!def_.Equals(other.def_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= def_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      def_.WriteTo(output, _repeated_def_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += def_.CalculateSize(_repeated_def_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFeatureDefinitionsResult other) {
      if (other == null) {
        return;
      }
      def_.Add(other.def_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            def_.AddEntriesFrom(input, _repeated_def_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetFeatureDefinitionRequest : pb::IMessage<SetFeatureDefinitionRequest> {
    private static readonly pb::MessageParser<SetFeatureDefinitionRequest> _parser = new pb::MessageParser<SetFeatureDefinitionRequest>(() => new SetFeatureDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFeatureDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFeatureDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFeatureDefinitionRequest(SetFeatureDefinitionRequest other) : this() {
      Def = other.def_ != null ? other.Def.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFeatureDefinitionRequest Clone() {
      return new SetFeatureDefinitionRequest(this);
    }

    /// <summary>Field number for the "def" field.</summary>
    public const int DefFieldNumber = 1;
    private global::Tbadmin.FeatureDefinition def_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.FeatureDefinition Def {
      get { return def_; }
      set {
        def_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFeatureDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFeatureDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Def, other.Def)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (def_ != null) hash ^= Def.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (def_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Def);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (def_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Def);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFeatureDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.def_ != null) {
        if (def_ == null) {
          def_ = new global::Tbadmin.FeatureDefinition();
        }
        Def.MergeFrom(other.Def);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (def_ == null) {
              def_ = new global::Tbadmin.FeatureDefinition();
            }
            input.ReadMessage(def_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteFeatureDefinitionRequest : pb::IMessage<DeleteFeatureDefinitionRequest> {
    private static readonly pb::MessageParser<DeleteFeatureDefinitionRequest> _parser = new pb::MessageParser<DeleteFeatureDefinitionRequest>(() => new DeleteFeatureDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteFeatureDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFeatureDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFeatureDefinitionRequest(DeleteFeatureDefinitionRequest other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFeatureDefinitionRequest Clone() {
      return new DeleteFeatureDefinitionRequest(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteFeatureDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteFeatureDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteFeatureDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListFeatureRulesResult : pb::IMessage<ListFeatureRulesResult> {
    private static readonly pb::MessageParser<ListFeatureRulesResult> _parser = new pb::MessageParser<ListFeatureRulesResult>(() => new ListFeatureRulesResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFeatureRulesResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFeatureRulesResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFeatureRulesResult(ListFeatureRulesResult other) : this() {
      rule_ = other.rule_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFeatureRulesResult Clone() {
      return new ListFeatureRulesResult(this);
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.FeatureRule> _repeated_rule_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.FeatureRule.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.FeatureRule> rule_ = new pbc::RepeatedField<global::Tbadmin.FeatureRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.FeatureRule> Rule {
      get { return rule_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFeatureRulesResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFeatureRulesResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rule_.Equals(other.rule_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rule_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rule_.WriteTo(output, _repeated_rule_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rule_.CalculateSize(_repeated_rule_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFeatureRulesResult other) {
      if (other == null) {
        return;
      }
      rule_.Add(other.rule_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rule_.AddEntriesFrom(input, _repeated_rule_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetActiveFeaturesResult : pb::IMessage<GetActiveFeaturesResult> {
    private static readonly pb::MessageParser<GetActiveFeaturesResult> _parser = new pb::MessageParser<GetActiveFeaturesResult>(() => new GetActiveFeaturesResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetActiveFeaturesResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveFeaturesResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveFeaturesResult(GetActiveFeaturesResult other) : this() {
      FeatureSet = other.featureSet_ != null ? other.FeatureSet.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetActiveFeaturesResult Clone() {
      return new GetActiveFeaturesResult(this);
    }

    /// <summary>Field number for the "feature_set" field.</summary>
    public const int FeatureSetFieldNumber = 1;
    private global::Tbmatch.ClientFeatureSet featureSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbmatch.ClientFeatureSet FeatureSet {
      get { return featureSet_; }
      set {
        featureSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetActiveFeaturesResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetActiveFeaturesResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FeatureSet, other.FeatureSet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (featureSet_ != null) hash ^= FeatureSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (featureSet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FeatureSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (featureSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetActiveFeaturesResult other) {
      if (other == null) {
        return;
      }
      if (other.featureSet_ != null) {
        if (featureSet_ == null) {
          featureSet_ = new global::Tbmatch.ClientFeatureSet();
        }
        FeatureSet.MergeFrom(other.FeatureSet);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (featureSet_ == null) {
              featureSet_ = new global::Tbmatch.ClientFeatureSet();
            }
            input.ReadMessage(featureSet_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateFeatureRuleRequest : pb::IMessage<CreateFeatureRuleRequest> {
    private static readonly pb::MessageParser<CreateFeatureRuleRequest> _parser = new pb::MessageParser<CreateFeatureRuleRequest>(() => new CreateFeatureRuleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFeatureRuleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFeatureRuleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFeatureRuleRequest(CreateFeatureRuleRequest other) : this() {
      Rule = other.rule_ != null ? other.Rule.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFeatureRuleRequest Clone() {
      return new CreateFeatureRuleRequest(this);
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 1;
    private global::Tbadmin.FeatureRule rule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.FeatureRule Rule {
      get { return rule_; }
      set {
        rule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFeatureRuleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFeatureRuleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rule, other.Rule)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rule_ != null) hash ^= Rule.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rule_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rule);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFeatureRuleRequest other) {
      if (other == null) {
        return;
      }
      if (other.rule_ != null) {
        if (rule_ == null) {
          rule_ = new global::Tbadmin.FeatureRule();
        }
        Rule.MergeFrom(other.Rule);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rule_ == null) {
              rule_ = new global::Tbadmin.FeatureRule();
            }
            input.ReadMessage(rule_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateFeatureRuleRequest : pb::IMessage<UpdateFeatureRuleRequest> {
    private static readonly pb::MessageParser<UpdateFeatureRuleRequest> _parser = new pb::MessageParser<UpdateFeatureRuleRequest>(() => new UpdateFeatureRuleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateFeatureRuleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFeatureRuleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFeatureRuleRequest(UpdateFeatureRuleRequest other) : this() {
      Rule = other.rule_ != null ? other.Rule.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFeatureRuleRequest Clone() {
      return new UpdateFeatureRuleRequest(this);
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 1;
    private global::Tbadmin.FeatureRule rule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.FeatureRule Rule {
      get { return rule_; }
      set {
        rule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateFeatureRuleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateFeatureRuleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rule, other.Rule)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rule_ != null) hash ^= Rule.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rule_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rule);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateFeatureRuleRequest other) {
      if (other == null) {
        return;
      }
      if (other.rule_ != null) {
        if (rule_ == null) {
          rule_ = new global::Tbadmin.FeatureRule();
        }
        Rule.MergeFrom(other.Rule);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rule_ == null) {
              rule_ = new global::Tbadmin.FeatureRule();
            }
            input.ReadMessage(rule_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteFeatureRuleRequest : pb::IMessage<DeleteFeatureRuleRequest> {
    private static readonly pb::MessageParser<DeleteFeatureRuleRequest> _parser = new pb::MessageParser<DeleteFeatureRuleRequest>(() => new DeleteFeatureRuleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteFeatureRuleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFeatureRuleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFeatureRuleRequest(DeleteFeatureRuleRequest other) : this() {
      ruleId_ = other.ruleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFeatureRuleRequest Clone() {
      return new DeleteFeatureRuleRequest(this);
    }

    /// <summary>Field number for the "rule_id" field.</summary>
    public const int RuleIdFieldNumber = 1;
    private long ruleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RuleId {
      get { return ruleId_; }
      set {
        ruleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteFeatureRuleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteFeatureRuleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuleId != other.RuleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuleId != 0L) hash ^= RuleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RuleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RuleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteFeatureRuleRequest other) {
      if (other == null) {
        return;
      }
      if (other.RuleId != 0L) {
        RuleId = other.RuleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RuleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// How to connect to the database.
  /// </summary>
  public sealed partial class DatabaseConfig : pb::IMessage<DatabaseConfig> {
    private static readonly pb::MessageParser<DatabaseConfig> _parser = new pb::MessageParser<DatabaseConfig>(() => new DatabaseConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseConfig(DatabaseConfig other) : this() {
      user_ = other.user_;
      password_ = other.password_;
      host_ = other.host_;
      port_ = other.port_;
      database_ = other.database_;
      connectTimeout_ = other.connectTimeout_;
      maxIdle_ = other.maxIdle_;
      maxOpen_ = other.maxOpen_;
      sslMode_ = other.sslMode_;
      schemaPath_ = other.schemaPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseConfig Clone() {
      return new DatabaseConfig(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 3;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 5;
    private string database_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connect_timeout" field.</summary>
    public const int ConnectTimeoutFieldNumber = 6;
    private int connectTimeout_;
    /// <summary>
    /// How long to wait for a connection to establish in seconds.
    /// Zero means infinite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectTimeout {
      get { return connectTimeout_; }
      set {
        connectTimeout_ = value;
      }
    }

    /// <summary>Field number for the "max_idle" field.</summary>
    public const int MaxIdleFieldNumber = 7;
    private int maxIdle_;
    /// <summary>
    /// Max number of idle connections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIdle {
      get { return maxIdle_; }
      set {
        maxIdle_ = value;
      }
    }

    /// <summary>Field number for the "max_open" field.</summary>
    public const int MaxOpenFieldNumber = 8;
    private int maxOpen_;
    /// <summary>
    /// Max open connections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxOpen {
      get { return maxOpen_; }
      set {
        maxOpen_ = value;
      }
    }

    /// <summary>Field number for the "ssl_mode" field.</summary>
    public const int SslModeFieldNumber = 9;
    private string sslMode_ = "";
    /// <summary>
    /// "disable", "require", or "verify-full"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SslMode {
      get { return sslMode_; }
      set {
        sslMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema_path" field.</summary>
    public const int SchemaPathFieldNumber = 20;
    private string schemaPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaPath {
      get { return schemaPath_; }
      set {
        schemaPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Password != other.Password) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (Database != other.Database) return false;
      if (ConnectTimeout != other.ConnectTimeout) return false;
      if (MaxIdle != other.MaxIdle) return false;
      if (MaxOpen != other.MaxOpen) return false;
      if (SslMode != other.SslMode) return false;
      if (SchemaPath != other.SchemaPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      if (ConnectTimeout != 0) hash ^= ConnectTimeout.GetHashCode();
      if (MaxIdle != 0) hash ^= MaxIdle.GetHashCode();
      if (MaxOpen != 0) hash ^= MaxOpen.GetHashCode();
      if (SslMode.Length != 0) hash ^= SslMode.GetHashCode();
      if (SchemaPath.Length != 0) hash ^= SchemaPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (Database.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Database);
      }
      if (ConnectTimeout != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ConnectTimeout);
      }
      if (MaxIdle != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxIdle);
      }
      if (MaxOpen != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxOpen);
      }
      if (SslMode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SslMode);
      }
      if (SchemaPath.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(SchemaPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      if (ConnectTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectTimeout);
      }
      if (MaxIdle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIdle);
      }
      if (MaxOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOpen);
      }
      if (SslMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SslMode);
      }
      if (SchemaPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SchemaPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseConfig other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      if (other.ConnectTimeout != 0) {
        ConnectTimeout = other.ConnectTimeout;
      }
      if (other.MaxIdle != 0) {
        MaxIdle = other.MaxIdle;
      }
      if (other.MaxOpen != 0) {
        MaxOpen = other.MaxOpen;
      }
      if (other.SslMode.Length != 0) {
        SslMode = other.SslMode;
      }
      if (other.SchemaPath.Length != 0) {
        SchemaPath = other.SchemaPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Host = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 42: {
            Database = input.ReadString();
            break;
          }
          case 48: {
            ConnectTimeout = input.ReadInt32();
            break;
          }
          case 56: {
            MaxIdle = input.ReadInt32();
            break;
          }
          case 64: {
            MaxOpen = input.ReadInt32();
            break;
          }
          case 74: {
            SslMode = input.ReadString();
            break;
          }
          case 162: {
            SchemaPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RedisConfig : pb::IMessage<RedisConfig> {
    private static readonly pb::MessageParser<RedisConfig> _parser = new pb::MessageParser<RedisConfig>(() => new RedisConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedisConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisConfig(RedisConfig other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      password_ = other.password_;
      maxIdle_ = other.maxIdle_;
      database_ = other.database_;
      connectTimeoutMs_ = other.connectTimeoutMs_;
      readTimeoutMs_ = other.readTimeoutMs_;
      writeTimeoutMs_ = other.writeTimeoutMs_;
      luaPath_ = other.luaPath_;
      luaInclude_ = other.luaInclude_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisConfig Clone() {
      return new RedisConfig(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_idle" field.</summary>
    public const int MaxIdleFieldNumber = 4;
    private int maxIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIdle {
      get { return maxIdle_; }
      set {
        maxIdle_ = value;
      }
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 5;
    private int database_;
    /// <summary>
    /// Switch to a non-default database index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Database {
      get { return database_; }
      set {
        database_ = value;
      }
    }

    /// <summary>Field number for the "connect_timeout_ms" field.</summary>
    public const int ConnectTimeoutMsFieldNumber = 10;
    private int connectTimeoutMs_;
    /// <summary>
    /// How long to wait for a new Redis connection in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectTimeoutMs {
      get { return connectTimeoutMs_; }
      set {
        connectTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "read_timeout_ms" field.</summary>
    public const int ReadTimeoutMsFieldNumber = 11;
    private int readTimeoutMs_;
    /// <summary>
    /// Read timeout in milliseconds.  0 = infinite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadTimeoutMs {
      get { return readTimeoutMs_; }
      set {
        readTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "write_timeout_ms" field.</summary>
    public const int WriteTimeoutMsFieldNumber = 12;
    private int writeTimeoutMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WriteTimeoutMs {
      get { return writeTimeoutMs_; }
      set {
        writeTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "lua_path" field.</summary>
    public const int LuaPathFieldNumber = 13;
    private string luaPath_ = "";
    /// <summary>
    /// Path containing Lua script files to load in Redis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaPath {
      get { return luaPath_; }
      set {
        luaPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lua_include" field.</summary>
    public const int LuaIncludeFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_luaInclude_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> luaInclude_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Extra Lua include search paths.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LuaInclude {
      get { return luaInclude_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedisConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedisConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (Password != other.Password) return false;
      if (MaxIdle != other.MaxIdle) return false;
      if (Database != other.Database) return false;
      if (ConnectTimeoutMs != other.ConnectTimeoutMs) return false;
      if (ReadTimeoutMs != other.ReadTimeoutMs) return false;
      if (WriteTimeoutMs != other.WriteTimeoutMs) return false;
      if (LuaPath != other.LuaPath) return false;
      if(!luaInclude_.Equals(other.luaInclude_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (MaxIdle != 0) hash ^= MaxIdle.GetHashCode();
      if (Database != 0) hash ^= Database.GetHashCode();
      if (ConnectTimeoutMs != 0) hash ^= ConnectTimeoutMs.GetHashCode();
      if (ReadTimeoutMs != 0) hash ^= ReadTimeoutMs.GetHashCode();
      if (WriteTimeoutMs != 0) hash ^= WriteTimeoutMs.GetHashCode();
      if (LuaPath.Length != 0) hash ^= LuaPath.GetHashCode();
      hash ^= luaInclude_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (MaxIdle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxIdle);
      }
      if (Database != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Database);
      }
      if (ConnectTimeoutMs != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ConnectTimeoutMs);
      }
      if (ReadTimeoutMs != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ReadTimeoutMs);
      }
      if (WriteTimeoutMs != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(WriteTimeoutMs);
      }
      if (LuaPath.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LuaPath);
      }
      luaInclude_.WriteTo(output, _repeated_luaInclude_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (MaxIdle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIdle);
      }
      if (Database != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Database);
      }
      if (ConnectTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectTimeoutMs);
      }
      if (ReadTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadTimeoutMs);
      }
      if (WriteTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WriteTimeoutMs);
      }
      if (LuaPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuaPath);
      }
      size += luaInclude_.CalculateSize(_repeated_luaInclude_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedisConfig other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.MaxIdle != 0) {
        MaxIdle = other.MaxIdle;
      }
      if (other.Database != 0) {
        Database = other.Database;
      }
      if (other.ConnectTimeoutMs != 0) {
        ConnectTimeoutMs = other.ConnectTimeoutMs;
      }
      if (other.ReadTimeoutMs != 0) {
        ReadTimeoutMs = other.ReadTimeoutMs;
      }
      if (other.WriteTimeoutMs != 0) {
        WriteTimeoutMs = other.WriteTimeoutMs;
      }
      if (other.LuaPath.Length != 0) {
        LuaPath = other.LuaPath;
      }
      luaInclude_.Add(other.luaInclude_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 32: {
            MaxIdle = input.ReadInt32();
            break;
          }
          case 40: {
            Database = input.ReadInt32();
            break;
          }
          case 80: {
            ConnectTimeoutMs = input.ReadInt32();
            break;
          }
          case 88: {
            ReadTimeoutMs = input.ReadInt32();
            break;
          }
          case 96: {
            WriteTimeoutMs = input.ReadInt32();
            break;
          }
          case 106: {
            LuaPath = input.ReadString();
            break;
          }
          case 114: {
            luaInclude_.AddEntriesFrom(input, _repeated_luaInclude_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic Google API access credentials
  /// </summary>
  public sealed partial class GApiConfig : pb::IMessage<GApiConfig> {
    private static readonly pb::MessageParser<GApiConfig> _parser = new pb::MessageParser<GApiConfig>(() => new GApiConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GApiConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GApiConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GApiConfig(GApiConfig other) : this() {
      proxyUrl_ = other.proxyUrl_;
      projectId_ = other.projectId_;
      auth_ = other.auth_;
      gceAccount_ = other.gceAccount_;
      sdkAccount_ = other.sdkAccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GApiConfig Clone() {
      return new GApiConfig(this);
    }

    /// <summary>Field number for the "proxy_url" field.</summary>
    public const int ProxyUrlFieldNumber = 1;
    private string proxyUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProxyUrl {
      get { return proxyUrl_; }
      set {
        proxyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 4;
    private global::Tbadmin.GApiConfig.Types.AuthType auth_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GApiConfig.Types.AuthType Auth {
      get { return auth_; }
      set {
        auth_ = value;
      }
    }

    /// <summary>Field number for the "gce_account" field.</summary>
    public const int GceAccountFieldNumber = 10;
    private string gceAccount_ = "";
    /// <summary>
    /// role account for auth == GCE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GceAccount {
      get { return gceAccount_; }
      set {
        gceAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_account" field.</summary>
    public const int SdkAccountFieldNumber = 11;
    private string sdkAccount_ = "";
    /// <summary>
    /// account name for auth == SDK
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkAccount {
      get { return sdkAccount_; }
      set {
        sdkAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GApiConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GApiConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProxyUrl != other.ProxyUrl) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Auth != other.Auth) return false;
      if (GceAccount != other.GceAccount) return false;
      if (SdkAccount != other.SdkAccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProxyUrl.Length != 0) hash ^= ProxyUrl.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Auth != 0) hash ^= Auth.GetHashCode();
      if (GceAccount.Length != 0) hash ^= GceAccount.GetHashCode();
      if (SdkAccount.Length != 0) hash ^= SdkAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProxyUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProxyUrl);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectId);
      }
      if (Auth != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Auth);
      }
      if (GceAccount.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GceAccount);
      }
      if (SdkAccount.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SdkAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProxyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProxyUrl);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Auth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Auth);
      }
      if (GceAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GceAccount);
      }
      if (SdkAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkAccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GApiConfig other) {
      if (other == null) {
        return;
      }
      if (other.ProxyUrl.Length != 0) {
        ProxyUrl = other.ProxyUrl;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Auth != 0) {
        Auth = other.Auth;
      }
      if (other.GceAccount.Length != 0) {
        GceAccount = other.GceAccount;
      }
      if (other.SdkAccount.Length != 0) {
        SdkAccount = other.SdkAccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProxyUrl = input.ReadString();
            break;
          }
          case 18: {
            ProjectId = input.ReadString();
            break;
          }
          case 32: {
            auth_ = (global::Tbadmin.GApiConfig.Types.AuthType) input.ReadEnum();
            break;
          }
          case 82: {
            GceAccount = input.ReadString();
            break;
          }
          case 90: {
            SdkAccount = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GApiConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AuthType {
        [pbr::OriginalName("AUTH_TYPE_ZERO")] Zero = 0,
        [pbr::OriginalName("GCE")] Gce = 1,
        [pbr::OriginalName("SDK")] Sdk = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Where to store something on Google Cloud Storage.
  /// </summary>
  public sealed partial class GcsStorageConfig : pb::IMessage<GcsStorageConfig> {
    private static readonly pb::MessageParser<GcsStorageConfig> _parser = new pb::MessageParser<GcsStorageConfig>(() => new GcsStorageConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GcsStorageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcsStorageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcsStorageConfig(GcsStorageConfig other) : this() {
      proxyUrl_ = other.proxyUrl_;
      projectId_ = other.projectId_;
      bucketName_ = other.bucketName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcsStorageConfig Clone() {
      return new GcsStorageConfig(this);
    }

    /// <summary>Field number for the "proxy_url" field.</summary>
    public const int ProxyUrlFieldNumber = 1;
    private string proxyUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProxyUrl {
      get { return proxyUrl_; }
      set {
        proxyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bucket_name" field.</summary>
    public const int BucketNameFieldNumber = 3;
    private string bucketName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BucketName {
      get { return bucketName_; }
      set {
        bucketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GcsStorageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GcsStorageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProxyUrl != other.ProxyUrl) return false;
      if (ProjectId != other.ProjectId) return false;
      if (BucketName != other.BucketName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProxyUrl.Length != 0) hash ^= ProxyUrl.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (BucketName.Length != 0) hash ^= BucketName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProxyUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProxyUrl);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectId);
      }
      if (BucketName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BucketName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProxyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProxyUrl);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (BucketName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BucketName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GcsStorageConfig other) {
      if (other == null) {
        return;
      }
      if (other.ProxyUrl.Length != 0) {
        ProxyUrl = other.ProxyUrl;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.BucketName.Length != 0) {
        BucketName = other.BucketName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProxyUrl = input.ReadString();
            break;
          }
          case 18: {
            ProjectId = input.ReadString();
            break;
          }
          case 26: {
            BucketName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionAuthKey : pb::IMessage<SessionAuthKey> {
    private static readonly pb::MessageParser<SessionAuthKey> _parser = new pb::MessageParser<SessionAuthKey>(() => new SessionAuthKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionAuthKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionAuthKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionAuthKey(SessionAuthKey other) : this() {
      current_ = other.current_;
      previous_ = other.previous_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionAuthKey Clone() {
      return new SessionAuthKey(this);
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 1;
    private string current_ = "";
    /// <summary>
    /// Base64 encoded session key for signing new cookies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Current {
      get { return current_; }
      set {
        current_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous" field.</summary>
    public const int PreviousFieldNumber = 2;
    private string previous_ = "";
    /// <summary>
    /// Base64 encoded alternate encoded key signature to accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Previous {
      get { return previous_; }
      set {
        previous_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionAuthKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionAuthKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Current != other.Current) return false;
      if (Previous != other.Previous) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Current.Length != 0) hash ^= Current.GetHashCode();
      if (Previous.Length != 0) hash ^= Previous.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Current.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Current);
      }
      if (Previous.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Previous);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Current.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Current);
      }
      if (Previous.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Previous);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionAuthKey other) {
      if (other == null) {
        return;
      }
      if (other.Current.Length != 0) {
        Current = other.Current;
      }
      if (other.Previous.Length != 0) {
        Previous = other.Previous;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Current = input.ReadString();
            break;
          }
          case 18: {
            Previous = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// How to expose RPC methods.
  /// </summary>
  public sealed partial class RPCConfig : pb::IMessage<RPCConfig> {
    private static readonly pb::MessageParser<RPCConfig> _parser = new pb::MessageParser<RPCConfig>(() => new RPCConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RPCConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RPCConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RPCConfig(RPCConfig other) : this() {
      httpPort_ = other.httpPort_;
      rpcUri_ = other.rpcUri_;
      SessionKey = other.sessionKey_ != null ? other.SessionKey.Clone() : null;
      sessionTimeoutSecs_ = other.sessionTimeoutSecs_;
      sessionActiveWindowSecs_ = other.sessionActiveWindowSecs_;
      maxRequestSize_ = other.maxRequestSize_;
      jsonLogPath_ = other.jsonLogPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RPCConfig Clone() {
      return new RPCConfig(this);
    }

    /// <summary>Field number for the "http_port" field.</summary>
    public const int HttpPortFieldNumber = 1;
    private int httpPort_;
    /// <summary>
    /// HTTP port to bind to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HttpPort {
      get { return httpPort_; }
      set {
        httpPort_ = value;
      }
    }

    /// <summary>Field number for the "rpc_uri" field.</summary>
    public const int RpcUriFieldNumber = 2;
    private string rpcUri_ = "";
    /// <summary>
    /// URI prefix to expose the tbmatch API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcUri {
      get { return rpcUri_; }
      set {
        rpcUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_key" field.</summary>
    public const int SessionKeyFieldNumber = 3;
    private global::Tbadmin.SessionAuthKey sessionKey_;
    /// <summary>
    /// The 64-byte session key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.SessionAuthKey SessionKey {
      get { return sessionKey_; }
      set {
        sessionKey_ = value;
      }
    }

    /// <summary>Field number for the "session_timeout_secs" field.</summary>
    public const int SessionTimeoutSecsFieldNumber = 4;
    private int sessionTimeoutSecs_;
    /// <summary>
    /// How long before an idle session is discarded with no activity at all.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionTimeoutSecs {
      get { return sessionTimeoutSecs_; }
      set {
        sessionTimeoutSecs_ = value;
      }
    }

    /// <summary>Field number for the "session_active_window_secs" field.</summary>
    public const int SessionActiveWindowSecsFieldNumber = 5;
    private int sessionActiveWindowSecs_;
    /// <summary>
    /// Time window to consider "active" sessions, e.g. those invoking methods
    /// other than GetEvent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionActiveWindowSecs {
      get { return sessionActiveWindowSecs_; }
      set {
        sessionActiveWindowSecs_ = value;
      }
    }

    /// <summary>Field number for the "max_request_size" field.</summary>
    public const int MaxRequestSizeFieldNumber = 6;
    private long maxRequestSize_;
    /// <summary>
    /// Max content size of requests, to prevent denial of service
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxRequestSize {
      get { return maxRequestSize_; }
      set {
        maxRequestSize_ = value;
      }
    }

    /// <summary>Field number for the "json_log_path" field.</summary>
    public const int JsonLogPathFieldNumber = 10;
    private string jsonLogPath_ = "";
    /// <summary>
    /// File to log JSON-format RPC records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonLogPath {
      get { return jsonLogPath_; }
      set {
        jsonLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RPCConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RPCConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpPort != other.HttpPort) return false;
      if (RpcUri != other.RpcUri) return false;
      if (!object.Equals(SessionKey, other.SessionKey)) return false;
      if (SessionTimeoutSecs != other.SessionTimeoutSecs) return false;
      if (SessionActiveWindowSecs != other.SessionActiveWindowSecs) return false;
      if (MaxRequestSize != other.MaxRequestSize) return false;
      if (JsonLogPath != other.JsonLogPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpPort != 0) hash ^= HttpPort.GetHashCode();
      if (RpcUri.Length != 0) hash ^= RpcUri.GetHashCode();
      if (sessionKey_ != null) hash ^= SessionKey.GetHashCode();
      if (SessionTimeoutSecs != 0) hash ^= SessionTimeoutSecs.GetHashCode();
      if (SessionActiveWindowSecs != 0) hash ^= SessionActiveWindowSecs.GetHashCode();
      if (MaxRequestSize != 0L) hash ^= MaxRequestSize.GetHashCode();
      if (JsonLogPath.Length != 0) hash ^= JsonLogPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpPort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HttpPort);
      }
      if (RpcUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RpcUri);
      }
      if (sessionKey_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SessionKey);
      }
      if (SessionTimeoutSecs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SessionTimeoutSecs);
      }
      if (SessionActiveWindowSecs != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SessionActiveWindowSecs);
      }
      if (MaxRequestSize != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxRequestSize);
      }
      if (JsonLogPath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(JsonLogPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HttpPort);
      }
      if (RpcUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcUri);
      }
      if (sessionKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionKey);
      }
      if (SessionTimeoutSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionTimeoutSecs);
      }
      if (SessionActiveWindowSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionActiveWindowSecs);
      }
      if (MaxRequestSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxRequestSize);
      }
      if (JsonLogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonLogPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RPCConfig other) {
      if (other == null) {
        return;
      }
      if (other.HttpPort != 0) {
        HttpPort = other.HttpPort;
      }
      if (other.RpcUri.Length != 0) {
        RpcUri = other.RpcUri;
      }
      if (other.sessionKey_ != null) {
        if (sessionKey_ == null) {
          sessionKey_ = new global::Tbadmin.SessionAuthKey();
        }
        SessionKey.MergeFrom(other.SessionKey);
      }
      if (other.SessionTimeoutSecs != 0) {
        SessionTimeoutSecs = other.SessionTimeoutSecs;
      }
      if (other.SessionActiveWindowSecs != 0) {
        SessionActiveWindowSecs = other.SessionActiveWindowSecs;
      }
      if (other.MaxRequestSize != 0L) {
        MaxRequestSize = other.MaxRequestSize;
      }
      if (other.JsonLogPath.Length != 0) {
        JsonLogPath = other.JsonLogPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HttpPort = input.ReadInt32();
            break;
          }
          case 18: {
            RpcUri = input.ReadString();
            break;
          }
          case 26: {
            if (sessionKey_ == null) {
              sessionKey_ = new global::Tbadmin.SessionAuthKey();
            }
            input.ReadMessage(sessionKey_);
            break;
          }
          case 32: {
            SessionTimeoutSecs = input.ReadInt32();
            break;
          }
          case 40: {
            SessionActiveWindowSecs = input.ReadInt32();
            break;
          }
          case 48: {
            MaxRequestSize = input.ReadInt64();
            break;
          }
          case 82: {
            JsonLogPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for talking to payment gateway (Authorize.Net).
  /// </summary>
  public sealed partial class PaymentCreds : pb::IMessage<PaymentCreds> {
    private static readonly pb::MessageParser<PaymentCreds> _parser = new pb::MessageParser<PaymentCreds>(() => new PaymentCreds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentCreds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentCreds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentCreds(PaymentCreds other) : this() {
      apiUrl_ = other.apiUrl_;
      apiLoginId_ = other.apiLoginId_;
      transactionKey_ = other.transactionKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentCreds Clone() {
      return new PaymentCreds(this);
    }

    /// <summary>Field number for the "api_url" field.</summary>
    public const int ApiUrlFieldNumber = 1;
    private string apiUrl_ = "";
    /// <summary>
    /// URL where the API can be reached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiUrl {
      get { return apiUrl_; }
      set {
        apiUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "api_login_id" field.</summary>
    public const int ApiLoginIdFieldNumber = 2;
    private string apiLoginId_ = "";
    /// <summary>
    /// API Login ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiLoginId {
      get { return apiLoginId_; }
      set {
        apiLoginId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transaction_key" field.</summary>
    public const int TransactionKeyFieldNumber = 3;
    private string transactionKey_ = "";
    /// <summary>
    /// Transaction Key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionKey {
      get { return transactionKey_; }
      set {
        transactionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentCreds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentCreds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApiUrl != other.ApiUrl) return false;
      if (ApiLoginId != other.ApiLoginId) return false;
      if (TransactionKey != other.TransactionKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApiUrl.Length != 0) hash ^= ApiUrl.GetHashCode();
      if (ApiLoginId.Length != 0) hash ^= ApiLoginId.GetHashCode();
      if (TransactionKey.Length != 0) hash ^= TransactionKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApiUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ApiUrl);
      }
      if (ApiLoginId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ApiLoginId);
      }
      if (TransactionKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TransactionKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApiUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiUrl);
      }
      if (ApiLoginId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiLoginId);
      }
      if (TransactionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentCreds other) {
      if (other == null) {
        return;
      }
      if (other.ApiUrl.Length != 0) {
        ApiUrl = other.ApiUrl;
      }
      if (other.ApiLoginId.Length != 0) {
        ApiLoginId = other.ApiLoginId;
      }
      if (other.TransactionKey.Length != 0) {
        TransactionKey = other.TransactionKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ApiUrl = input.ReadString();
            break;
          }
          case 18: {
            ApiLoginId = input.ReadString();
            break;
          }
          case 26: {
            TransactionKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// How to talk to the Portal service via Redis.
  /// </summary>
  public sealed partial class PortalClientConfig : pb::IMessage<PortalClientConfig> {
    private static readonly pb::MessageParser<PortalClientConfig> _parser = new pb::MessageParser<PortalClientConfig>(() => new PortalClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PortalClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortalClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortalClientConfig(PortalClientConfig other) : this() {
      requestQueue_ = other.requestQueue_;
      reportQueue_ = other.reportQueue_;
      responseTimeoutMs_ = other.responseTimeoutMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortalClientConfig Clone() {
      return new PortalClientConfig(this);
    }

    /// <summary>Field number for the "request_queue" field.</summary>
    public const int RequestQueueFieldNumber = 1;
    private string requestQueue_ = "";
    /// <summary>
    /// List to enqueue (RPUSH) portal requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestQueue {
      get { return requestQueue_; }
      set {
        requestQueue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_queue" field.</summary>
    public const int ReportQueueFieldNumber = 2;
    private string reportQueue_ = "";
    /// <summary>
    /// List to consume (BLPOP) portal closure reports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportQueue {
      get { return reportQueue_; }
      set {
        reportQueue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_timeout_ms" field.</summary>
    public const int ResponseTimeoutMsFieldNumber = 3;
    private int responseTimeoutMs_;
    /// <summary>
    /// Time to wait for response from a portal request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResponseTimeoutMs {
      get { return responseTimeoutMs_; }
      set {
        responseTimeoutMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PortalClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PortalClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestQueue != other.RequestQueue) return false;
      if (ReportQueue != other.ReportQueue) return false;
      if (ResponseTimeoutMs != other.ResponseTimeoutMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestQueue.Length != 0) hash ^= RequestQueue.GetHashCode();
      if (ReportQueue.Length != 0) hash ^= ReportQueue.GetHashCode();
      if (ResponseTimeoutMs != 0) hash ^= ResponseTimeoutMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestQueue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestQueue);
      }
      if (ReportQueue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReportQueue);
      }
      if (ResponseTimeoutMs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResponseTimeoutMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestQueue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestQueue);
      }
      if (ReportQueue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportQueue);
      }
      if (ResponseTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResponseTimeoutMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PortalClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.RequestQueue.Length != 0) {
        RequestQueue = other.RequestQueue;
      }
      if (other.ReportQueue.Length != 0) {
        ReportQueue = other.ReportQueue;
      }
      if (other.ResponseTimeoutMs != 0) {
        ResponseTimeoutMs = other.ResponseTimeoutMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestQueue = input.ReadString();
            break;
          }
          case 18: {
            ReportQueue = input.ReadString();
            break;
          }
          case 24: {
            ResponseTimeoutMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitorConfig : pb::IMessage<MonitorConfig> {
    private static readonly pb::MessageParser<MonitorConfig> _parser = new pb::MessageParser<MonitorConfig>(() => new MonitorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfig(MonitorConfig other) : this() {
      varsUri_ = other.varsUri_;
      healthUri_ = other.healthUri_;
      varsAllowNet_ = other.varsAllowNet_.Clone();
      healthAllowNet_ = other.healthAllowNet_.Clone();
      appconfzUri_ = other.appconfzUri_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitorConfig Clone() {
      return new MonitorConfig(this);
    }

    /// <summary>Field number for the "vars_uri" field.</summary>
    public const int VarsUriFieldNumber = 1;
    private string varsUri_ = "";
    /// <summary>
    /// URI to access export variables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VarsUri {
      get { return varsUri_; }
      set {
        varsUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health_uri" field.</summary>
    public const int HealthUriFieldNumber = 2;
    private string healthUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HealthUri {
      get { return healthUri_; }
      set {
        healthUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars_allow_net" field.</summary>
    public const int VarsAllowNetFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_varsAllowNet_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> varsAllowNet_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of allowed subnets in CIDR notation for vars_uri, desyncz_uri, appconfz_uri
    /// No entries allows access from any host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VarsAllowNet {
      get { return varsAllowNet_; }
    }

    /// <summary>Field number for the "health_allow_net" field.</summary>
    public const int HealthAllowNetFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_healthAllowNet_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> healthAllowNet_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Separate allowed subnets for health_uri.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HealthAllowNet {
      get { return healthAllowNet_; }
    }

    /// <summary>Field number for the "appconfz_uri" field.</summary>
    public const int AppconfzUriFieldNumber = 21;
    private string appconfzUri_ = "";
    /// <summary>
    /// Where to serve the loaded appconfig.  Empty means don't serve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppconfzUri {
      get { return appconfzUri_; }
      set {
        appconfzUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VarsUri != other.VarsUri) return false;
      if (HealthUri != other.HealthUri) return false;
      if(!varsAllowNet_.Equals(other.varsAllowNet_)) return false;
      if(!healthAllowNet_.Equals(other.healthAllowNet_)) return false;
      if (AppconfzUri != other.AppconfzUri) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VarsUri.Length != 0) hash ^= VarsUri.GetHashCode();
      if (HealthUri.Length != 0) hash ^= HealthUri.GetHashCode();
      hash ^= varsAllowNet_.GetHashCode();
      hash ^= healthAllowNet_.GetHashCode();
      if (AppconfzUri.Length != 0) hash ^= AppconfzUri.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VarsUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VarsUri);
      }
      if (HealthUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HealthUri);
      }
      varsAllowNet_.WriteTo(output, _repeated_varsAllowNet_codec);
      healthAllowNet_.WriteTo(output, _repeated_healthAllowNet_codec);
      if (AppconfzUri.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(AppconfzUri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VarsUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VarsUri);
      }
      if (HealthUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HealthUri);
      }
      size += varsAllowNet_.CalculateSize(_repeated_varsAllowNet_codec);
      size += healthAllowNet_.CalculateSize(_repeated_healthAllowNet_codec);
      if (AppconfzUri.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppconfzUri);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitorConfig other) {
      if (other == null) {
        return;
      }
      if (other.VarsUri.Length != 0) {
        VarsUri = other.VarsUri;
      }
      if (other.HealthUri.Length != 0) {
        HealthUri = other.HealthUri;
      }
      varsAllowNet_.Add(other.varsAllowNet_);
      healthAllowNet_.Add(other.healthAllowNet_);
      if (other.AppconfzUri.Length != 0) {
        AppconfzUri = other.AppconfzUri;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VarsUri = input.ReadString();
            break;
          }
          case 18: {
            HealthUri = input.ReadString();
            break;
          }
          case 26: {
            varsAllowNet_.AddEntriesFrom(input, _repeated_varsAllowNet_codec);
            break;
          }
          case 34: {
            healthAllowNet_.AddEntriesFrom(input, _repeated_healthAllowNet_codec);
            break;
          }
          case 170: {
            AppconfzUri = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Common mail template variables.
  /// </summary>
  public sealed partial class MailGlobalVars : pb::IMessage<MailGlobalVars> {
    private static readonly pb::MessageParser<MailGlobalVars> _parser = new pb::MessageParser<MailGlobalVars>(() => new MailGlobalVars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailGlobalVars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailGlobalVars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailGlobalVars(MailGlobalVars other) : this() {
      senderAddress_ = other.senderAddress_;
      siteName_ = other.siteName_;
      senderName_ = other.senderName_;
      accountRecoveryUrl_ = other.accountRecoveryUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailGlobalVars Clone() {
      return new MailGlobalVars(this);
    }

    /// <summary>Field number for the "sender_address" field.</summary>
    public const int SenderAddressFieldNumber = 1;
    private string senderAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderAddress {
      get { return senderAddress_; }
      set {
        senderAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "site_name" field.</summary>
    public const int SiteNameFieldNumber = 2;
    private string siteName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SiteName {
      get { return siteName_; }
      set {
        siteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_name" field.</summary>
    public const int SenderNameFieldNumber = 4;
    private string senderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_recovery_url" field.</summary>
    public const int AccountRecoveryUrlFieldNumber = 3;
    private string accountRecoveryUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountRecoveryUrl {
      get { return accountRecoveryUrl_; }
      set {
        accountRecoveryUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailGlobalVars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailGlobalVars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderAddress != other.SenderAddress) return false;
      if (SiteName != other.SiteName) return false;
      if (SenderName != other.SenderName) return false;
      if (AccountRecoveryUrl != other.AccountRecoveryUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderAddress.Length != 0) hash ^= SenderAddress.GetHashCode();
      if (SiteName.Length != 0) hash ^= SiteName.GetHashCode();
      if (SenderName.Length != 0) hash ^= SenderName.GetHashCode();
      if (AccountRecoveryUrl.Length != 0) hash ^= AccountRecoveryUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderAddress);
      }
      if (SiteName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SiteName);
      }
      if (AccountRecoveryUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountRecoveryUrl);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SenderName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderAddress);
      }
      if (SiteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SiteName);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (AccountRecoveryUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountRecoveryUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailGlobalVars other) {
      if (other == null) {
        return;
      }
      if (other.SenderAddress.Length != 0) {
        SenderAddress = other.SenderAddress;
      }
      if (other.SiteName.Length != 0) {
        SiteName = other.SiteName;
      }
      if (other.SenderName.Length != 0) {
        SenderName = other.SenderName;
      }
      if (other.AccountRecoveryUrl.Length != 0) {
        AccountRecoveryUrl = other.AccountRecoveryUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SenderAddress = input.ReadString();
            break;
          }
          case 18: {
            SiteName = input.ReadString();
            break;
          }
          case 26: {
            AccountRecoveryUrl = input.ReadString();
            break;
          }
          case 34: {
            SenderName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailConfig : pb::IMessage<MailConfig> {
    private static readonly pb::MessageParser<MailConfig> _parser = new pb::MessageParser<MailConfig>(() => new MailConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailConfig(MailConfig other) : this() {
      host_ = other.host_.Clone();
      tls_ = other.tls_;
      insecureSkipVerify_ = other.insecureSkipVerify_;
      authUser_ = other.authUser_;
      authPassword_ = other.authPassword_;
      templatePath_ = other.templatePath_;
      includePath_ = other.includePath_;
      autoReload_ = other.autoReload_;
      Vars = other.vars_ != null ? other.Vars.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailConfig Clone() {
      return new MailConfig(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.MailConfig.Types.MailHost> _repeated_host_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.MailConfig.Types.MailHost.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.MailConfig.Types.MailHost> host_ = new pbc::RepeatedField<global::Tbadmin.MailConfig.Types.MailHost>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.MailConfig.Types.MailHost> Host {
      get { return host_; }
    }

    /// <summary>Field number for the "tls" field.</summary>
    public const int TlsFieldNumber = 3;
    private bool tls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Tls {
      get { return tls_; }
      set {
        tls_ = value;
      }
    }

    /// <summary>Field number for the "insecure_skip_verify" field.</summary>
    public const int InsecureSkipVerifyFieldNumber = 4;
    private bool insecureSkipVerify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InsecureSkipVerify {
      get { return insecureSkipVerify_; }
      set {
        insecureSkipVerify_ = value;
      }
    }

    /// <summary>Field number for the "auth_user" field.</summary>
    public const int AuthUserFieldNumber = 5;
    private string authUser_ = "";
    /// <summary>
    /// Login credentials.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUser {
      get { return authUser_; }
      set {
        authUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_password" field.</summary>
    public const int AuthPasswordFieldNumber = 6;
    private string authPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthPassword {
      get { return authPassword_; }
      set {
        authPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template_path" field.</summary>
    public const int TemplatePathFieldNumber = 7;
    private string templatePath_ = "";
    /// <summary>
    /// Location of mail fragments and templates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TemplatePath {
      get { return templatePath_; }
      set {
        templatePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_path" field.</summary>
    public const int IncludePathFieldNumber = 8;
    private string includePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IncludePath {
      get { return includePath_; }
      set {
        includePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auto_reload" field.</summary>
    public const int AutoReloadFieldNumber = 9;
    private bool autoReload_;
    /// <summary>
    /// Check for changes on disk when fetching a template.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoReload {
      get { return autoReload_; }
      set {
        autoReload_ = value;
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 20;
    private global::Tbadmin.MailGlobalVars vars_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MailGlobalVars Vars {
      get { return vars_; }
      set {
        vars_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!host_.Equals(other.host_)) return false;
      if (Tls != other.Tls) return false;
      if (InsecureSkipVerify != other.InsecureSkipVerify) return false;
      if (AuthUser != other.AuthUser) return false;
      if (AuthPassword != other.AuthPassword) return false;
      if (TemplatePath != other.TemplatePath) return false;
      if (IncludePath != other.IncludePath) return false;
      if (AutoReload != other.AutoReload) return false;
      if (!object.Equals(Vars, other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= host_.GetHashCode();
      if (Tls != false) hash ^= Tls.GetHashCode();
      if (InsecureSkipVerify != false) hash ^= InsecureSkipVerify.GetHashCode();
      if (AuthUser.Length != 0) hash ^= AuthUser.GetHashCode();
      if (AuthPassword.Length != 0) hash ^= AuthPassword.GetHashCode();
      if (TemplatePath.Length != 0) hash ^= TemplatePath.GetHashCode();
      if (IncludePath.Length != 0) hash ^= IncludePath.GetHashCode();
      if (AutoReload != false) hash ^= AutoReload.GetHashCode();
      if (vars_ != null) hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      host_.WriteTo(output, _repeated_host_codec);
      if (Tls != false) {
        output.WriteRawTag(24);
        output.WriteBool(Tls);
      }
      if (InsecureSkipVerify != false) {
        output.WriteRawTag(32);
        output.WriteBool(InsecureSkipVerify);
      }
      if (AuthUser.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AuthUser);
      }
      if (AuthPassword.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AuthPassword);
      }
      if (TemplatePath.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TemplatePath);
      }
      if (IncludePath.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IncludePath);
      }
      if (AutoReload != false) {
        output.WriteRawTag(72);
        output.WriteBool(AutoReload);
      }
      if (vars_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Vars);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += host_.CalculateSize(_repeated_host_codec);
      if (Tls != false) {
        size += 1 + 1;
      }
      if (InsecureSkipVerify != false) {
        size += 1 + 1;
      }
      if (AuthUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUser);
      }
      if (AuthPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthPassword);
      }
      if (TemplatePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplatePath);
      }
      if (IncludePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IncludePath);
      }
      if (AutoReload != false) {
        size += 1 + 1;
      }
      if (vars_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vars);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailConfig other) {
      if (other == null) {
        return;
      }
      host_.Add(other.host_);
      if (other.Tls != false) {
        Tls = other.Tls;
      }
      if (other.InsecureSkipVerify != false) {
        InsecureSkipVerify = other.InsecureSkipVerify;
      }
      if (other.AuthUser.Length != 0) {
        AuthUser = other.AuthUser;
      }
      if (other.AuthPassword.Length != 0) {
        AuthPassword = other.AuthPassword;
      }
      if (other.TemplatePath.Length != 0) {
        TemplatePath = other.TemplatePath;
      }
      if (other.IncludePath.Length != 0) {
        IncludePath = other.IncludePath;
      }
      if (other.AutoReload != false) {
        AutoReload = other.AutoReload;
      }
      if (other.vars_ != null) {
        if (vars_ == null) {
          vars_ = new global::Tbadmin.MailGlobalVars();
        }
        Vars.MergeFrom(other.Vars);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            host_.AddEntriesFrom(input, _repeated_host_codec);
            break;
          }
          case 24: {
            Tls = input.ReadBool();
            break;
          }
          case 32: {
            InsecureSkipVerify = input.ReadBool();
            break;
          }
          case 42: {
            AuthUser = input.ReadString();
            break;
          }
          case 50: {
            AuthPassword = input.ReadString();
            break;
          }
          case 58: {
            TemplatePath = input.ReadString();
            break;
          }
          case 66: {
            IncludePath = input.ReadString();
            break;
          }
          case 72: {
            AutoReload = input.ReadBool();
            break;
          }
          case 162: {
            if (vars_ == null) {
              vars_ = new global::Tbadmin.MailGlobalVars();
            }
            input.ReadMessage(vars_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MailConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// SMTP hosts to connect to.
      /// </summary>
      public sealed partial class MailHost : pb::IMessage<MailHost> {
        private static readonly pb::MessageParser<MailHost> _parser = new pb::MessageParser<MailHost>(() => new MailHost());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MailHost> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tbadmin.MailConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MailHost() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MailHost(MailHost other) : this() {
          host_ = other.host_;
          port_ = other.port_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MailHost Clone() {
          return new MailHost(this);
        }

        /// <summary>Field number for the "host" field.</summary>
        public const int HostFieldNumber = 1;
        private string host_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Host {
          get { return host_; }
          set {
            host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 2;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MailHost);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MailHost other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Host != other.Host) return false;
          if (Port != other.Port) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Host.Length != 0) hash ^= Host.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Host.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Host);
          }
          if (Port != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Port);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Host.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MailHost other) {
          if (other == null) {
            return;
          }
          if (other.Host.Length != 0) {
            Host = other.Host;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Host = input.ReadString();
                break;
              }
              case 16: {
                Port = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MatchMakerConfig : pb::IMessage<MatchMakerConfig> {
    private static readonly pb::MessageParser<MatchMakerConfig> _parser = new pb::MessageParser<MatchMakerConfig>(() => new MatchMakerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchMakerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakerConfig(MatchMakerConfig other) : this() {
      enabled_ = other.enabled_;
      masterRetryIntervalMs_ = other.masterRetryIntervalMs_;
      masterLockExpiryMs_ = other.masterLockExpiryMs_;
      pollPeriodMs_ = other.pollPeriodMs_;
      errorRetryMs_ = other.errorRetryMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakerConfig Clone() {
      return new MatchMakerConfig(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    /// <summary>
    /// Participate in election and poll queues when master?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "master_retry_interval_ms" field.</summary>
    public const int MasterRetryIntervalMsFieldNumber = 2;
    private int masterRetryIntervalMs_;
    /// <summary>
    /// How often to try to become master when not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MasterRetryIntervalMs {
      get { return masterRetryIntervalMs_; }
      set {
        masterRetryIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "master_lock_expiry_ms" field.</summary>
    public const int MasterLockExpiryMsFieldNumber = 3;
    private int masterLockExpiryMs_;
    /// <summary>
    /// Milliseconds after which the master lock should expire if not re-upped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MasterLockExpiryMs {
      get { return masterLockExpiryMs_; }
      set {
        masterLockExpiryMs_ = value;
      }
    }

    /// <summary>Field number for the "poll_period_ms" field.</summary>
    public const int PollPeriodMsFieldNumber = 4;
    private int pollPeriodMs_;
    /// <summary>
    /// How often to run the polling script as master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PollPeriodMs {
      get { return pollPeriodMs_; }
      set {
        pollPeriodMs_ = value;
      }
    }

    /// <summary>Field number for the "error_retry_ms" field.</summary>
    public const int ErrorRetryMsFieldNumber = 5;
    private int errorRetryMs_;
    /// <summary>
    /// If the polling script fails, how long to back off.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorRetryMs {
      get { return errorRetryMs_; }
      set {
        errorRetryMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchMakerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchMakerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (MasterRetryIntervalMs != other.MasterRetryIntervalMs) return false;
      if (MasterLockExpiryMs != other.MasterLockExpiryMs) return false;
      if (PollPeriodMs != other.PollPeriodMs) return false;
      if (ErrorRetryMs != other.ErrorRetryMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (MasterRetryIntervalMs != 0) hash ^= MasterRetryIntervalMs.GetHashCode();
      if (MasterLockExpiryMs != 0) hash ^= MasterLockExpiryMs.GetHashCode();
      if (PollPeriodMs != 0) hash ^= PollPeriodMs.GetHashCode();
      if (ErrorRetryMs != 0) hash ^= ErrorRetryMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (MasterRetryIntervalMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MasterRetryIntervalMs);
      }
      if (MasterLockExpiryMs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MasterLockExpiryMs);
      }
      if (PollPeriodMs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PollPeriodMs);
      }
      if (ErrorRetryMs != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ErrorRetryMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (MasterRetryIntervalMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MasterRetryIntervalMs);
      }
      if (MasterLockExpiryMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MasterLockExpiryMs);
      }
      if (PollPeriodMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PollPeriodMs);
      }
      if (ErrorRetryMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorRetryMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchMakerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.MasterRetryIntervalMs != 0) {
        MasterRetryIntervalMs = other.MasterRetryIntervalMs;
      }
      if (other.MasterLockExpiryMs != 0) {
        MasterLockExpiryMs = other.MasterLockExpiryMs;
      }
      if (other.PollPeriodMs != 0) {
        PollPeriodMs = other.PollPeriodMs;
      }
      if (other.ErrorRetryMs != 0) {
        ErrorRetryMs = other.ErrorRetryMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 16: {
            MasterRetryIntervalMs = input.ReadInt32();
            break;
          }
          case 24: {
            MasterLockExpiryMs = input.ReadInt32();
            break;
          }
          case 32: {
            PollPeriodMs = input.ReadInt32();
            break;
          }
          case 40: {
            ErrorRetryMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdminServerConfig : pb::IMessage<AdminServerConfig> {
    private static readonly pb::MessageParser<AdminServerConfig> _parser = new pb::MessageParser<AdminServerConfig>(() => new AdminServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminServerConfig(AdminServerConfig other) : this() {
      enableExportTrim_ = other.enableExportTrim_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminServerConfig Clone() {
      return new AdminServerConfig(this);
    }

    /// <summary>Field number for the "enable_export_trim" field.</summary>
    public const int EnableExportTrimFieldNumber = 1;
    private bool enableExportTrim_;
    /// <summary>
    /// Periodically look for history records in BQ and remove them from PostGres.
    /// Behavior is configured through ExportTrimConfig within AppConfig.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableExportTrim {
      get { return enableExportTrim_; }
      set {
        enableExportTrim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnableExportTrim != other.EnableExportTrim) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnableExportTrim != false) hash ^= EnableExportTrim.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnableExportTrim != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnableExportTrim);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnableExportTrim != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.EnableExportTrim != false) {
        EnableExportTrim = other.EnableExportTrim;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnableExportTrim = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Server run-time config file.  Tells this server how to launch
  /// and resolve service dependencies.  May contain some credentials.
  /// </summary>
  public sealed partial class ServerConfig : pb::IMessage<ServerConfig> {
    private static readonly pb::MessageParser<ServerConfig> _parser = new pb::MessageParser<ServerConfig>(() => new ServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig(ServerConfig other) : this() {
      DbConfig = other.dbConfig_ != null ? other.DbConfig.Clone() : null;
      RpcConfig = other.rpcConfig_ != null ? other.RpcConfig.Clone() : null;
      RedisConfig = other.redisConfig_ != null ? other.RedisConfig.Clone() : null;
      Mail = other.mail_ != null ? other.Mail.Clone() : null;
      PaymentCreds = other.paymentCreds_ != null ? other.PaymentCreds.Clone() : null;
      PortalClient = other.portalClient_ != null ? other.PortalClient.Clone() : null;
      MatchMaker = other.matchMaker_ != null ? other.MatchMaker.Clone() : null;
      MonitorConfig = other.monitorConfig_ != null ? other.MonitorConfig.Clone() : null;
      DesyncStorage = other.desyncStorage_ != null ? other.DesyncStorage.Clone() : null;
      CrashStorage = other.crashStorage_ != null ? other.CrashStorage.Clone() : null;
      stackwalkBinaryPath_ = other.stackwalkBinaryPath_;
      MatchLogStorage = other.matchLogStorage_ != null ? other.MatchLogStorage.Clone() : null;
      geoliteDatabaseFile_ = other.geoliteDatabaseFile_;
      Google = other.google_ != null ? other.Google.Clone() : null;
      bigqueryDataset_ = other.bigqueryDataset_;
      bigqueryPrefix_ = other.bigqueryPrefix_;
      goMaxProcs_ = other.goMaxProcs_;
      portalSimEnabled_ = other.portalSimEnabled_;
      adminServer_ = other.adminServer_;
      AdminServerConfig = other.adminServerConfig_ != null ? other.AdminServerConfig.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig Clone() {
      return new ServerConfig(this);
    }

    /// <summary>Field number for the "db_config" field.</summary>
    public const int DbConfigFieldNumber = 1;
    private global::Tbadmin.DatabaseConfig dbConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.DatabaseConfig DbConfig {
      get { return dbConfig_; }
      set {
        dbConfig_ = value;
      }
    }

    /// <summary>Field number for the "rpc_config" field.</summary>
    public const int RpcConfigFieldNumber = 2;
    private global::Tbadmin.RPCConfig rpcConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.RPCConfig RpcConfig {
      get { return rpcConfig_; }
      set {
        rpcConfig_ = value;
      }
    }

    /// <summary>Field number for the "redis_config" field.</summary>
    public const int RedisConfigFieldNumber = 3;
    private global::Tbadmin.RedisConfig redisConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.RedisConfig RedisConfig {
      get { return redisConfig_; }
      set {
        redisConfig_ = value;
      }
    }

    /// <summary>Field number for the "mail" field.</summary>
    public const int MailFieldNumber = 4;
    private global::Tbadmin.MailConfig mail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MailConfig Mail {
      get { return mail_; }
      set {
        mail_ = value;
      }
    }

    /// <summary>Field number for the "payment_creds" field.</summary>
    public const int PaymentCredsFieldNumber = 5;
    private global::Tbadmin.PaymentCreds paymentCreds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.PaymentCreds PaymentCreds {
      get { return paymentCreds_; }
      set {
        paymentCreds_ = value;
      }
    }

    /// <summary>Field number for the "portal_client" field.</summary>
    public const int PortalClientFieldNumber = 6;
    private global::Tbadmin.PortalClientConfig portalClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.PortalClientConfig PortalClient {
      get { return portalClient_; }
      set {
        portalClient_ = value;
      }
    }

    /// <summary>Field number for the "match_maker" field.</summary>
    public const int MatchMakerFieldNumber = 7;
    private global::Tbadmin.MatchMakerConfig matchMaker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MatchMakerConfig MatchMaker {
      get { return matchMaker_; }
      set {
        matchMaker_ = value;
      }
    }

    /// <summary>Field number for the "monitor_config" field.</summary>
    public const int MonitorConfigFieldNumber = 10;
    private global::Tbadmin.MonitorConfig monitorConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MonitorConfig MonitorConfig {
      get { return monitorConfig_; }
      set {
        monitorConfig_ = value;
      }
    }

    /// <summary>Field number for the "desync_storage" field.</summary>
    public const int DesyncStorageFieldNumber = 11;
    private global::Tbadmin.GcsStorageConfig desyncStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GcsStorageConfig DesyncStorage {
      get { return desyncStorage_; }
      set {
        desyncStorage_ = value;
      }
    }

    /// <summary>Field number for the "crash_storage" field.</summary>
    public const int CrashStorageFieldNumber = 12;
    private global::Tbadmin.GcsStorageConfig crashStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GcsStorageConfig CrashStorage {
      get { return crashStorage_; }
      set {
        crashStorage_ = value;
      }
    }

    /// <summary>Field number for the "stackwalk_binary_path" field.</summary>
    public const int StackwalkBinaryPathFieldNumber = 13;
    private string stackwalkBinaryPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackwalkBinaryPath {
      get { return stackwalkBinaryPath_; }
      set {
        stackwalkBinaryPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_log_storage" field.</summary>
    public const int MatchLogStorageFieldNumber = 14;
    private global::Tbadmin.GcsStorageConfig matchLogStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GcsStorageConfig MatchLogStorage {
      get { return matchLogStorage_; }
      set {
        matchLogStorage_ = value;
      }
    }

    /// <summary>Field number for the "geolite_database_file" field.</summary>
    public const int GeoliteDatabaseFileFieldNumber = 20;
    private string geoliteDatabaseFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeoliteDatabaseFile {
      get { return geoliteDatabaseFile_; }
      set {
        geoliteDatabaseFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 30;
    private global::Tbadmin.GApiConfig google_;
    /// <summary>
    /// How to reach and authenticate to all Google APIs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GApiConfig Google {
      get { return google_; }
      set {
        google_ = value;
      }
    }

    /// <summary>Field number for the "bigquery_dataset" field.</summary>
    public const int BigqueryDatasetFieldNumber = 31;
    private string bigqueryDataset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BigqueryDataset {
      get { return bigqueryDataset_; }
      set {
        bigqueryDataset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bigquery_prefix" field.</summary>
    public const int BigqueryPrefixFieldNumber = 32;
    private string bigqueryPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BigqueryPrefix {
      get { return bigqueryPrefix_; }
      set {
        bigqueryPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "go_max_procs" field.</summary>
    public const int GoMaxProcsFieldNumber = 40;
    private int goMaxProcs_;
    /// <summary>
    /// Number of cores Go runtime should use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoMaxProcs {
      get { return goMaxProcs_; }
      set {
        goMaxProcs_ = value;
      }
    }

    /// <summary>Field number for the "portal_sim_enabled" field.</summary>
    public const int PortalSimEnabledFieldNumber = 61;
    private bool portalSimEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PortalSimEnabled {
      get { return portalSimEnabled_; }
      set {
        portalSimEnabled_ = value;
      }
    }

    /// <summary>Field number for the "admin_server" field.</summary>
    public const int AdminServerFieldNumber = 70;
    private bool adminServer_;
    /// <summary>
    /// Enable admin RPC services.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdminServer {
      get { return adminServer_; }
      set {
        adminServer_ = value;
      }
    }

    /// <summary>Field number for the "admin_server_config" field.</summary>
    public const int AdminServerConfigFieldNumber = 71;
    private global::Tbadmin.AdminServerConfig adminServerConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AdminServerConfig AdminServerConfig {
      get { return adminServerConfig_; }
      set {
        adminServerConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DbConfig, other.DbConfig)) return false;
      if (!object.Equals(RpcConfig, other.RpcConfig)) return false;
      if (!object.Equals(RedisConfig, other.RedisConfig)) return false;
      if (!object.Equals(Mail, other.Mail)) return false;
      if (!object.Equals(PaymentCreds, other.PaymentCreds)) return false;
      if (!object.Equals(PortalClient, other.PortalClient)) return false;
      if (!object.Equals(MatchMaker, other.MatchMaker)) return false;
      if (!object.Equals(MonitorConfig, other.MonitorConfig)) return false;
      if (!object.Equals(DesyncStorage, other.DesyncStorage)) return false;
      if (!object.Equals(CrashStorage, other.CrashStorage)) return false;
      if (StackwalkBinaryPath != other.StackwalkBinaryPath) return false;
      if (!object.Equals(MatchLogStorage, other.MatchLogStorage)) return false;
      if (GeoliteDatabaseFile != other.GeoliteDatabaseFile) return false;
      if (!object.Equals(Google, other.Google)) return false;
      if (BigqueryDataset != other.BigqueryDataset) return false;
      if (BigqueryPrefix != other.BigqueryPrefix) return false;
      if (GoMaxProcs != other.GoMaxProcs) return false;
      if (PortalSimEnabled != other.PortalSimEnabled) return false;
      if (AdminServer != other.AdminServer) return false;
      if (!object.Equals(AdminServerConfig, other.AdminServerConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dbConfig_ != null) hash ^= DbConfig.GetHashCode();
      if (rpcConfig_ != null) hash ^= RpcConfig.GetHashCode();
      if (redisConfig_ != null) hash ^= RedisConfig.GetHashCode();
      if (mail_ != null) hash ^= Mail.GetHashCode();
      if (paymentCreds_ != null) hash ^= PaymentCreds.GetHashCode();
      if (portalClient_ != null) hash ^= PortalClient.GetHashCode();
      if (matchMaker_ != null) hash ^= MatchMaker.GetHashCode();
      if (monitorConfig_ != null) hash ^= MonitorConfig.GetHashCode();
      if (desyncStorage_ != null) hash ^= DesyncStorage.GetHashCode();
      if (crashStorage_ != null) hash ^= CrashStorage.GetHashCode();
      if (StackwalkBinaryPath.Length != 0) hash ^= StackwalkBinaryPath.GetHashCode();
      if (matchLogStorage_ != null) hash ^= MatchLogStorage.GetHashCode();
      if (GeoliteDatabaseFile.Length != 0) hash ^= GeoliteDatabaseFile.GetHashCode();
      if (google_ != null) hash ^= Google.GetHashCode();
      if (BigqueryDataset.Length != 0) hash ^= BigqueryDataset.GetHashCode();
      if (BigqueryPrefix.Length != 0) hash ^= BigqueryPrefix.GetHashCode();
      if (GoMaxProcs != 0) hash ^= GoMaxProcs.GetHashCode();
      if (PortalSimEnabled != false) hash ^= PortalSimEnabled.GetHashCode();
      if (AdminServer != false) hash ^= AdminServer.GetHashCode();
      if (adminServerConfig_ != null) hash ^= AdminServerConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dbConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DbConfig);
      }
      if (rpcConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RpcConfig);
      }
      if (redisConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RedisConfig);
      }
      if (mail_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mail);
      }
      if (paymentCreds_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PaymentCreds);
      }
      if (portalClient_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PortalClient);
      }
      if (matchMaker_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MatchMaker);
      }
      if (monitorConfig_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MonitorConfig);
      }
      if (desyncStorage_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DesyncStorage);
      }
      if (crashStorage_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CrashStorage);
      }
      if (StackwalkBinaryPath.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StackwalkBinaryPath);
      }
      if (matchLogStorage_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MatchLogStorage);
      }
      if (GeoliteDatabaseFile.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(GeoliteDatabaseFile);
      }
      if (google_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Google);
      }
      if (BigqueryDataset.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(BigqueryDataset);
      }
      if (BigqueryPrefix.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(BigqueryPrefix);
      }
      if (GoMaxProcs != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(GoMaxProcs);
      }
      if (PortalSimEnabled != false) {
        output.WriteRawTag(232, 3);
        output.WriteBool(PortalSimEnabled);
      }
      if (AdminServer != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(AdminServer);
      }
      if (adminServerConfig_ != null) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(AdminServerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dbConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbConfig);
      }
      if (rpcConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RpcConfig);
      }
      if (redisConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedisConfig);
      }
      if (mail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mail);
      }
      if (paymentCreds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentCreds);
      }
      if (portalClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortalClient);
      }
      if (matchMaker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchMaker);
      }
      if (monitorConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonitorConfig);
      }
      if (desyncStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesyncStorage);
      }
      if (crashStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrashStorage);
      }
      if (StackwalkBinaryPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackwalkBinaryPath);
      }
      if (matchLogStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchLogStorage);
      }
      if (GeoliteDatabaseFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GeoliteDatabaseFile);
      }
      if (google_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Google);
      }
      if (BigqueryDataset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BigqueryDataset);
      }
      if (BigqueryPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BigqueryPrefix);
      }
      if (GoMaxProcs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GoMaxProcs);
      }
      if (PortalSimEnabled != false) {
        size += 2 + 1;
      }
      if (AdminServer != false) {
        size += 2 + 1;
      }
      if (adminServerConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AdminServerConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.dbConfig_ != null) {
        if (dbConfig_ == null) {
          dbConfig_ = new global::Tbadmin.DatabaseConfig();
        }
        DbConfig.MergeFrom(other.DbConfig);
      }
      if (other.rpcConfig_ != null) {
        if (rpcConfig_ == null) {
          rpcConfig_ = new global::Tbadmin.RPCConfig();
        }
        RpcConfig.MergeFrom(other.RpcConfig);
      }
      if (other.redisConfig_ != null) {
        if (redisConfig_ == null) {
          redisConfig_ = new global::Tbadmin.RedisConfig();
        }
        RedisConfig.MergeFrom(other.RedisConfig);
      }
      if (other.mail_ != null) {
        if (mail_ == null) {
          mail_ = new global::Tbadmin.MailConfig();
        }
        Mail.MergeFrom(other.Mail);
      }
      if (other.paymentCreds_ != null) {
        if (paymentCreds_ == null) {
          paymentCreds_ = new global::Tbadmin.PaymentCreds();
        }
        PaymentCreds.MergeFrom(other.PaymentCreds);
      }
      if (other.portalClient_ != null) {
        if (portalClient_ == null) {
          portalClient_ = new global::Tbadmin.PortalClientConfig();
        }
        PortalClient.MergeFrom(other.PortalClient);
      }
      if (other.matchMaker_ != null) {
        if (matchMaker_ == null) {
          matchMaker_ = new global::Tbadmin.MatchMakerConfig();
        }
        MatchMaker.MergeFrom(other.MatchMaker);
      }
      if (other.monitorConfig_ != null) {
        if (monitorConfig_ == null) {
          monitorConfig_ = new global::Tbadmin.MonitorConfig();
        }
        MonitorConfig.MergeFrom(other.MonitorConfig);
      }
      if (other.desyncStorage_ != null) {
        if (desyncStorage_ == null) {
          desyncStorage_ = new global::Tbadmin.GcsStorageConfig();
        }
        DesyncStorage.MergeFrom(other.DesyncStorage);
      }
      if (other.crashStorage_ != null) {
        if (crashStorage_ == null) {
          crashStorage_ = new global::Tbadmin.GcsStorageConfig();
        }
        CrashStorage.MergeFrom(other.CrashStorage);
      }
      if (other.StackwalkBinaryPath.Length != 0) {
        StackwalkBinaryPath = other.StackwalkBinaryPath;
      }
      if (other.matchLogStorage_ != null) {
        if (matchLogStorage_ == null) {
          matchLogStorage_ = new global::Tbadmin.GcsStorageConfig();
        }
        MatchLogStorage.MergeFrom(other.MatchLogStorage);
      }
      if (other.GeoliteDatabaseFile.Length != 0) {
        GeoliteDatabaseFile = other.GeoliteDatabaseFile;
      }
      if (other.google_ != null) {
        if (google_ == null) {
          google_ = new global::Tbadmin.GApiConfig();
        }
        Google.MergeFrom(other.Google);
      }
      if (other.BigqueryDataset.Length != 0) {
        BigqueryDataset = other.BigqueryDataset;
      }
      if (other.BigqueryPrefix.Length != 0) {
        BigqueryPrefix = other.BigqueryPrefix;
      }
      if (other.GoMaxProcs != 0) {
        GoMaxProcs = other.GoMaxProcs;
      }
      if (other.PortalSimEnabled != false) {
        PortalSimEnabled = other.PortalSimEnabled;
      }
      if (other.AdminServer != false) {
        AdminServer = other.AdminServer;
      }
      if (other.adminServerConfig_ != null) {
        if (adminServerConfig_ == null) {
          adminServerConfig_ = new global::Tbadmin.AdminServerConfig();
        }
        AdminServerConfig.MergeFrom(other.AdminServerConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dbConfig_ == null) {
              dbConfig_ = new global::Tbadmin.DatabaseConfig();
            }
            input.ReadMessage(dbConfig_);
            break;
          }
          case 18: {
            if (rpcConfig_ == null) {
              rpcConfig_ = new global::Tbadmin.RPCConfig();
            }
            input.ReadMessage(rpcConfig_);
            break;
          }
          case 26: {
            if (redisConfig_ == null) {
              redisConfig_ = new global::Tbadmin.RedisConfig();
            }
            input.ReadMessage(redisConfig_);
            break;
          }
          case 34: {
            if (mail_ == null) {
              mail_ = new global::Tbadmin.MailConfig();
            }
            input.ReadMessage(mail_);
            break;
          }
          case 42: {
            if (paymentCreds_ == null) {
              paymentCreds_ = new global::Tbadmin.PaymentCreds();
            }
            input.ReadMessage(paymentCreds_);
            break;
          }
          case 50: {
            if (portalClient_ == null) {
              portalClient_ = new global::Tbadmin.PortalClientConfig();
            }
            input.ReadMessage(portalClient_);
            break;
          }
          case 58: {
            if (matchMaker_ == null) {
              matchMaker_ = new global::Tbadmin.MatchMakerConfig();
            }
            input.ReadMessage(matchMaker_);
            break;
          }
          case 82: {
            if (monitorConfig_ == null) {
              monitorConfig_ = new global::Tbadmin.MonitorConfig();
            }
            input.ReadMessage(monitorConfig_);
            break;
          }
          case 90: {
            if (desyncStorage_ == null) {
              desyncStorage_ = new global::Tbadmin.GcsStorageConfig();
            }
            input.ReadMessage(desyncStorage_);
            break;
          }
          case 98: {
            if (crashStorage_ == null) {
              crashStorage_ = new global::Tbadmin.GcsStorageConfig();
            }
            input.ReadMessage(crashStorage_);
            break;
          }
          case 106: {
            StackwalkBinaryPath = input.ReadString();
            break;
          }
          case 114: {
            if (matchLogStorage_ == null) {
              matchLogStorage_ = new global::Tbadmin.GcsStorageConfig();
            }
            input.ReadMessage(matchLogStorage_);
            break;
          }
          case 162: {
            GeoliteDatabaseFile = input.ReadString();
            break;
          }
          case 242: {
            if (google_ == null) {
              google_ = new global::Tbadmin.GApiConfig();
            }
            input.ReadMessage(google_);
            break;
          }
          case 250: {
            BigqueryDataset = input.ReadString();
            break;
          }
          case 258: {
            BigqueryPrefix = input.ReadString();
            break;
          }
          case 320: {
            GoMaxProcs = input.ReadInt32();
            break;
          }
          case 488: {
            PortalSimEnabled = input.ReadBool();
            break;
          }
          case 560: {
            AdminServer = input.ReadBool();
            break;
          }
          case 570: {
            if (adminServerConfig_ == null) {
              adminServerConfig_ = new global::Tbadmin.AdminServerConfig();
            }
            input.ReadMessage(adminServerConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Rules for handling account RPCs.
  /// </summary>
  public sealed partial class AccountConfig : pb::IMessage<AccountConfig> {
    private static readonly pb::MessageParser<AccountConfig> _parser = new pb::MessageParser<AccountConfig>(() => new AccountConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountConfig(AccountConfig other) : this() {
      minPasswordLength_ = other.minPasswordLength_;
      minPasswordClasses_ = other.minPasswordClasses_;
      registerAccess_ = other.registerAccess_.Clone();
      emailValidateConfirmSecs_ = other.emailValidateConfirmSecs_;
      emailValidateUrlPrefix_ = other.emailValidateUrlPrefix_;
      validateNonceLength_ = other.validateNonceLength_;
      passwordResetExpireSecs_ = other.passwordResetExpireSecs_;
      passwordResetCodeLength_ = other.passwordResetCodeLength_;
      maxUserSearchResult_ = other.maxUserSearchResult_;
      lockoutDurationMins_ = other.lockoutDurationMins_;
      lockoutThreshold_ = other.lockoutThreshold_;
      resetLockoutCounterAfterMins_ = other.resetLockoutCounterAfterMins_;
      sessionTicketExpireSecs_ = other.sessionTicketExpireSecs_;
      requireRegistrationKey_ = other.requireRegistrationKey_;
      disallowHandleRegexp_ = other.disallowHandleRegexp_.Clone();
      nukeHandlePrefix_ = other.nukeHandlePrefix_;
      nukeRetries_ = other.nukeRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountConfig Clone() {
      return new AccountConfig(this);
    }

    /// <summary>Field number for the "min_password_length" field.</summary>
    public const int MinPasswordLengthFieldNumber = 1;
    private int minPasswordLength_;
    /// <summary>
    /// Minimum length when setting a password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinPasswordLength {
      get { return minPasswordLength_; }
      set {
        minPasswordLength_ = value;
      }
    }

    /// <summary>Field number for the "min_password_classes" field.</summary>
    public const int MinPasswordClassesFieldNumber = 2;
    private int minPasswordClasses_;
    /// <summary>
    /// Minimum number of unique character classes for a password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinPasswordClasses {
      get { return minPasswordClasses_; }
      set {
        minPasswordClasses_ = value;
      }
    }

    /// <summary>Field number for the "register_access" field.</summary>
    public const int RegisterAccessFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tbrpc.Access> _repeated_registerAccess_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Tbrpc.Access) x);
    private readonly pbc::RepeatedField<global::Tbrpc.Access> registerAccess_ = new pbc::RepeatedField<global::Tbrpc.Access>();
    /// <summary>
    /// Access roles granted to publicly registered accounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbrpc.Access> RegisterAccess {
      get { return registerAccess_; }
    }

    /// <summary>Field number for the "email_validate_confirm_secs" field.</summary>
    public const int EmailValidateConfirmSecsFieldNumber = 4;
    private int emailValidateConfirmSecs_;
    /// <summary>
    /// How long before e-mail validation links expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmailValidateConfirmSecs {
      get { return emailValidateConfirmSecs_; }
      set {
        emailValidateConfirmSecs_ = value;
      }
    }

    /// <summary>Field number for the "email_validate_url_prefix" field.</summary>
    public const int EmailValidateUrlPrefixFieldNumber = 5;
    private string emailValidateUrlPrefix_ = "";
    /// <summary>
    /// Prepended to email validation links.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmailValidateUrlPrefix {
      get { return emailValidateUrlPrefix_; }
      set {
        emailValidateUrlPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validate_nonce_length" field.</summary>
    public const int ValidateNonceLengthFieldNumber = 6;
    private int validateNonceLength_;
    /// <summary>
    /// Number of bytes in the generated nonce hex string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValidateNonceLength {
      get { return validateNonceLength_; }
      set {
        validateNonceLength_ = value;
      }
    }

    /// <summary>Field number for the "password_reset_expire_secs" field.</summary>
    public const int PasswordResetExpireSecsFieldNumber = 7;
    private int passwordResetExpireSecs_;
    /// <summary>
    /// How long a password reset code is valid for in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PasswordResetExpireSecs {
      get { return passwordResetExpireSecs_; }
      set {
        passwordResetExpireSecs_ = value;
      }
    }

    /// <summary>Field number for the "password_reset_code_length" field.</summary>
    public const int PasswordResetCodeLengthFieldNumber = 8;
    private int passwordResetCodeLength_;
    /// <summary>
    /// Number of letters and numbers in the reset code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PasswordResetCodeLength {
      get { return passwordResetCodeLength_; }
      set {
        passwordResetCodeLength_ = value;
      }
    }

    /// <summary>Field number for the "max_user_search_result" field.</summary>
    public const int MaxUserSearchResultFieldNumber = 10;
    private int maxUserSearchResult_;
    /// <summary>
    /// Max number of users to return from SearchUsers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUserSearchResult {
      get { return maxUserSearchResult_; }
      set {
        maxUserSearchResult_ = value;
      }
    }

    /// <summary>Field number for the "lockout_duration_mins" field.</summary>
    public const int LockoutDurationMinsFieldNumber = 20;
    private int lockoutDurationMins_;
    /// <summary>
    /// Minutes to keep an account locked out after exceeding lockout_threshold attempts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockoutDurationMins {
      get { return lockoutDurationMins_; }
      set {
        lockoutDurationMins_ = value;
      }
    }

    /// <summary>Field number for the "lockout_threshold" field.</summary>
    public const int LockoutThresholdFieldNumber = 21;
    private int lockoutThreshold_;
    /// <summary>
    /// Number of failed login attempts before account is locked.
    /// Set to 0 to disable lockout.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockoutThreshold {
      get { return lockoutThreshold_; }
      set {
        lockoutThreshold_ = value;
      }
    }

    /// <summary>Field number for the "reset_lockout_counter_after_mins" field.</summary>
    public const int ResetLockoutCounterAfterMinsFieldNumber = 22;
    private int resetLockoutCounterAfterMins_;
    /// <summary>
    /// Number of minutes after the last login failure after which the counter is reset to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetLockoutCounterAfterMins {
      get { return resetLockoutCounterAfterMins_; }
      set {
        resetLockoutCounterAfterMins_ = value;
      }
    }

    /// <summary>Field number for the "session_ticket_expire_secs" field.</summary>
    public const int SessionTicketExpireSecsFieldNumber = 30;
    private int sessionTicketExpireSecs_;
    /// <summary>
    /// How long do session tickets last (SessionService.RequestSessionTicket)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionTicketExpireSecs {
      get { return sessionTicketExpireSecs_; }
      set {
        sessionTicketExpireSecs_ = value;
      }
    }

    /// <summary>Field number for the "require_registration_key" field.</summary>
    public const int RequireRegistrationKeyFieldNumber = 40;
    private bool requireRegistrationKey_;
    /// <summary>
    /// Require a registration key?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireRegistrationKey {
      get { return requireRegistrationKey_; }
      set {
        requireRegistrationKey_ = value;
      }
    }

    /// <summary>Field number for the "disallow_handle_regexp" field.</summary>
    public const int DisallowHandleRegexpFieldNumber = 41;
    private static readonly pb::FieldCodec<string> _repeated_disallowHandleRegexp_codec
        = pb::FieldCodec.ForString(330);
    private readonly pbc::RepeatedField<string> disallowHandleRegexp_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Deny any handle that full-matches one of these expressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowHandleRegexp {
      get { return disallowHandleRegexp_; }
    }

    /// <summary>Field number for the "nuke_handle_prefix" field.</summary>
    public const int NukeHandlePrefixFieldNumber = 42;
    private string nukeHandlePrefix_ = "";
    /// <summary>
    /// Prefix to use when generating a handle to replace an offensive/disallowed one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NukeHandlePrefix {
      get { return nukeHandlePrefix_; }
      set {
        nukeHandlePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nuke_retries" field.</summary>
    public const int NukeRetriesFieldNumber = 43;
    private int nukeRetries_;
    /// <summary>
    /// Pre-existing nuked handles to skip over before giving up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NukeRetries {
      get { return nukeRetries_; }
      set {
        nukeRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinPasswordLength != other.MinPasswordLength) return false;
      if (MinPasswordClasses != other.MinPasswordClasses) return false;
      if(!registerAccess_.Equals(other.registerAccess_)) return false;
      if (EmailValidateConfirmSecs != other.EmailValidateConfirmSecs) return false;
      if (EmailValidateUrlPrefix != other.EmailValidateUrlPrefix) return false;
      if (ValidateNonceLength != other.ValidateNonceLength) return false;
      if (PasswordResetExpireSecs != other.PasswordResetExpireSecs) return false;
      if (PasswordResetCodeLength != other.PasswordResetCodeLength) return false;
      if (MaxUserSearchResult != other.MaxUserSearchResult) return false;
      if (LockoutDurationMins != other.LockoutDurationMins) return false;
      if (LockoutThreshold != other.LockoutThreshold) return false;
      if (ResetLockoutCounterAfterMins != other.ResetLockoutCounterAfterMins) return false;
      if (SessionTicketExpireSecs != other.SessionTicketExpireSecs) return false;
      if (RequireRegistrationKey != other.RequireRegistrationKey) return false;
      if(!disallowHandleRegexp_.Equals(other.disallowHandleRegexp_)) return false;
      if (NukeHandlePrefix != other.NukeHandlePrefix) return false;
      if (NukeRetries != other.NukeRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinPasswordLength != 0) hash ^= MinPasswordLength.GetHashCode();
      if (MinPasswordClasses != 0) hash ^= MinPasswordClasses.GetHashCode();
      hash ^= registerAccess_.GetHashCode();
      if (EmailValidateConfirmSecs != 0) hash ^= EmailValidateConfirmSecs.GetHashCode();
      if (EmailValidateUrlPrefix.Length != 0) hash ^= EmailValidateUrlPrefix.GetHashCode();
      if (ValidateNonceLength != 0) hash ^= ValidateNonceLength.GetHashCode();
      if (PasswordResetExpireSecs != 0) hash ^= PasswordResetExpireSecs.GetHashCode();
      if (PasswordResetCodeLength != 0) hash ^= PasswordResetCodeLength.GetHashCode();
      if (MaxUserSearchResult != 0) hash ^= MaxUserSearchResult.GetHashCode();
      if (LockoutDurationMins != 0) hash ^= LockoutDurationMins.GetHashCode();
      if (LockoutThreshold != 0) hash ^= LockoutThreshold.GetHashCode();
      if (ResetLockoutCounterAfterMins != 0) hash ^= ResetLockoutCounterAfterMins.GetHashCode();
      if (SessionTicketExpireSecs != 0) hash ^= SessionTicketExpireSecs.GetHashCode();
      if (RequireRegistrationKey != false) hash ^= RequireRegistrationKey.GetHashCode();
      hash ^= disallowHandleRegexp_.GetHashCode();
      if (NukeHandlePrefix.Length != 0) hash ^= NukeHandlePrefix.GetHashCode();
      if (NukeRetries != 0) hash ^= NukeRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinPasswordLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinPasswordLength);
      }
      if (MinPasswordClasses != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinPasswordClasses);
      }
      registerAccess_.WriteTo(output, _repeated_registerAccess_codec);
      if (EmailValidateConfirmSecs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EmailValidateConfirmSecs);
      }
      if (EmailValidateUrlPrefix.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EmailValidateUrlPrefix);
      }
      if (ValidateNonceLength != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ValidateNonceLength);
      }
      if (PasswordResetExpireSecs != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PasswordResetExpireSecs);
      }
      if (PasswordResetCodeLength != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PasswordResetCodeLength);
      }
      if (MaxUserSearchResult != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxUserSearchResult);
      }
      if (LockoutDurationMins != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LockoutDurationMins);
      }
      if (LockoutThreshold != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(LockoutThreshold);
      }
      if (ResetLockoutCounterAfterMins != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ResetLockoutCounterAfterMins);
      }
      if (SessionTicketExpireSecs != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(SessionTicketExpireSecs);
      }
      if (RequireRegistrationKey != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(RequireRegistrationKey);
      }
      disallowHandleRegexp_.WriteTo(output, _repeated_disallowHandleRegexp_codec);
      if (NukeHandlePrefix.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(NukeHandlePrefix);
      }
      if (NukeRetries != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(NukeRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinPasswordLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinPasswordLength);
      }
      if (MinPasswordClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinPasswordClasses);
      }
      size += registerAccess_.CalculateSize(_repeated_registerAccess_codec);
      if (EmailValidateConfirmSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmailValidateConfirmSecs);
      }
      if (EmailValidateUrlPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailValidateUrlPrefix);
      }
      if (ValidateNonceLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValidateNonceLength);
      }
      if (PasswordResetExpireSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PasswordResetExpireSecs);
      }
      if (PasswordResetCodeLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PasswordResetCodeLength);
      }
      if (MaxUserSearchResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserSearchResult);
      }
      if (LockoutDurationMins != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LockoutDurationMins);
      }
      if (LockoutThreshold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LockoutThreshold);
      }
      if (ResetLockoutCounterAfterMins != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ResetLockoutCounterAfterMins);
      }
      if (SessionTicketExpireSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionTicketExpireSecs);
      }
      if (RequireRegistrationKey != false) {
        size += 2 + 1;
      }
      size += disallowHandleRegexp_.CalculateSize(_repeated_disallowHandleRegexp_codec);
      if (NukeHandlePrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NukeHandlePrefix);
      }
      if (NukeRetries != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NukeRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountConfig other) {
      if (other == null) {
        return;
      }
      if (other.MinPasswordLength != 0) {
        MinPasswordLength = other.MinPasswordLength;
      }
      if (other.MinPasswordClasses != 0) {
        MinPasswordClasses = other.MinPasswordClasses;
      }
      registerAccess_.Add(other.registerAccess_);
      if (other.EmailValidateConfirmSecs != 0) {
        EmailValidateConfirmSecs = other.EmailValidateConfirmSecs;
      }
      if (other.EmailValidateUrlPrefix.Length != 0) {
        EmailValidateUrlPrefix = other.EmailValidateUrlPrefix;
      }
      if (other.ValidateNonceLength != 0) {
        ValidateNonceLength = other.ValidateNonceLength;
      }
      if (other.PasswordResetExpireSecs != 0) {
        PasswordResetExpireSecs = other.PasswordResetExpireSecs;
      }
      if (other.PasswordResetCodeLength != 0) {
        PasswordResetCodeLength = other.PasswordResetCodeLength;
      }
      if (other.MaxUserSearchResult != 0) {
        MaxUserSearchResult = other.MaxUserSearchResult;
      }
      if (other.LockoutDurationMins != 0) {
        LockoutDurationMins = other.LockoutDurationMins;
      }
      if (other.LockoutThreshold != 0) {
        LockoutThreshold = other.LockoutThreshold;
      }
      if (other.ResetLockoutCounterAfterMins != 0) {
        ResetLockoutCounterAfterMins = other.ResetLockoutCounterAfterMins;
      }
      if (other.SessionTicketExpireSecs != 0) {
        SessionTicketExpireSecs = other.SessionTicketExpireSecs;
      }
      if (other.RequireRegistrationKey != false) {
        RequireRegistrationKey = other.RequireRegistrationKey;
      }
      disallowHandleRegexp_.Add(other.disallowHandleRegexp_);
      if (other.NukeHandlePrefix.Length != 0) {
        NukeHandlePrefix = other.NukeHandlePrefix;
      }
      if (other.NukeRetries != 0) {
        NukeRetries = other.NukeRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinPasswordLength = input.ReadInt32();
            break;
          }
          case 16: {
            MinPasswordClasses = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            registerAccess_.AddEntriesFrom(input, _repeated_registerAccess_codec);
            break;
          }
          case 32: {
            EmailValidateConfirmSecs = input.ReadInt32();
            break;
          }
          case 42: {
            EmailValidateUrlPrefix = input.ReadString();
            break;
          }
          case 48: {
            ValidateNonceLength = input.ReadInt32();
            break;
          }
          case 56: {
            PasswordResetExpireSecs = input.ReadInt32();
            break;
          }
          case 64: {
            PasswordResetCodeLength = input.ReadInt32();
            break;
          }
          case 80: {
            MaxUserSearchResult = input.ReadInt32();
            break;
          }
          case 160: {
            LockoutDurationMins = input.ReadInt32();
            break;
          }
          case 168: {
            LockoutThreshold = input.ReadInt32();
            break;
          }
          case 176: {
            ResetLockoutCounterAfterMins = input.ReadInt32();
            break;
          }
          case 240: {
            SessionTicketExpireSecs = input.ReadInt32();
            break;
          }
          case 320: {
            RequireRegistrationKey = input.ReadBool();
            break;
          }
          case 330: {
            disallowHandleRegexp_.AddEntriesFrom(input, _repeated_disallowHandleRegexp_codec);
            break;
          }
          case 338: {
            NukeHandlePrefix = input.ReadString();
            break;
          }
          case 344: {
            NukeRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// How an experience counter maps to increasing "levels".
  /// Level 1 starts at 0 XP.
  /// </summary>
  public sealed partial class LevelProgression : pb::IMessage<LevelProgression> {
    private static readonly pb::MessageParser<LevelProgression> _parser = new pb::MessageParser<LevelProgression>(() => new LevelProgression());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelProgression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelProgression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelProgression(LevelProgression other) : this() {
      baseline_ = other.baseline_;
      coefficient_ = other.coefficient_;
      matchXp_ = other.matchXp_;
      winBonusXp_ = other.winBonusXp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelProgression Clone() {
      return new LevelProgression(this);
    }

    /// <summary>Field number for the "baseline" field.</summary>
    public const int BaselineFieldNumber = 1;
    private int baseline_;
    /// <summary>
    /// How much XP is required to reach level 2 from level 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Baseline {
      get { return baseline_; }
      set {
        baseline_ = value;
      }
    }

    /// <summary>Field number for the "coefficient" field.</summary>
    public const int CoefficientFieldNumber = 2;
    private double coefficient_;
    /// <summary>
    /// A level takes this much more XP to reach than the previous level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Coefficient {
      get { return coefficient_; }
      set {
        coefficient_ = value;
      }
    }

    /// <summary>Field number for the "match_xp" field.</summary>
    public const int MatchXpFieldNumber = 3;
    private int matchXp_;
    /// <summary>
    /// XP awarded for playing a match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchXp {
      get { return matchXp_; }
      set {
        matchXp_ = value;
      }
    }

    /// <summary>Field number for the "win_bonus_xp" field.</summary>
    public const int WinBonusXpFieldNumber = 4;
    private int winBonusXp_;
    /// <summary>
    /// XP awarded for winning a match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinBonusXp {
      get { return winBonusXp_; }
      set {
        winBonusXp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelProgression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelProgression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Baseline != other.Baseline) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Coefficient, other.Coefficient)) return false;
      if (MatchXp != other.MatchXp) return false;
      if (WinBonusXp != other.WinBonusXp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Baseline != 0) hash ^= Baseline.GetHashCode();
      if (Coefficient != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Coefficient);
      if (MatchXp != 0) hash ^= MatchXp.GetHashCode();
      if (WinBonusXp != 0) hash ^= WinBonusXp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Baseline != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Baseline);
      }
      if (Coefficient != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Coefficient);
      }
      if (MatchXp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MatchXp);
      }
      if (WinBonusXp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WinBonusXp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Baseline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Baseline);
      }
      if (Coefficient != 0D) {
        size += 1 + 8;
      }
      if (MatchXp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchXp);
      }
      if (WinBonusXp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinBonusXp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelProgression other) {
      if (other == null) {
        return;
      }
      if (other.Baseline != 0) {
        Baseline = other.Baseline;
      }
      if (other.Coefficient != 0D) {
        Coefficient = other.Coefficient;
      }
      if (other.MatchXp != 0) {
        MatchXp = other.MatchXp;
      }
      if (other.WinBonusXp != 0) {
        WinBonusXp = other.WinBonusXp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Baseline = input.ReadInt32();
            break;
          }
          case 17: {
            Coefficient = input.ReadDouble();
            break;
          }
          case 24: {
            MatchXp = input.ReadInt32();
            break;
          }
          case 32: {
            WinBonusXp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EchelonRules : pb::IMessage<EchelonRules> {
    private static readonly pb::MessageParser<EchelonRules> _parser = new pb::MessageParser<EchelonRules>(() => new EchelonRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EchelonRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchelonRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchelonRules(EchelonRules other) : this() {
      tierPoints_ = other.tierPoints_.Clone();
      ignoreLoss_ = other.ignoreLoss_;
      final_ = other.final_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchelonRules Clone() {
      return new EchelonRules(this);
    }

    /// <summary>Field number for the "tier_points" field.</summary>
    public const int TierPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_tierPoints_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> tierPoints_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Points required to advance for each tier in this echelon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TierPoints {
      get { return tierPoints_; }
    }

    /// <summary>Field number for the "ignore_loss" field.</summary>
    public const int IgnoreLossFieldNumber = 2;
    private bool ignoreLoss_;
    /// <summary>
    /// If true, don't apply losses while in this echelon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreLoss {
      get { return ignoreLoss_; }
      set {
        ignoreLoss_ = value;
      }
    }

    /// <summary>Field number for the "final" field.</summary>
    public const int FinalFieldNumber = 3;
    private bool final_;
    /// <summary>
    /// If true, echelon has no tiers or points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Final {
      get { return final_; }
      set {
        final_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EchelonRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EchelonRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tierPoints_.Equals(other.tierPoints_)) return false;
      if (IgnoreLoss != other.IgnoreLoss) return false;
      if (Final != other.Final) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tierPoints_.GetHashCode();
      if (IgnoreLoss != false) hash ^= IgnoreLoss.GetHashCode();
      if (Final != false) hash ^= Final.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tierPoints_.WriteTo(output, _repeated_tierPoints_codec);
      if (IgnoreLoss != false) {
        output.WriteRawTag(16);
        output.WriteBool(IgnoreLoss);
      }
      if (Final != false) {
        output.WriteRawTag(24);
        output.WriteBool(Final);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tierPoints_.CalculateSize(_repeated_tierPoints_codec);
      if (IgnoreLoss != false) {
        size += 1 + 1;
      }
      if (Final != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EchelonRules other) {
      if (other == null) {
        return;
      }
      tierPoints_.Add(other.tierPoints_);
      if (other.IgnoreLoss != false) {
        IgnoreLoss = other.IgnoreLoss;
      }
      if (other.Final != false) {
        Final = other.Final;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            tierPoints_.AddEntriesFrom(input, _repeated_tierPoints_codec);
            break;
          }
          case 16: {
            IgnoreLoss = input.ReadBool();
            break;
          }
          case 24: {
            Final = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EchelonConfig : pb::IMessage<EchelonConfig> {
    private static readonly pb::MessageParser<EchelonConfig> _parser = new pb::MessageParser<EchelonConfig>(() => new EchelonConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EchelonConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchelonConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchelonConfig(EchelonConfig other) : this() {
      echelon_ = other.echelon_.Clone();
      winStreakBonusMinimum_ = other.winStreakBonusMinimum_;
      winStreakBonusPoints_ = other.winStreakBonusPoints_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchelonConfig Clone() {
      return new EchelonConfig(this);
    }

    /// <summary>Field number for the "echelon" field.</summary>
    public const int EchelonFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.EchelonRules> _repeated_echelon_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.EchelonRules.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.EchelonRules> echelon_ = new pbc::RepeatedField<global::Tbadmin.EchelonRules>();
    /// <summary>
    /// Define all ranking echelons in progression order (0=Carbon .. N-1=Legend)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.EchelonRules> Echelon {
      get { return echelon_; }
    }

    /// <summary>Field number for the "win_streak_bonus_minimum" field.</summary>
    public const int WinStreakBonusMinimumFieldNumber = 10;
    private int winStreakBonusMinimum_;
    /// <summary>
    /// Number of wins in a streak for bonus to apply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinStreakBonusMinimum {
      get { return winStreakBonusMinimum_; }
      set {
        winStreakBonusMinimum_ = value;
      }
    }

    /// <summary>Field number for the "win_streak_bonus_points" field.</summary>
    public const int WinStreakBonusPointsFieldNumber = 11;
    private int winStreakBonusPoints_;
    /// <summary>
    /// Points to award for a win streak bonus.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinStreakBonusPoints {
      get { return winStreakBonusPoints_; }
      set {
        winStreakBonusPoints_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EchelonConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EchelonConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!echelon_.Equals(other.echelon_)) return false;
      if (WinStreakBonusMinimum != other.WinStreakBonusMinimum) return false;
      if (WinStreakBonusPoints != other.WinStreakBonusPoints) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= echelon_.GetHashCode();
      if (WinStreakBonusMinimum != 0) hash ^= WinStreakBonusMinimum.GetHashCode();
      if (WinStreakBonusPoints != 0) hash ^= WinStreakBonusPoints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      echelon_.WriteTo(output, _repeated_echelon_codec);
      if (WinStreakBonusMinimum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WinStreakBonusMinimum);
      }
      if (WinStreakBonusPoints != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WinStreakBonusPoints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += echelon_.CalculateSize(_repeated_echelon_codec);
      if (WinStreakBonusMinimum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinStreakBonusMinimum);
      }
      if (WinStreakBonusPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinStreakBonusPoints);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EchelonConfig other) {
      if (other == null) {
        return;
      }
      echelon_.Add(other.echelon_);
      if (other.WinStreakBonusMinimum != 0) {
        WinStreakBonusMinimum = other.WinStreakBonusMinimum;
      }
      if (other.WinStreakBonusPoints != 0) {
        WinStreakBonusPoints = other.WinStreakBonusPoints;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            echelon_.AddEntriesFrom(input, _repeated_echelon_codec);
            break;
          }
          case 80: {
            WinStreakBonusMinimum = input.ReadInt32();
            break;
          }
          case 88: {
            WinStreakBonusPoints = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankConfig : pb::IMessage<RankConfig> {
    private static readonly pb::MessageParser<RankConfig> _parser = new pb::MessageParser<RankConfig>(() => new RankConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankConfig(RankConfig other) : this() {
      PlayerProgress = other.playerProgress_ != null ? other.PlayerProgress.Clone() : null;
      CharProgress = other.charProgress_ != null ? other.CharProgress.Clone() : null;
      EchelonConfig = other.echelonConfig_ != null ? other.EchelonConfig.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankConfig Clone() {
      return new RankConfig(this);
    }

    /// <summary>Field number for the "player_progress" field.</summary>
    public const int PlayerProgressFieldNumber = 1;
    private global::Tbadmin.LevelProgression playerProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.LevelProgression PlayerProgress {
      get { return playerProgress_; }
      set {
        playerProgress_ = value;
      }
    }

    /// <summary>Field number for the "char_progress" field.</summary>
    public const int CharProgressFieldNumber = 2;
    private global::Tbadmin.LevelProgression charProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.LevelProgression CharProgress {
      get { return charProgress_; }
      set {
        charProgress_ = value;
      }
    }

    /// <summary>Field number for the "echelon_config" field.</summary>
    public const int EchelonConfigFieldNumber = 3;
    private global::Tbadmin.EchelonConfig echelonConfig_;
    /// <summary>
    /// Define the ranking echelons.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.EchelonConfig EchelonConfig {
      get { return echelonConfig_; }
      set {
        echelonConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerProgress, other.PlayerProgress)) return false;
      if (!object.Equals(CharProgress, other.CharProgress)) return false;
      if (!object.Equals(EchelonConfig, other.EchelonConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerProgress_ != null) hash ^= PlayerProgress.GetHashCode();
      if (charProgress_ != null) hash ^= CharProgress.GetHashCode();
      if (echelonConfig_ != null) hash ^= EchelonConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerProgress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerProgress);
      }
      if (charProgress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CharProgress);
      }
      if (echelonConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EchelonConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerProgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerProgress);
      }
      if (charProgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharProgress);
      }
      if (echelonConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EchelonConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankConfig other) {
      if (other == null) {
        return;
      }
      if (other.playerProgress_ != null) {
        if (playerProgress_ == null) {
          playerProgress_ = new global::Tbadmin.LevelProgression();
        }
        PlayerProgress.MergeFrom(other.PlayerProgress);
      }
      if (other.charProgress_ != null) {
        if (charProgress_ == null) {
          charProgress_ = new global::Tbadmin.LevelProgression();
        }
        CharProgress.MergeFrom(other.CharProgress);
      }
      if (other.echelonConfig_ != null) {
        if (echelonConfig_ == null) {
          echelonConfig_ = new global::Tbadmin.EchelonConfig();
        }
        EchelonConfig.MergeFrom(other.EchelonConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerProgress_ == null) {
              playerProgress_ = new global::Tbadmin.LevelProgression();
            }
            input.ReadMessage(playerProgress_);
            break;
          }
          case 18: {
            if (charProgress_ == null) {
              charProgress_ = new global::Tbadmin.LevelProgression();
            }
            input.ReadMessage(charProgress_);
            break;
          }
          case 26: {
            if (echelonConfig_ == null) {
              echelonConfig_ = new global::Tbadmin.EchelonConfig();
            }
            input.ReadMessage(echelonConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Glicko2RatingConfig : pb::IMessage<Glicko2RatingConfig> {
    private static readonly pb::MessageParser<Glicko2RatingConfig> _parser = new pb::MessageParser<Glicko2RatingConfig>(() => new Glicko2RatingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Glicko2RatingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Glicko2RatingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Glicko2RatingConfig(Glicko2RatingConfig other) : this() {
      tau_ = other.tau_;
      ratingPeriodMins_ = other.ratingPeriodMins_;
      checkPeriodMins_ = other.checkPeriodMins_;
      maxDeviation_ = other.maxDeviation_;
      minDeviation_ = other.minDeviation_;
      deviationDecayPeriods_ = other.deviationDecayPeriods_;
      typicalDeviation_ = other.typicalDeviation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Glicko2RatingConfig Clone() {
      return new Glicko2RatingConfig(this);
    }

    /// <summary>Field number for the "tau" field.</summary>
    public const int TauFieldNumber = 1;
    private float tau_;
    /// <summary>
    /// How deterministic are matches in this game (0.2 .. 1.2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Tau {
      get { return tau_; }
      set {
        tau_ = value;
      }
    }

    /// <summary>Field number for the "rating_period_mins" field.</summary>
    public const int RatingPeriodMinsFieldNumber = 2;
    private int ratingPeriodMins_;
    /// <summary>
    /// How many minutes in each rating period?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatingPeriodMins {
      get { return ratingPeriodMins_; }
      set {
        ratingPeriodMins_ = value;
      }
    }

    /// <summary>Field number for the "check_period_mins" field.</summary>
    public const int CheckPeriodMinsFieldNumber = 3;
    private int checkPeriodMins_;
    /// <summary>
    /// How often should MatchMaker master check for new matches to rate?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckPeriodMins {
      get { return checkPeriodMins_; }
      set {
        checkPeriodMins_ = value;
      }
    }

    /// <summary>Field number for the "max_deviation" field.</summary>
    public const int MaxDeviationFieldNumber = 10;
    private float maxDeviation_;
    /// <summary>
    /// Rating deviation (RD) for an unrated (or maximum lapsed) player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDeviation {
      get { return maxDeviation_; }
      set {
        maxDeviation_ = value;
      }
    }

    /// <summary>Field number for the "min_deviation" field.</summary>
    public const int MinDeviationFieldNumber = 11;
    private float minDeviation_;
    /// <summary>
    /// Rating deviation (RD) never to drop below, to ensure some freedom of movement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinDeviation {
      get { return minDeviation_; }
      set {
        minDeviation_ = value;
      }
    }

    /// <summary>Field number for the "deviation_decay_periods" field.</summary>
    public const int DeviationDecayPeriodsFieldNumber = 12;
    private float deviationDecayPeriods_;
    /// <summary>
    /// Number of rating periods must pass before an active player's deviation
    /// becomes as uncertain as that of an unrated player.
    /// Determines 'c' in Glicko paper.  Default (for 30 minute period) is 3 weeks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeviationDecayPeriods {
      get { return deviationDecayPeriods_; }
      set {
        deviationDecayPeriods_ = value;
      }
    }

    /// <summary>Field number for the "typical_deviation" field.</summary>
    public const int TypicalDeviationFieldNumber = 13;
    private float typicalDeviation_;
    /// <summary>
    /// Rating deviation of a "typical" active player for computation of 'c'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TypicalDeviation {
      get { return typicalDeviation_; }
      set {
        typicalDeviation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Glicko2RatingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Glicko2RatingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Tau, other.Tau)) return false;
      if (RatingPeriodMins != other.RatingPeriodMins) return false;
      if (CheckPeriodMins != other.CheckPeriodMins) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDeviation, other.MaxDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinDeviation, other.MinDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeviationDecayPeriods, other.DeviationDecayPeriods)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TypicalDeviation, other.TypicalDeviation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tau != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Tau);
      if (RatingPeriodMins != 0) hash ^= RatingPeriodMins.GetHashCode();
      if (CheckPeriodMins != 0) hash ^= CheckPeriodMins.GetHashCode();
      if (MaxDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDeviation);
      if (MinDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinDeviation);
      if (DeviationDecayPeriods != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeviationDecayPeriods);
      if (TypicalDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TypicalDeviation);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tau != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Tau);
      }
      if (RatingPeriodMins != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatingPeriodMins);
      }
      if (CheckPeriodMins != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CheckPeriodMins);
      }
      if (MaxDeviation != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxDeviation);
      }
      if (MinDeviation != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MinDeviation);
      }
      if (DeviationDecayPeriods != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DeviationDecayPeriods);
      }
      if (TypicalDeviation != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(TypicalDeviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tau != 0F) {
        size += 1 + 4;
      }
      if (RatingPeriodMins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatingPeriodMins);
      }
      if (CheckPeriodMins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckPeriodMins);
      }
      if (MaxDeviation != 0F) {
        size += 1 + 4;
      }
      if (MinDeviation != 0F) {
        size += 1 + 4;
      }
      if (DeviationDecayPeriods != 0F) {
        size += 1 + 4;
      }
      if (TypicalDeviation != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Glicko2RatingConfig other) {
      if (other == null) {
        return;
      }
      if (other.Tau != 0F) {
        Tau = other.Tau;
      }
      if (other.RatingPeriodMins != 0) {
        RatingPeriodMins = other.RatingPeriodMins;
      }
      if (other.CheckPeriodMins != 0) {
        CheckPeriodMins = other.CheckPeriodMins;
      }
      if (other.MaxDeviation != 0F) {
        MaxDeviation = other.MaxDeviation;
      }
      if (other.MinDeviation != 0F) {
        MinDeviation = other.MinDeviation;
      }
      if (other.DeviationDecayPeriods != 0F) {
        DeviationDecayPeriods = other.DeviationDecayPeriods;
      }
      if (other.TypicalDeviation != 0F) {
        TypicalDeviation = other.TypicalDeviation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Tau = input.ReadFloat();
            break;
          }
          case 16: {
            RatingPeriodMins = input.ReadInt32();
            break;
          }
          case 24: {
            CheckPeriodMins = input.ReadInt32();
            break;
          }
          case 85: {
            MaxDeviation = input.ReadFloat();
            break;
          }
          case 93: {
            MinDeviation = input.ReadFloat();
            break;
          }
          case 101: {
            DeviationDecayPeriods = input.ReadFloat();
            break;
          }
          case 109: {
            TypicalDeviation = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Behaviors of the Matching methods.
  /// </summary>
  public sealed partial class MatchServiceConfig : pb::IMessage<MatchServiceConfig> {
    private static readonly pb::MessageParser<MatchServiceConfig> _parser = new pb::MessageParser<MatchServiceConfig>(() => new MatchServiceConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchServiceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchServiceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchServiceConfig(MatchServiceConfig other) : this() {
      matchReadyTimeoutMs_ = other.matchReadyTimeoutMs_;
      Rank = other.rank_ != null ? other.Rank.Clone() : null;
      maxRecentResults_ = other.maxRecentResults_;
      maxPacketLossRatio_ = other.maxPacketLossRatio_;
      desyncReportMaxDrift_ = other.desyncReportMaxDrift_;
      RatingConfig = other.ratingConfig_ != null ? other.RatingConfig.Clone() : null;
      unratedGlickoRating_ = other.unratedGlickoRating_;
      defaultGlickoRating_ = other.defaultGlickoRating_.Clone();
      sessionRatingAdjustCoefficient_ = other.sessionRatingAdjustCoefficient_;
      luaConfigCacheSec_ = other.luaConfigCacheSec_;
      strictGameSessions_ = other.strictGameSessions_;
      DeprecatedGetRankedTimeoutMs_ = other.DeprecatedGetRankedTimeoutMs_;
      DeprecatedProvideLocalFsm_ = other.DeprecatedProvideLocalFsm_;
      DeprecatedReplayPath_ = other.DeprecatedReplayPath_;
      DeprecatedMatchLifetimeSec_ = other.DeprecatedMatchLifetimeSec_;
      DeprecatedSelectSize_ = other.DeprecatedSelectSize_;
      DeprecatedDesyncReportPath_ = other.DeprecatedDesyncReportPath_;
      PingTestLifetimeSec_ = other.PingTestLifetimeSec_;
      DeprecatedGamesToWin_ = other.DeprecatedGamesToWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchServiceConfig Clone() {
      return new MatchServiceConfig(this);
    }

    /// <summary>Field number for the "match_ready_timeout_ms" field.</summary>
    public const int MatchReadyTimeoutMsFieldNumber = 2;
    private int matchReadyTimeoutMs_;
    /// <summary>
    /// How long to wait for an opponent to be ready to continue a match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchReadyTimeoutMs {
      get { return matchReadyTimeoutMs_; }
      set {
        matchReadyTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 7;
    private global::Tbadmin.RankConfig rank_;
    /// <summary>
    /// How to award players with the outcome of a match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.RankConfig Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "max_recent_results" field.</summary>
    public const int MaxRecentResultsFieldNumber = 8;
    private int maxRecentResults_;
    /// <summary>
    /// Max recent match results to return from GetRecentMatches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRecentResults {
      get { return maxRecentResults_; }
      set {
        maxRecentResults_ = value;
      }
    }

    /// <summary>Field number for the "max_packet_loss_ratio" field.</summary>
    public const int MaxPacketLossRatioFieldNumber = 21;
    private float maxPacketLossRatio_;
    /// <summary>
    /// If we lost more than this percentage of packets during ping test,
    /// advise the user of network issues and don't record the result for matchmaking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPacketLossRatio {
      get { return maxPacketLossRatio_; }
      set {
        maxPacketLossRatio_ = value;
      }
    }

    /// <summary>Field number for the "desync_report_max_drift" field.</summary>
    public const int DesyncReportMaxDriftFieldNumber = 30;
    private int desyncReportMaxDrift_;
    /// <summary>
    /// Max number of seconds between each player's desync report to qualify.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DesyncReportMaxDrift {
      get { return desyncReportMaxDrift_; }
      set {
        desyncReportMaxDrift_ = value;
      }
    }

    /// <summary>Field number for the "rating_config" field.</summary>
    public const int RatingConfigFieldNumber = 50;
    private global::Tbadmin.Glicko2RatingConfig ratingConfig_;
    /// <summary>
    /// How to perform perform Glicko2 rating system updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.Glicko2RatingConfig RatingConfig {
      get { return ratingConfig_; }
      set {
        ratingConfig_ = value;
      }
    }

    /// <summary>Field number for the "unrated_glicko_rating" field.</summary>
    public const int UnratedGlickoRatingFieldNumber = 60;
    private float unratedGlickoRating_;
    /// <summary>
    /// Glicko rating to assign to players with zero games played.  Glicko
    /// ratings still assume 1500.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnratedGlickoRating {
      get { return unratedGlickoRating_; }
      set {
        unratedGlickoRating_ = value;
      }
    }

    /// <summary>Field number for the "default_glicko_rating" field.</summary>
    public const int DefaultGlickoRatingFieldNumber = 61;
    private static readonly pb::FieldCodec<float> _repeated_defaultGlickoRating_codec
        = pb::FieldCodec.ForFloat(490);
    private readonly pbc::RepeatedField<float> defaultGlickoRating_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Glicko rating to assign to players with zero games played depending
    /// on their SkillEstimateType. SkillEstimateType acts as the index into
    /// the array.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DefaultGlickoRating {
      get { return defaultGlickoRating_; }
    }

    /// <summary>Field number for the "session_rating_adjust_coefficient" field.</summary>
    public const int SessionRatingAdjustCoefficientFieldNumber = 65;
    private float sessionRatingAdjustCoefficient_;
    /// <summary>
    /// Max portion of rating difference to adjust for win/loss, scaled by deviation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SessionRatingAdjustCoefficient {
      get { return sessionRatingAdjustCoefficient_; }
      set {
        sessionRatingAdjustCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "lua_config_cache_sec" field.</summary>
    public const int LuaConfigCacheSecFieldNumber = 70;
    private int luaConfigCacheSec_;
    /// <summary>
    /// How long, in seconds, to re-use the last read values from lua config objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuaConfigCacheSec {
      get { return luaConfigCacheSec_; }
      set {
        luaConfigCacheSec_ = value;
      }
    }

    /// <summary>Field number for the "strict_game_sessions" field.</summary>
    public const int StrictGameSessionsFieldNumber = 80;
    private bool strictGameSessions_;
    /// <summary>
    /// Require that only one game may be played at once, only one random match queue
    /// can be pending at a time, and cannot enqueue while in a custom lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrictGameSessions {
      get { return strictGameSessions_; }
      set {
        strictGameSessions_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_get_ranked_timeout_ms" field.</summary>
    public const int DeprecatedGetRankedTimeoutMsFieldNumber = 1;
    private int DeprecatedGetRankedTimeoutMs_;
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedGetRankedTimeoutMs {
      get { return DeprecatedGetRankedTimeoutMs_; }
      set {
        DeprecatedGetRankedTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_provide_local_fsm" field.</summary>
    public const int DeprecatedProvideLocalFsmFieldNumber = 3;
    private bool DeprecatedProvideLocalFsm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeprecatedProvideLocalFsm {
      get { return DeprecatedProvideLocalFsm_; }
      set {
        DeprecatedProvideLocalFsm_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_replay_path" field.</summary>
    public const int DeprecatedReplayPathFieldNumber = 4;
    private string DeprecatedReplayPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeprecatedReplayPath {
      get { return DeprecatedReplayPath_; }
      set {
        DeprecatedReplayPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "__deprecated_match_lifetime_sec" field.</summary>
    public const int DeprecatedMatchLifetimeSecFieldNumber = 6;
    private int DeprecatedMatchLifetimeSec_;
    /// <summary>
    /// moved to lua config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedMatchLifetimeSec {
      get { return DeprecatedMatchLifetimeSec_; }
      set {
        DeprecatedMatchLifetimeSec_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_select_size" field.</summary>
    public const int DeprecatedSelectSizeFieldNumber = 9;
    private int DeprecatedSelectSize_;
    /// <summary>
    /// moved to lua config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedSelectSize {
      get { return DeprecatedSelectSize_; }
      set {
        DeprecatedSelectSize_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_desync_report_path" field.</summary>
    public const int DeprecatedDesyncReportPathFieldNumber = 5;
    private string DeprecatedDesyncReportPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeprecatedDesyncReportPath {
      get { return DeprecatedDesyncReportPath_; }
      set {
        DeprecatedDesyncReportPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "__ping_test_lifetime_sec" field.</summary>
    public const int PingTestLifetimeSecFieldNumber = 20;
    private int PingTestLifetimeSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PingTestLifetimeSec {
      get { return PingTestLifetimeSec_; }
      set {
        PingTestLifetimeSec_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_games_to_win" field.</summary>
    public const int DeprecatedGamesToWinFieldNumber = 40;
    private int DeprecatedGamesToWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedGamesToWin {
      get { return DeprecatedGamesToWin_; }
      set {
        DeprecatedGamesToWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchServiceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchServiceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchReadyTimeoutMs != other.MatchReadyTimeoutMs) return false;
      if (!object.Equals(Rank, other.Rank)) return false;
      if (MaxRecentResults != other.MaxRecentResults) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxPacketLossRatio, other.MaxPacketLossRatio)) return false;
      if (DesyncReportMaxDrift != other.DesyncReportMaxDrift) return false;
      if (!object.Equals(RatingConfig, other.RatingConfig)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnratedGlickoRating, other.UnratedGlickoRating)) return false;
      if(!defaultGlickoRating_.Equals(other.defaultGlickoRating_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SessionRatingAdjustCoefficient, other.SessionRatingAdjustCoefficient)) return false;
      if (LuaConfigCacheSec != other.LuaConfigCacheSec) return false;
      if (StrictGameSessions != other.StrictGameSessions) return false;
      if (DeprecatedGetRankedTimeoutMs != other.DeprecatedGetRankedTimeoutMs) return false;
      if (DeprecatedProvideLocalFsm != other.DeprecatedProvideLocalFsm) return false;
      if (DeprecatedReplayPath != other.DeprecatedReplayPath) return false;
      if (DeprecatedMatchLifetimeSec != other.DeprecatedMatchLifetimeSec) return false;
      if (DeprecatedSelectSize != other.DeprecatedSelectSize) return false;
      if (DeprecatedDesyncReportPath != other.DeprecatedDesyncReportPath) return false;
      if (PingTestLifetimeSec != other.PingTestLifetimeSec) return false;
      if (DeprecatedGamesToWin != other.DeprecatedGamesToWin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchReadyTimeoutMs != 0) hash ^= MatchReadyTimeoutMs.GetHashCode();
      if (rank_ != null) hash ^= Rank.GetHashCode();
      if (MaxRecentResults != 0) hash ^= MaxRecentResults.GetHashCode();
      if (MaxPacketLossRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxPacketLossRatio);
      if (DesyncReportMaxDrift != 0) hash ^= DesyncReportMaxDrift.GetHashCode();
      if (ratingConfig_ != null) hash ^= RatingConfig.GetHashCode();
      if (UnratedGlickoRating != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnratedGlickoRating);
      hash ^= defaultGlickoRating_.GetHashCode();
      if (SessionRatingAdjustCoefficient != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SessionRatingAdjustCoefficient);
      if (LuaConfigCacheSec != 0) hash ^= LuaConfigCacheSec.GetHashCode();
      if (StrictGameSessions != false) hash ^= StrictGameSessions.GetHashCode();
      if (DeprecatedGetRankedTimeoutMs != 0) hash ^= DeprecatedGetRankedTimeoutMs.GetHashCode();
      if (DeprecatedProvideLocalFsm != false) hash ^= DeprecatedProvideLocalFsm.GetHashCode();
      if (DeprecatedReplayPath.Length != 0) hash ^= DeprecatedReplayPath.GetHashCode();
      if (DeprecatedMatchLifetimeSec != 0) hash ^= DeprecatedMatchLifetimeSec.GetHashCode();
      if (DeprecatedSelectSize != 0) hash ^= DeprecatedSelectSize.GetHashCode();
      if (DeprecatedDesyncReportPath.Length != 0) hash ^= DeprecatedDesyncReportPath.GetHashCode();
      if (PingTestLifetimeSec != 0) hash ^= PingTestLifetimeSec.GetHashCode();
      if (DeprecatedGamesToWin != 0) hash ^= DeprecatedGamesToWin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedGetRankedTimeoutMs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeprecatedGetRankedTimeoutMs);
      }
      if (MatchReadyTimeoutMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatchReadyTimeoutMs);
      }
      if (DeprecatedProvideLocalFsm != false) {
        output.WriteRawTag(24);
        output.WriteBool(DeprecatedProvideLocalFsm);
      }
      if (DeprecatedReplayPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeprecatedReplayPath);
      }
      if (DeprecatedDesyncReportPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeprecatedDesyncReportPath);
      }
      if (DeprecatedMatchLifetimeSec != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeprecatedMatchLifetimeSec);
      }
      if (rank_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Rank);
      }
      if (MaxRecentResults != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxRecentResults);
      }
      if (DeprecatedSelectSize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DeprecatedSelectSize);
      }
      if (PingTestLifetimeSec != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(PingTestLifetimeSec);
      }
      if (MaxPacketLossRatio != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MaxPacketLossRatio);
      }
      if (DesyncReportMaxDrift != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(DesyncReportMaxDrift);
      }
      if (DeprecatedGamesToWin != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(DeprecatedGamesToWin);
      }
      if (ratingConfig_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(RatingConfig);
      }
      if (UnratedGlickoRating != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(UnratedGlickoRating);
      }
      defaultGlickoRating_.WriteTo(output, _repeated_defaultGlickoRating_codec);
      if (SessionRatingAdjustCoefficient != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(SessionRatingAdjustCoefficient);
      }
      if (LuaConfigCacheSec != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(LuaConfigCacheSec);
      }
      if (StrictGameSessions != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(StrictGameSessions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchReadyTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchReadyTimeoutMs);
      }
      if (rank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rank);
      }
      if (MaxRecentResults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRecentResults);
      }
      if (MaxPacketLossRatio != 0F) {
        size += 2 + 4;
      }
      if (DesyncReportMaxDrift != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DesyncReportMaxDrift);
      }
      if (ratingConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RatingConfig);
      }
      if (UnratedGlickoRating != 0F) {
        size += 2 + 4;
      }
      size += defaultGlickoRating_.CalculateSize(_repeated_defaultGlickoRating_codec);
      if (SessionRatingAdjustCoefficient != 0F) {
        size += 2 + 4;
      }
      if (LuaConfigCacheSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuaConfigCacheSec);
      }
      if (StrictGameSessions != false) {
        size += 2 + 1;
      }
      if (DeprecatedGetRankedTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedGetRankedTimeoutMs);
      }
      if (DeprecatedProvideLocalFsm != false) {
        size += 1 + 1;
      }
      if (DeprecatedReplayPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeprecatedReplayPath);
      }
      if (DeprecatedMatchLifetimeSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedMatchLifetimeSec);
      }
      if (DeprecatedSelectSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedSelectSize);
      }
      if (DeprecatedDesyncReportPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeprecatedDesyncReportPath);
      }
      if (PingTestLifetimeSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PingTestLifetimeSec);
      }
      if (DeprecatedGamesToWin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedGamesToWin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchServiceConfig other) {
      if (other == null) {
        return;
      }
      if (other.MatchReadyTimeoutMs != 0) {
        MatchReadyTimeoutMs = other.MatchReadyTimeoutMs;
      }
      if (other.rank_ != null) {
        if (rank_ == null) {
          rank_ = new global::Tbadmin.RankConfig();
        }
        Rank.MergeFrom(other.Rank);
      }
      if (other.MaxRecentResults != 0) {
        MaxRecentResults = other.MaxRecentResults;
      }
      if (other.MaxPacketLossRatio != 0F) {
        MaxPacketLossRatio = other.MaxPacketLossRatio;
      }
      if (other.DesyncReportMaxDrift != 0) {
        DesyncReportMaxDrift = other.DesyncReportMaxDrift;
      }
      if (other.ratingConfig_ != null) {
        if (ratingConfig_ == null) {
          ratingConfig_ = new global::Tbadmin.Glicko2RatingConfig();
        }
        RatingConfig.MergeFrom(other.RatingConfig);
      }
      if (other.UnratedGlickoRating != 0F) {
        UnratedGlickoRating = other.UnratedGlickoRating;
      }
      defaultGlickoRating_.Add(other.defaultGlickoRating_);
      if (other.SessionRatingAdjustCoefficient != 0F) {
        SessionRatingAdjustCoefficient = other.SessionRatingAdjustCoefficient;
      }
      if (other.LuaConfigCacheSec != 0) {
        LuaConfigCacheSec = other.LuaConfigCacheSec;
      }
      if (other.StrictGameSessions != false) {
        StrictGameSessions = other.StrictGameSessions;
      }
      if (other.DeprecatedGetRankedTimeoutMs != 0) {
        DeprecatedGetRankedTimeoutMs = other.DeprecatedGetRankedTimeoutMs;
      }
      if (other.DeprecatedProvideLocalFsm != false) {
        DeprecatedProvideLocalFsm = other.DeprecatedProvideLocalFsm;
      }
      if (other.DeprecatedReplayPath.Length != 0) {
        DeprecatedReplayPath = other.DeprecatedReplayPath;
      }
      if (other.DeprecatedMatchLifetimeSec != 0) {
        DeprecatedMatchLifetimeSec = other.DeprecatedMatchLifetimeSec;
      }
      if (other.DeprecatedSelectSize != 0) {
        DeprecatedSelectSize = other.DeprecatedSelectSize;
      }
      if (other.DeprecatedDesyncReportPath.Length != 0) {
        DeprecatedDesyncReportPath = other.DeprecatedDesyncReportPath;
      }
      if (other.PingTestLifetimeSec != 0) {
        PingTestLifetimeSec = other.PingTestLifetimeSec;
      }
      if (other.DeprecatedGamesToWin != 0) {
        DeprecatedGamesToWin = other.DeprecatedGamesToWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeprecatedGetRankedTimeoutMs = input.ReadInt32();
            break;
          }
          case 16: {
            MatchReadyTimeoutMs = input.ReadInt32();
            break;
          }
          case 24: {
            DeprecatedProvideLocalFsm = input.ReadBool();
            break;
          }
          case 34: {
            DeprecatedReplayPath = input.ReadString();
            break;
          }
          case 42: {
            DeprecatedDesyncReportPath = input.ReadString();
            break;
          }
          case 48: {
            DeprecatedMatchLifetimeSec = input.ReadInt32();
            break;
          }
          case 58: {
            if (rank_ == null) {
              rank_ = new global::Tbadmin.RankConfig();
            }
            input.ReadMessage(rank_);
            break;
          }
          case 64: {
            MaxRecentResults = input.ReadInt32();
            break;
          }
          case 72: {
            DeprecatedSelectSize = input.ReadInt32();
            break;
          }
          case 160: {
            PingTestLifetimeSec = input.ReadInt32();
            break;
          }
          case 173: {
            MaxPacketLossRatio = input.ReadFloat();
            break;
          }
          case 240: {
            DesyncReportMaxDrift = input.ReadInt32();
            break;
          }
          case 320: {
            DeprecatedGamesToWin = input.ReadInt32();
            break;
          }
          case 402: {
            if (ratingConfig_ == null) {
              ratingConfig_ = new global::Tbadmin.Glicko2RatingConfig();
            }
            input.ReadMessage(ratingConfig_);
            break;
          }
          case 485: {
            UnratedGlickoRating = input.ReadFloat();
            break;
          }
          case 490:
          case 493: {
            defaultGlickoRating_.AddEntriesFrom(input, _repeated_defaultGlickoRating_codec);
            break;
          }
          case 525: {
            SessionRatingAdjustCoefficient = input.ReadFloat();
            break;
          }
          case 560: {
            LuaConfigCacheSec = input.ReadInt32();
            break;
          }
          case 640: {
            StrictGameSessions = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LobbyServiceConfig : pb::IMessage<LobbyServiceConfig> {
    private static readonly pb::MessageParser<LobbyServiceConfig> _parser = new pb::MessageParser<LobbyServiceConfig>(() => new LobbyServiceConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyServiceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyServiceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyServiceConfig(LobbyServiceConfig other) : this() {
      joinCodeLength_ = other.joinCodeLength_;
      maxMembers_ = other.maxMembers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyServiceConfig Clone() {
      return new LobbyServiceConfig(this);
    }

    /// <summary>Field number for the "join_code_length" field.</summary>
    public const int JoinCodeLengthFieldNumber = 1;
    private int joinCodeLength_;
    /// <summary>
    /// Number of characters in the join code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCodeLength {
      get { return joinCodeLength_; }
      set {
        joinCodeLength_ = value;
      }
    }

    /// <summary>Field number for the "max_members" field.</summary>
    public const int MaxMembersFieldNumber = 2;
    private int maxMembers_;
    /// <summary>
    /// Maximum number of members allowed in a single lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMembers {
      get { return maxMembers_; }
      set {
        maxMembers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyServiceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyServiceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JoinCodeLength != other.JoinCodeLength) return false;
      if (MaxMembers != other.MaxMembers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JoinCodeLength != 0) hash ^= JoinCodeLength.GetHashCode();
      if (MaxMembers != 0) hash ^= MaxMembers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JoinCodeLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JoinCodeLength);
      }
      if (MaxMembers != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxMembers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JoinCodeLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCodeLength);
      }
      if (MaxMembers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMembers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyServiceConfig other) {
      if (other == null) {
        return;
      }
      if (other.JoinCodeLength != 0) {
        JoinCodeLength = other.JoinCodeLength;
      }
      if (other.MaxMembers != 0) {
        MaxMembers = other.MaxMembers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JoinCodeLength = input.ReadInt32();
            break;
          }
          case 16: {
            MaxMembers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// How to interact with Authorize.Net API.
  /// </summary>
  public sealed partial class PaymentConfig : pb::IMessage<PaymentConfig> {
    private static readonly pb::MessageParser<PaymentConfig> _parser = new pb::MessageParser<PaymentConfig>(() => new PaymentConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentConfig(PaymentConfig other) : this() {
      timeoutMs_ = other.timeoutMs_;
      currency_ = other.currency_;
      testMode_ = other.testMode_;
      valMode_ = other.valMode_;
      directResponseDelimiter_ = other.directResponseDelimiter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentConfig Clone() {
      return new PaymentConfig(this);
    }

    /// <summary>Field number for the "timeout_ms" field.</summary>
    public const int TimeoutMsFieldNumber = 1;
    private int timeoutMs_;
    /// <summary>
    /// Amount of time to wait for calls before giving up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutMs {
      get { return timeoutMs_; }
      set {
        timeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 2;
    private string currency_ = "";
    /// <summary>
    /// An Authorize.Net account works in a single currency type
    /// that is associated with the merchant account.  Use this currency
    /// to format and verify input amounts.  If none is given, uses
    /// the default system currency in AppConfig.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_mode" field.</summary>
    public const int TestModeFieldNumber = 3;
    private bool testMode_;
    /// <summary>
    /// Whether to use transactionSettings/testRequest=TRUE.
    /// This is for phase 2 testing, connecting to the production API endpoint,
    /// but still submitting test requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestMode {
      get { return testMode_; }
      set {
        testMode_ = value;
      }
    }

    /// <summary>Field number for the "val_mode" field.</summary>
    public const int ValModeFieldNumber = 4;
    private global::Tbadmin.PaymentConfig.Types.Validation valMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.PaymentConfig.Types.Validation ValMode {
      get { return valMode_; }
      set {
        valMode_ = value;
      }
    }

    /// <summary>Field number for the "direct_response_delimiter" field.</summary>
    public const int DirectResponseDelimiterFieldNumber = 5;
    private string directResponseDelimiter_ = "";
    /// <summary>
    /// Character delimiting fields in APIs that return a "direct response".
    /// Authorize.Net sets this to comma by default, but we choose pipe and
    /// disallow pipe in most fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DirectResponseDelimiter {
      get { return directResponseDelimiter_; }
      set {
        directResponseDelimiter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeoutMs != other.TimeoutMs) return false;
      if (Currency != other.Currency) return false;
      if (TestMode != other.TestMode) return false;
      if (ValMode != other.ValMode) return false;
      if (DirectResponseDelimiter != other.DirectResponseDelimiter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeoutMs != 0) hash ^= TimeoutMs.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (TestMode != false) hash ^= TestMode.GetHashCode();
      if (ValMode != 0) hash ^= ValMode.GetHashCode();
      if (DirectResponseDelimiter.Length != 0) hash ^= DirectResponseDelimiter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeoutMs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeoutMs);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (TestMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(TestMode);
      }
      if (ValMode != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ValMode);
      }
      if (DirectResponseDelimiter.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DirectResponseDelimiter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutMs);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (TestMode != false) {
        size += 1 + 1;
      }
      if (ValMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValMode);
      }
      if (DirectResponseDelimiter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DirectResponseDelimiter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentConfig other) {
      if (other == null) {
        return;
      }
      if (other.TimeoutMs != 0) {
        TimeoutMs = other.TimeoutMs;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.TestMode != false) {
        TestMode = other.TestMode;
      }
      if (other.ValMode != 0) {
        ValMode = other.ValMode;
      }
      if (other.DirectResponseDelimiter.Length != 0) {
        DirectResponseDelimiter = other.DirectResponseDelimiter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeoutMs = input.ReadInt32();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
          case 24: {
            TestMode = input.ReadBool();
            break;
          }
          case 32: {
            valMode_ = (global::Tbadmin.PaymentConfig.Types.Validation) input.ReadEnum();
            break;
          }
          case 42: {
            DirectResponseDelimiter = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PaymentConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// How to perform validation of payment profiles on
      /// creation and update.  Maps to validationMode parameter
      /// of the CIM API.  TEST and LIVE will generate e-mails, but
      /// only LIVE will reach the payment processor.
      /// </summary>
      public enum Validation {
        [pbr::OriginalName("VALIDATION_ZERO")] Zero = 0,
        [pbr::OriginalName("NONE")] None = 1,
        [pbr::OriginalName("TEST")] Test = 2,
        [pbr::OriginalName("LIVE")] Live = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Describes a supported currency and rules for working with it.
  /// </summary>
  public sealed partial class CurrencyDesc : pb::IMessage<CurrencyDesc> {
    private static readonly pb::MessageParser<CurrencyDesc> _parser = new pb::MessageParser<CurrencyDesc>(() => new CurrencyDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyDesc(CurrencyDesc other) : this() {
      code_ = other.code_;
      precision_ = other.precision_;
      symbol_ = other.symbol_;
      countryIso3_ = other.countryIso3_.Clone();
      balancePurchaseAllow_ = other.balancePurchaseAllow_;
      balancePurchaseDefault_ = other.balancePurchaseDefault_.Clone();
      BalancePurchaseMin = other.balancePurchaseMin_ != null ? other.BalancePurchaseMin.Clone() : null;
      BalancePurchaseMax = other.balancePurchaseMax_ != null ? other.BalancePurchaseMax.Clone() : null;
      BalanceMax = other.balanceMax_ != null ? other.BalanceMax.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyDesc Clone() {
      return new CurrencyDesc(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    /// <summary>
    /// 3-letter capital code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 2;
    private int precision_;
    /// <summary>
    /// Digits of precision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// Character prepended to distinguish values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_iso3" field.</summary>
    public const int CountryIso3FieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_countryIso3_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> countryIso3_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of 3-letter country codes that use this currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CountryIso3 {
      get { return countryIso3_; }
    }

    /// <summary>Field number for the "balance_purchase_allow" field.</summary>
    public const int BalancePurchaseAllowFieldNumber = 40;
    private bool balancePurchaseAllow_;
    /// <summary>
    /// Allow balance loads with this currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BalancePurchaseAllow {
      get { return balancePurchaseAllow_; }
      set {
        balancePurchaseAllow_ = value;
      }
    }

    /// <summary>Field number for the "balance_purchase_default" field.</summary>
    public const int BalancePurchaseDefaultFieldNumber = 41;
    private static readonly pb::FieldCodec<global::Tbrpc.Money> _repeated_balancePurchaseDefault_codec
        = pb::FieldCodec.ForMessage(330, global::Tbrpc.Money.Parser);
    private readonly pbc::RepeatedField<global::Tbrpc.Money> balancePurchaseDefault_ = new pbc::RepeatedField<global::Tbrpc.Money>();
    /// <summary>
    /// Default values given for account balance purchases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbrpc.Money> BalancePurchaseDefault {
      get { return balancePurchaseDefault_; }
    }

    /// <summary>Field number for the "balance_purchase_min" field.</summary>
    public const int BalancePurchaseMinFieldNumber = 42;
    private global::Tbrpc.Money balancePurchaseMin_;
    /// <summary>
    /// Range of allowed custom balance purchase amounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbrpc.Money BalancePurchaseMin {
      get { return balancePurchaseMin_; }
      set {
        balancePurchaseMin_ = value;
      }
    }

    /// <summary>Field number for the "balance_purchase_max" field.</summary>
    public const int BalancePurchaseMaxFieldNumber = 43;
    private global::Tbrpc.Money balancePurchaseMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbrpc.Money BalancePurchaseMax {
      get { return balancePurchaseMax_; }
      set {
        balancePurchaseMax_ = value;
      }
    }

    /// <summary>Field number for the "balance_max" field.</summary>
    public const int BalanceMaxFieldNumber = 50;
    private global::Tbrpc.Money balanceMax_;
    /// <summary>
    /// Maximum balance an account may hold in this currency.
    /// Orders that would exceed this amount are rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbrpc.Money BalanceMax {
      get { return balanceMax_; }
      set {
        balanceMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Precision != other.Precision) return false;
      if (Symbol != other.Symbol) return false;
      if(!countryIso3_.Equals(other.countryIso3_)) return false;
      if (BalancePurchaseAllow != other.BalancePurchaseAllow) return false;
      if(!balancePurchaseDefault_.Equals(other.balancePurchaseDefault_)) return false;
      if (!object.Equals(BalancePurchaseMin, other.BalancePurchaseMin)) return false;
      if (!object.Equals(BalancePurchaseMax, other.BalancePurchaseMax)) return false;
      if (!object.Equals(BalanceMax, other.BalanceMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      hash ^= countryIso3_.GetHashCode();
      if (BalancePurchaseAllow != false) hash ^= BalancePurchaseAllow.GetHashCode();
      hash ^= balancePurchaseDefault_.GetHashCode();
      if (balancePurchaseMin_ != null) hash ^= BalancePurchaseMin.GetHashCode();
      if (balancePurchaseMax_ != null) hash ^= BalancePurchaseMax.GetHashCode();
      if (balanceMax_ != null) hash ^= BalanceMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Precision != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Precision);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      countryIso3_.WriteTo(output, _repeated_countryIso3_codec);
      if (BalancePurchaseAllow != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(BalancePurchaseAllow);
      }
      balancePurchaseDefault_.WriteTo(output, _repeated_balancePurchaseDefault_codec);
      if (balancePurchaseMin_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(BalancePurchaseMin);
      }
      if (balancePurchaseMax_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(BalancePurchaseMax);
      }
      if (balanceMax_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(BalanceMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Precision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      size += countryIso3_.CalculateSize(_repeated_countryIso3_codec);
      if (BalancePurchaseAllow != false) {
        size += 2 + 1;
      }
      size += balancePurchaseDefault_.CalculateSize(_repeated_balancePurchaseDefault_codec);
      if (balancePurchaseMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BalancePurchaseMin);
      }
      if (balancePurchaseMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BalancePurchaseMax);
      }
      if (balanceMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BalanceMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyDesc other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      countryIso3_.Add(other.countryIso3_);
      if (other.BalancePurchaseAllow != false) {
        BalancePurchaseAllow = other.BalancePurchaseAllow;
      }
      balancePurchaseDefault_.Add(other.balancePurchaseDefault_);
      if (other.balancePurchaseMin_ != null) {
        if (balancePurchaseMin_ == null) {
          balancePurchaseMin_ = new global::Tbrpc.Money();
        }
        BalancePurchaseMin.MergeFrom(other.BalancePurchaseMin);
      }
      if (other.balancePurchaseMax_ != null) {
        if (balancePurchaseMax_ == null) {
          balancePurchaseMax_ = new global::Tbrpc.Money();
        }
        BalancePurchaseMax.MergeFrom(other.BalancePurchaseMax);
      }
      if (other.balanceMax_ != null) {
        if (balanceMax_ == null) {
          balanceMax_ = new global::Tbrpc.Money();
        }
        BalanceMax.MergeFrom(other.BalanceMax);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 16: {
            Precision = input.ReadInt32();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            countryIso3_.AddEntriesFrom(input, _repeated_countryIso3_codec);
            break;
          }
          case 320: {
            BalancePurchaseAllow = input.ReadBool();
            break;
          }
          case 330: {
            balancePurchaseDefault_.AddEntriesFrom(input, _repeated_balancePurchaseDefault_codec);
            break;
          }
          case 338: {
            if (balancePurchaseMin_ == null) {
              balancePurchaseMin_ = new global::Tbrpc.Money();
            }
            input.ReadMessage(balancePurchaseMin_);
            break;
          }
          case 346: {
            if (balancePurchaseMax_ == null) {
              balancePurchaseMax_ = new global::Tbrpc.Money();
            }
            input.ReadMessage(balancePurchaseMax_);
            break;
          }
          case 402: {
            if (balanceMax_ == null) {
              balanceMax_ = new global::Tbrpc.Money();
            }
            input.ReadMessage(balanceMax_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// What currencies are supported and their rules.
  /// </summary>
  public sealed partial class CurrencyConfig : pb::IMessage<CurrencyConfig> {
    private static readonly pb::MessageParser<CurrencyConfig> _parser = new pb::MessageParser<CurrencyConfig>(() => new CurrencyConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyConfig(CurrencyConfig other) : this() {
      desc_ = other.desc_.Clone();
      defaultCurrency_ = other.defaultCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyConfig Clone() {
      return new CurrencyConfig(this);
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tbadmin.CurrencyDesc> _repeated_desc_codec
        = pb::FieldCodec.ForMessage(10, global::Tbadmin.CurrencyDesc.Parser);
    private readonly pbc::RepeatedField<global::Tbadmin.CurrencyDesc> desc_ = new pbc::RepeatedField<global::Tbadmin.CurrencyDesc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tbadmin.CurrencyDesc> Desc {
      get { return desc_; }
    }

    /// <summary>Field number for the "default_currency" field.</summary>
    public const int DefaultCurrencyFieldNumber = 2;
    private string defaultCurrency_ = "";
    /// <summary>
    /// Currency to use for new accounts when the country code
    /// is unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultCurrency {
      get { return defaultCurrency_; }
      set {
        defaultCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!desc_.Equals(other.desc_)) return false;
      if (DefaultCurrency != other.DefaultCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= desc_.GetHashCode();
      if (DefaultCurrency.Length != 0) hash ^= DefaultCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      desc_.WriteTo(output, _repeated_desc_codec);
      if (DefaultCurrency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += desc_.CalculateSize(_repeated_desc_codec);
      if (DefaultCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyConfig other) {
      if (other == null) {
        return;
      }
      desc_.Add(other.desc_);
      if (other.DefaultCurrency.Length != 0) {
        DefaultCurrency = other.DefaultCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            desc_.AddEntriesFrom(input, _repeated_desc_codec);
            break;
          }
          case 18: {
            DefaultCurrency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for online store behaviors, limits, etc.
  /// </summary>
  public sealed partial class ShopConfig : pb::IMessage<ShopConfig> {
    private static readonly pb::MessageParser<ShopConfig> _parser = new pb::MessageParser<ShopConfig>(() => new ShopConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopConfig(ShopConfig other) : this() {
      Payment = other.payment_ != null ? other.Payment.Clone() : null;
      Currency = other.currency_ != null ? other.Currency.Clone() : null;
      maxOrderSearchResult_ = other.maxOrderSearchResult_;
      orderHistoryPageSize_ = other.orderHistoryPageSize_;
      maxBalanceHistoryDays_ = other.maxBalanceHistoryDays_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopConfig Clone() {
      return new ShopConfig(this);
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 1;
    private global::Tbadmin.PaymentConfig payment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.PaymentConfig Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 2;
    private global::Tbadmin.CurrencyConfig currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.CurrencyConfig Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "max_order_search_result" field.</summary>
    public const int MaxOrderSearchResultFieldNumber = 10;
    private int maxOrderSearchResult_;
    /// <summary>
    /// Max number of orders to return from SearchPurchaseOrders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxOrderSearchResult {
      get { return maxOrderSearchResult_; }
      set {
        maxOrderSearchResult_ = value;
      }
    }

    /// <summary>Field number for the "order_history_page_size" field.</summary>
    public const int OrderHistoryPageSizeFieldNumber = 11;
    private int orderHistoryPageSize_;
    /// <summary>
    /// Max number of results returned from GetAccountOrderHistory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderHistoryPageSize {
      get { return orderHistoryPageSize_; }
      set {
        orderHistoryPageSize_ = value;
      }
    }

    /// <summary>Field number for the "max_balance_history_days" field.</summary>
    public const int MaxBalanceHistoryDaysFieldNumber = 12;
    private int maxBalanceHistoryDays_;
    /// <summary>
    /// Max number of days you can view balance history over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBalanceHistoryDays {
      get { return maxBalanceHistoryDays_; }
      set {
        maxBalanceHistoryDays_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payment, other.Payment)) return false;
      if (!object.Equals(Currency, other.Currency)) return false;
      if (MaxOrderSearchResult != other.MaxOrderSearchResult) return false;
      if (OrderHistoryPageSize != other.OrderHistoryPageSize) return false;
      if (MaxBalanceHistoryDays != other.MaxBalanceHistoryDays) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payment_ != null) hash ^= Payment.GetHashCode();
      if (currency_ != null) hash ^= Currency.GetHashCode();
      if (MaxOrderSearchResult != 0) hash ^= MaxOrderSearchResult.GetHashCode();
      if (OrderHistoryPageSize != 0) hash ^= OrderHistoryPageSize.GetHashCode();
      if (MaxBalanceHistoryDays != 0) hash ^= MaxBalanceHistoryDays.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payment);
      }
      if (currency_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Currency);
      }
      if (MaxOrderSearchResult != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxOrderSearchResult);
      }
      if (OrderHistoryPageSize != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OrderHistoryPageSize);
      }
      if (MaxBalanceHistoryDays != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxBalanceHistoryDays);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payment);
      }
      if (currency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Currency);
      }
      if (MaxOrderSearchResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOrderSearchResult);
      }
      if (OrderHistoryPageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderHistoryPageSize);
      }
      if (MaxBalanceHistoryDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBalanceHistoryDays);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopConfig other) {
      if (other == null) {
        return;
      }
      if (other.payment_ != null) {
        if (payment_ == null) {
          payment_ = new global::Tbadmin.PaymentConfig();
        }
        Payment.MergeFrom(other.Payment);
      }
      if (other.currency_ != null) {
        if (currency_ == null) {
          currency_ = new global::Tbadmin.CurrencyConfig();
        }
        Currency.MergeFrom(other.Currency);
      }
      if (other.MaxOrderSearchResult != 0) {
        MaxOrderSearchResult = other.MaxOrderSearchResult;
      }
      if (other.OrderHistoryPageSize != 0) {
        OrderHistoryPageSize = other.OrderHistoryPageSize;
      }
      if (other.MaxBalanceHistoryDays != 0) {
        MaxBalanceHistoryDays = other.MaxBalanceHistoryDays;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (payment_ == null) {
              payment_ = new global::Tbadmin.PaymentConfig();
            }
            input.ReadMessage(payment_);
            break;
          }
          case 18: {
            if (currency_ == null) {
              currency_ = new global::Tbadmin.CurrencyConfig();
            }
            input.ReadMessage(currency_);
            break;
          }
          case 80: {
            MaxOrderSearchResult = input.ReadInt32();
            break;
          }
          case 88: {
            OrderHistoryPageSize = input.ReadInt32();
            break;
          }
          case 96: {
            MaxBalanceHistoryDays = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventConfig : pb::IMessage<EventConfig> {
    private static readonly pb::MessageParser<EventConfig> _parser = new pb::MessageParser<EventConfig>(() => new EventConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventConfig(EventConfig other) : this() {
      changeWaitTimeoutMs_ = other.changeWaitTimeoutMs_;
      eventExpiryMs_ = other.eventExpiryMs_;
      userKeyExpirySec_ = other.userKeyExpirySec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventConfig Clone() {
      return new EventConfig(this);
    }

    /// <summary>Field number for the "change_wait_timeout_ms" field.</summary>
    public const int ChangeWaitTimeoutMsFieldNumber = 10;
    private int changeWaitTimeoutMs_;
    /// <summary>
    /// Milliseconds that RPCs waiting on changes are
    /// allowed to wait before giving up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeWaitTimeoutMs {
      get { return changeWaitTimeoutMs_; }
      set {
        changeWaitTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "event_expiry_ms" field.</summary>
    public const int EventExpiryMsFieldNumber = 11;
    private int eventExpiryMs_;
    /// <summary>
    /// Default lifetime of time-limited events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventExpiryMs {
      get { return eventExpiryMs_; }
      set {
        eventExpiryMs_ = value;
      }
    }

    /// <summary>Field number for the "user_key_expiry_sec" field.</summary>
    public const int UserKeyExpirySecFieldNumber = 12;
    private int userKeyExpirySec_;
    /// <summary>
    /// Default lifetime of user event queue keys themselves.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserKeyExpirySec {
      get { return userKeyExpirySec_; }
      set {
        userKeyExpirySec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangeWaitTimeoutMs != other.ChangeWaitTimeoutMs) return false;
      if (EventExpiryMs != other.EventExpiryMs) return false;
      if (UserKeyExpirySec != other.UserKeyExpirySec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangeWaitTimeoutMs != 0) hash ^= ChangeWaitTimeoutMs.GetHashCode();
      if (EventExpiryMs != 0) hash ^= EventExpiryMs.GetHashCode();
      if (UserKeyExpirySec != 0) hash ^= UserKeyExpirySec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeWaitTimeoutMs != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ChangeWaitTimeoutMs);
      }
      if (EventExpiryMs != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EventExpiryMs);
      }
      if (UserKeyExpirySec != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(UserKeyExpirySec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangeWaitTimeoutMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeWaitTimeoutMs);
      }
      if (EventExpiryMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventExpiryMs);
      }
      if (UserKeyExpirySec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserKeyExpirySec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventConfig other) {
      if (other == null) {
        return;
      }
      if (other.ChangeWaitTimeoutMs != 0) {
        ChangeWaitTimeoutMs = other.ChangeWaitTimeoutMs;
      }
      if (other.EventExpiryMs != 0) {
        EventExpiryMs = other.EventExpiryMs;
      }
      if (other.UserKeyExpirySec != 0) {
        UserKeyExpirySec = other.UserKeyExpirySec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            ChangeWaitTimeoutMs = input.ReadInt32();
            break;
          }
          case 88: {
            EventExpiryMs = input.ReadInt32();
            break;
          }
          case 96: {
            UserKeyExpirySec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditConfig : pb::IMessage<AuditConfig> {
    private static readonly pb::MessageParser<AuditConfig> _parser = new pb::MessageParser<AuditConfig>(() => new AuditConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditConfig(AuditConfig other) : this() {
      maxAuditSearchResult_ = other.maxAuditSearchResult_;
      maxAuditSearchDays_ = other.maxAuditSearchDays_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditConfig Clone() {
      return new AuditConfig(this);
    }

    /// <summary>Field number for the "max_audit_search_result" field.</summary>
    public const int MaxAuditSearchResultFieldNumber = 1;
    private int maxAuditSearchResult_;
    /// <summary>
    /// Most number of results to return from an audit query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAuditSearchResult {
      get { return maxAuditSearchResult_; }
      set {
        maxAuditSearchResult_ = value;
      }
    }

    /// <summary>Field number for the "max_audit_search_days" field.</summary>
    public const int MaxAuditSearchDaysFieldNumber = 2;
    private int maxAuditSearchDays_;
    /// <summary>
    /// Largest time range allowed for a search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAuditSearchDays {
      get { return maxAuditSearchDays_; }
      set {
        maxAuditSearchDays_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxAuditSearchResult != other.MaxAuditSearchResult) return false;
      if (MaxAuditSearchDays != other.MaxAuditSearchDays) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxAuditSearchResult != 0) hash ^= MaxAuditSearchResult.GetHashCode();
      if (MaxAuditSearchDays != 0) hash ^= MaxAuditSearchDays.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxAuditSearchResult != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxAuditSearchResult);
      }
      if (MaxAuditSearchDays != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxAuditSearchDays);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxAuditSearchResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAuditSearchResult);
      }
      if (MaxAuditSearchDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAuditSearchDays);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxAuditSearchResult != 0) {
        MaxAuditSearchResult = other.MaxAuditSearchResult;
      }
      if (other.MaxAuditSearchDays != 0) {
        MaxAuditSearchDays = other.MaxAuditSearchDays;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxAuditSearchResult = input.ReadInt32();
            break;
          }
          case 16: {
            MaxAuditSearchDays = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrashReportConfig : pb::IMessage<CrashReportConfig> {
    private static readonly pb::MessageParser<CrashReportConfig> _parser = new pb::MessageParser<CrashReportConfig>(() => new CrashReportConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrashReportConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrashReportConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrashReportConfig(CrashReportConfig other) : this() {
      shouldStoreCrashBundles_ = other.shouldStoreCrashBundles_;
      maxVersionsToKeep_ = other.maxVersionsToKeep_;
      pollingInterval_ = other.pollingInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrashReportConfig Clone() {
      return new CrashReportConfig(this);
    }

    /// <summary>Field number for the "should_store_crash_bundles" field.</summary>
    public const int ShouldStoreCrashBundlesFieldNumber = 1;
    private bool shouldStoreCrashBundles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldStoreCrashBundles {
      get { return shouldStoreCrashBundles_; }
      set {
        shouldStoreCrashBundles_ = value;
      }
    }

    /// <summary>Field number for the "max_versions_to_keep" field.</summary>
    public const int MaxVersionsToKeepFieldNumber = 2;
    private int maxVersionsToKeep_;
    /// <summary>
    /// the number of build versions for each client app to keep the crash redis records around for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxVersionsToKeep {
      get { return maxVersionsToKeep_; }
      set {
        maxVersionsToKeep_ = value;
      }
    }

    /// <summary>Field number for the "polling_interval" field.</summary>
    public const int PollingIntervalFieldNumber = 3;
    private int pollingInterval_;
    /// <summary>
    /// the interval to check for new crash reports to symbolicate, in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PollingInterval {
      get { return pollingInterval_; }
      set {
        pollingInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrashReportConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrashReportConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShouldStoreCrashBundles != other.ShouldStoreCrashBundles) return false;
      if (MaxVersionsToKeep != other.MaxVersionsToKeep) return false;
      if (PollingInterval != other.PollingInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShouldStoreCrashBundles != false) hash ^= ShouldStoreCrashBundles.GetHashCode();
      if (MaxVersionsToKeep != 0) hash ^= MaxVersionsToKeep.GetHashCode();
      if (PollingInterval != 0) hash ^= PollingInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShouldStoreCrashBundles != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShouldStoreCrashBundles);
      }
      if (MaxVersionsToKeep != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxVersionsToKeep);
      }
      if (PollingInterval != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PollingInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShouldStoreCrashBundles != false) {
        size += 1 + 1;
      }
      if (MaxVersionsToKeep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxVersionsToKeep);
      }
      if (PollingInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PollingInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrashReportConfig other) {
      if (other == null) {
        return;
      }
      if (other.ShouldStoreCrashBundles != false) {
        ShouldStoreCrashBundles = other.ShouldStoreCrashBundles;
      }
      if (other.MaxVersionsToKeep != 0) {
        MaxVersionsToKeep = other.MaxVersionsToKeep;
      }
      if (other.PollingInterval != 0) {
        PollingInterval = other.PollingInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShouldStoreCrashBundles = input.ReadBool();
            break;
          }
          case 16: {
            MaxVersionsToKeep = input.ReadInt32();
            break;
          }
          case 24: {
            PollingInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Flags to provide (mainly) backwards compatibility during server rollouts.
  /// </summary>
  public sealed partial class ServerRolloutFlags : pb::IMessage<ServerRolloutFlags> {
    private static readonly pb::MessageParser<ServerRolloutFlags> _parser = new pb::MessageParser<ServerRolloutFlags>(() => new ServerRolloutFlags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRolloutFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRolloutFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRolloutFlags(ServerRolloutFlags other) : this() {
      securePortalUdpTraffic_ = other.securePortalUdpTraffic_;
      DeprecatedAutoResumeGetMatch_ = other.DeprecatedAutoResumeGetMatch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRolloutFlags Clone() {
      return new ServerRolloutFlags(this);
    }

    /// <summary>Field number for the "secure_portal_udp_traffic" field.</summary>
    public const int SecurePortalUdpTrafficFieldNumber = 2;
    private bool securePortalUdpTraffic_;
    /// <summary>
    /// Provide hashing secret for clients, and check signatures of
    /// incoming UDP packets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SecurePortalUdpTraffic {
      get { return securePortalUdpTraffic_; }
      set {
        securePortalUdpTraffic_ = value;
      }
    }

    /// <summary>Field number for the "__deprecated_auto_resume_get_match" field.</summary>
    public const int DeprecatedAutoResumeGetMatchFieldNumber = 1;
    private bool DeprecatedAutoResumeGetMatch_;
    /// <summary>
    /// Search for a ticket to get back into queue at an old spot
    /// even when using the GetMatch rpc.
    /// Purpose: backwards compatibility while waiting for client
    ///          build to use ResumeGetMatch for auto-requeueing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeprecatedAutoResumeGetMatch {
      get { return DeprecatedAutoResumeGetMatch_; }
      set {
        DeprecatedAutoResumeGetMatch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRolloutFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRolloutFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecurePortalUdpTraffic != other.SecurePortalUdpTraffic) return false;
      if (DeprecatedAutoResumeGetMatch != other.DeprecatedAutoResumeGetMatch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SecurePortalUdpTraffic != false) hash ^= SecurePortalUdpTraffic.GetHashCode();
      if (DeprecatedAutoResumeGetMatch != false) hash ^= DeprecatedAutoResumeGetMatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedAutoResumeGetMatch != false) {
        output.WriteRawTag(8);
        output.WriteBool(DeprecatedAutoResumeGetMatch);
      }
      if (SecurePortalUdpTraffic != false) {
        output.WriteRawTag(16);
        output.WriteBool(SecurePortalUdpTraffic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SecurePortalUdpTraffic != false) {
        size += 1 + 1;
      }
      if (DeprecatedAutoResumeGetMatch != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRolloutFlags other) {
      if (other == null) {
        return;
      }
      if (other.SecurePortalUdpTraffic != false) {
        SecurePortalUdpTraffic = other.SecurePortalUdpTraffic;
      }
      if (other.DeprecatedAutoResumeGetMatch != false) {
        DeprecatedAutoResumeGetMatch = other.DeprecatedAutoResumeGetMatch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeprecatedAutoResumeGetMatch = input.ReadBool();
            break;
          }
          case 16: {
            SecurePortalUdpTraffic = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesyncReportConfig : pb::IMessage<DesyncReportConfig> {
    private static readonly pb::MessageParser<DesyncReportConfig> _parser = new pb::MessageParser<DesyncReportConfig>(() => new DesyncReportConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesyncReportConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportConfig(DesyncReportConfig other) : this() {
      pollingInterval_ = other.pollingInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesyncReportConfig Clone() {
      return new DesyncReportConfig(this);
    }

    /// <summary>Field number for the "polling_interval" field.</summary>
    public const int PollingIntervalFieldNumber = 3;
    private int pollingInterval_;
    /// <summary>
    /// the interval to check for new desync reports to process, in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PollingInterval {
      get { return pollingInterval_; }
      set {
        pollingInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesyncReportConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesyncReportConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PollingInterval != other.PollingInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PollingInterval != 0) hash ^= PollingInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PollingInterval != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PollingInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PollingInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PollingInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesyncReportConfig other) {
      if (other == null) {
        return;
      }
      if (other.PollingInterval != 0) {
        PollingInterval = other.PollingInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            PollingInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for trimming database history tables which are accumulated externally.
  /// </summary>
  public sealed partial class ExportTrimConfig : pb::IMessage<ExportTrimConfig> {
    private static readonly pb::MessageParser<ExportTrimConfig> _parser = new pb::MessageParser<ExportTrimConfig>(() => new ExportTrimConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportTrimConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTrimConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTrimConfig(ExportTrimConfig other) : this() {
      trimEnabled_ = other.trimEnabled_;
      minAgeDays_ = other.minAgeDays_;
      batchSize_ = other.batchSize_;
      trimIntervalMins_ = other.trimIntervalMins_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTrimConfig Clone() {
      return new ExportTrimConfig(this);
    }

    /// <summary>Field number for the "trim_enabled" field.</summary>
    public const int TrimEnabledFieldNumber = 1;
    private bool trimEnabled_;
    /// <summary>
    /// Whether database table trimming is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrimEnabled {
      get { return trimEnabled_; }
      set {
        trimEnabled_ = value;
      }
    }

    /// <summary>Field number for the "min_age_days" field.</summary>
    public const int MinAgeDaysFieldNumber = 2;
    private int minAgeDays_;
    /// <summary>
    /// Don't look for records younger than this age.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinAgeDays {
      get { return minAgeDays_; }
      set {
        minAgeDays_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 3;
    private int batchSize_;
    /// <summary>
    /// Process at most this many records at once.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "trim_interval_mins" field.</summary>
    public const int TrimIntervalMinsFieldNumber = 4;
    private int trimIntervalMins_;
    /// <summary>
    /// How often to trim the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrimIntervalMins {
      get { return trimIntervalMins_; }
      set {
        trimIntervalMins_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportTrimConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportTrimConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrimEnabled != other.TrimEnabled) return false;
      if (MinAgeDays != other.MinAgeDays) return false;
      if (BatchSize != other.BatchSize) return false;
      if (TrimIntervalMins != other.TrimIntervalMins) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrimEnabled != false) hash ^= TrimEnabled.GetHashCode();
      if (MinAgeDays != 0) hash ^= MinAgeDays.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (TrimIntervalMins != 0) hash ^= TrimIntervalMins.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrimEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(TrimEnabled);
      }
      if (MinAgeDays != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinAgeDays);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BatchSize);
      }
      if (TrimIntervalMins != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TrimIntervalMins);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrimEnabled != false) {
        size += 1 + 1;
      }
      if (MinAgeDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinAgeDays);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSize);
      }
      if (TrimIntervalMins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrimIntervalMins);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportTrimConfig other) {
      if (other == null) {
        return;
      }
      if (other.TrimEnabled != false) {
        TrimEnabled = other.TrimEnabled;
      }
      if (other.MinAgeDays != 0) {
        MinAgeDays = other.MinAgeDays;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.TrimIntervalMins != 0) {
        TrimIntervalMins = other.TrimIntervalMins;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrimEnabled = input.ReadBool();
            break;
          }
          case 16: {
            MinAgeDays = input.ReadInt32();
            break;
          }
          case 24: {
            BatchSize = input.ReadInt32();
            break;
          }
          case 32: {
            TrimIntervalMins = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// AppConfig contains application reference data and behavioral settings.
  /// It is stored in the database and is applied universally by all servers.
  ///
  /// It should NOT contain highly sensitive information such as credentials
  /// or key material.
  /// </summary>
  public sealed partial class AppConfig : pb::IMessage<AppConfig> {
    private static readonly pb::MessageParser<AppConfig> _parser = new pb::MessageParser<AppConfig>(() => new AppConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppConfig(AppConfig other) : this() {
      AccountConfig = other.accountConfig_ != null ? other.AccountConfig.Clone() : null;
      MatchConfig = other.matchConfig_ != null ? other.MatchConfig.Clone() : null;
      ShopConfig = other.shopConfig_ != null ? other.ShopConfig.Clone() : null;
      EventConfig = other.eventConfig_ != null ? other.EventConfig.Clone() : null;
      AuditConfig = other.auditConfig_ != null ? other.AuditConfig.Clone() : null;
      LobbyConfig = other.lobbyConfig_ != null ? other.LobbyConfig.Clone() : null;
      CrashReportConfig = other.crashReportConfig_ != null ? other.CrashReportConfig.Clone() : null;
      ServerRolloutFlags = other.serverRolloutFlags_ != null ? other.ServerRolloutFlags.Clone() : null;
      DesyncReportConfig = other.desyncReportConfig_ != null ? other.DesyncReportConfig.Clone() : null;
      ExportTrimConfig = other.exportTrimConfig_ != null ? other.ExportTrimConfig.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppConfig Clone() {
      return new AppConfig(this);
    }

    /// <summary>Field number for the "account_config" field.</summary>
    public const int AccountConfigFieldNumber = 1;
    private global::Tbadmin.AccountConfig accountConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AccountConfig AccountConfig {
      get { return accountConfig_; }
      set {
        accountConfig_ = value;
      }
    }

    /// <summary>Field number for the "match_config" field.</summary>
    public const int MatchConfigFieldNumber = 2;
    private global::Tbadmin.MatchServiceConfig matchConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MatchServiceConfig MatchConfig {
      get { return matchConfig_; }
      set {
        matchConfig_ = value;
      }
    }

    /// <summary>Field number for the "shop_config" field.</summary>
    public const int ShopConfigFieldNumber = 3;
    private global::Tbadmin.ShopConfig shopConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.ShopConfig ShopConfig {
      get { return shopConfig_; }
      set {
        shopConfig_ = value;
      }
    }

    /// <summary>Field number for the "event_config" field.</summary>
    public const int EventConfigFieldNumber = 4;
    private global::Tbadmin.EventConfig eventConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.EventConfig EventConfig {
      get { return eventConfig_; }
      set {
        eventConfig_ = value;
      }
    }

    /// <summary>Field number for the "audit_config" field.</summary>
    public const int AuditConfigFieldNumber = 5;
    private global::Tbadmin.AuditConfig auditConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.AuditConfig AuditConfig {
      get { return auditConfig_; }
      set {
        auditConfig_ = value;
      }
    }

    /// <summary>Field number for the "lobby_config" field.</summary>
    public const int LobbyConfigFieldNumber = 6;
    private global::Tbadmin.LobbyServiceConfig lobbyConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.LobbyServiceConfig LobbyConfig {
      get { return lobbyConfig_; }
      set {
        lobbyConfig_ = value;
      }
    }

    /// <summary>Field number for the "crash_report_config" field.</summary>
    public const int CrashReportConfigFieldNumber = 7;
    private global::Tbadmin.CrashReportConfig crashReportConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.CrashReportConfig CrashReportConfig {
      get { return crashReportConfig_; }
      set {
        crashReportConfig_ = value;
      }
    }

    /// <summary>Field number for the "server_rollout_flags" field.</summary>
    public const int ServerRolloutFlagsFieldNumber = 8;
    private global::Tbadmin.ServerRolloutFlags serverRolloutFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.ServerRolloutFlags ServerRolloutFlags {
      get { return serverRolloutFlags_; }
      set {
        serverRolloutFlags_ = value;
      }
    }

    /// <summary>Field number for the "desync_report_config" field.</summary>
    public const int DesyncReportConfigFieldNumber = 9;
    private global::Tbadmin.DesyncReportConfig desyncReportConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.DesyncReportConfig DesyncReportConfig {
      get { return desyncReportConfig_; }
      set {
        desyncReportConfig_ = value;
      }
    }

    /// <summary>Field number for the "export_trim_config" field.</summary>
    public const int ExportTrimConfigFieldNumber = 10;
    private global::Tbadmin.ExportTrimConfig exportTrimConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.ExportTrimConfig ExportTrimConfig {
      get { return exportTrimConfig_; }
      set {
        exportTrimConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccountConfig, other.AccountConfig)) return false;
      if (!object.Equals(MatchConfig, other.MatchConfig)) return false;
      if (!object.Equals(ShopConfig, other.ShopConfig)) return false;
      if (!object.Equals(EventConfig, other.EventConfig)) return false;
      if (!object.Equals(AuditConfig, other.AuditConfig)) return false;
      if (!object.Equals(LobbyConfig, other.LobbyConfig)) return false;
      if (!object.Equals(CrashReportConfig, other.CrashReportConfig)) return false;
      if (!object.Equals(ServerRolloutFlags, other.ServerRolloutFlags)) return false;
      if (!object.Equals(DesyncReportConfig, other.DesyncReportConfig)) return false;
      if (!object.Equals(ExportTrimConfig, other.ExportTrimConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accountConfig_ != null) hash ^= AccountConfig.GetHashCode();
      if (matchConfig_ != null) hash ^= MatchConfig.GetHashCode();
      if (shopConfig_ != null) hash ^= ShopConfig.GetHashCode();
      if (eventConfig_ != null) hash ^= EventConfig.GetHashCode();
      if (auditConfig_ != null) hash ^= AuditConfig.GetHashCode();
      if (lobbyConfig_ != null) hash ^= LobbyConfig.GetHashCode();
      if (crashReportConfig_ != null) hash ^= CrashReportConfig.GetHashCode();
      if (serverRolloutFlags_ != null) hash ^= ServerRolloutFlags.GetHashCode();
      if (desyncReportConfig_ != null) hash ^= DesyncReportConfig.GetHashCode();
      if (exportTrimConfig_ != null) hash ^= ExportTrimConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accountConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccountConfig);
      }
      if (matchConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MatchConfig);
      }
      if (shopConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ShopConfig);
      }
      if (eventConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EventConfig);
      }
      if (auditConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AuditConfig);
      }
      if (lobbyConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LobbyConfig);
      }
      if (crashReportConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CrashReportConfig);
      }
      if (serverRolloutFlags_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ServerRolloutFlags);
      }
      if (desyncReportConfig_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DesyncReportConfig);
      }
      if (exportTrimConfig_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ExportTrimConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accountConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountConfig);
      }
      if (matchConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchConfig);
      }
      if (shopConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopConfig);
      }
      if (eventConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventConfig);
      }
      if (auditConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuditConfig);
      }
      if (lobbyConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyConfig);
      }
      if (crashReportConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrashReportConfig);
      }
      if (serverRolloutFlags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerRolloutFlags);
      }
      if (desyncReportConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesyncReportConfig);
      }
      if (exportTrimConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExportTrimConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppConfig other) {
      if (other == null) {
        return;
      }
      if (other.accountConfig_ != null) {
        if (accountConfig_ == null) {
          accountConfig_ = new global::Tbadmin.AccountConfig();
        }
        AccountConfig.MergeFrom(other.AccountConfig);
      }
      if (other.matchConfig_ != null) {
        if (matchConfig_ == null) {
          matchConfig_ = new global::Tbadmin.MatchServiceConfig();
        }
        MatchConfig.MergeFrom(other.MatchConfig);
      }
      if (other.shopConfig_ != null) {
        if (shopConfig_ == null) {
          shopConfig_ = new global::Tbadmin.ShopConfig();
        }
        ShopConfig.MergeFrom(other.ShopConfig);
      }
      if (other.eventConfig_ != null) {
        if (eventConfig_ == null) {
          eventConfig_ = new global::Tbadmin.EventConfig();
        }
        EventConfig.MergeFrom(other.EventConfig);
      }
      if (other.auditConfig_ != null) {
        if (auditConfig_ == null) {
          auditConfig_ = new global::Tbadmin.AuditConfig();
        }
        AuditConfig.MergeFrom(other.AuditConfig);
      }
      if (other.lobbyConfig_ != null) {
        if (lobbyConfig_ == null) {
          lobbyConfig_ = new global::Tbadmin.LobbyServiceConfig();
        }
        LobbyConfig.MergeFrom(other.LobbyConfig);
      }
      if (other.crashReportConfig_ != null) {
        if (crashReportConfig_ == null) {
          crashReportConfig_ = new global::Tbadmin.CrashReportConfig();
        }
        CrashReportConfig.MergeFrom(other.CrashReportConfig);
      }
      if (other.serverRolloutFlags_ != null) {
        if (serverRolloutFlags_ == null) {
          serverRolloutFlags_ = new global::Tbadmin.ServerRolloutFlags();
        }
        ServerRolloutFlags.MergeFrom(other.ServerRolloutFlags);
      }
      if (other.desyncReportConfig_ != null) {
        if (desyncReportConfig_ == null) {
          desyncReportConfig_ = new global::Tbadmin.DesyncReportConfig();
        }
        DesyncReportConfig.MergeFrom(other.DesyncReportConfig);
      }
      if (other.exportTrimConfig_ != null) {
        if (exportTrimConfig_ == null) {
          exportTrimConfig_ = new global::Tbadmin.ExportTrimConfig();
        }
        ExportTrimConfig.MergeFrom(other.ExportTrimConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accountConfig_ == null) {
              accountConfig_ = new global::Tbadmin.AccountConfig();
            }
            input.ReadMessage(accountConfig_);
            break;
          }
          case 18: {
            if (matchConfig_ == null) {
              matchConfig_ = new global::Tbadmin.MatchServiceConfig();
            }
            input.ReadMessage(matchConfig_);
            break;
          }
          case 26: {
            if (shopConfig_ == null) {
              shopConfig_ = new global::Tbadmin.ShopConfig();
            }
            input.ReadMessage(shopConfig_);
            break;
          }
          case 34: {
            if (eventConfig_ == null) {
              eventConfig_ = new global::Tbadmin.EventConfig();
            }
            input.ReadMessage(eventConfig_);
            break;
          }
          case 42: {
            if (auditConfig_ == null) {
              auditConfig_ = new global::Tbadmin.AuditConfig();
            }
            input.ReadMessage(auditConfig_);
            break;
          }
          case 50: {
            if (lobbyConfig_ == null) {
              lobbyConfig_ = new global::Tbadmin.LobbyServiceConfig();
            }
            input.ReadMessage(lobbyConfig_);
            break;
          }
          case 58: {
            if (crashReportConfig_ == null) {
              crashReportConfig_ = new global::Tbadmin.CrashReportConfig();
            }
            input.ReadMessage(crashReportConfig_);
            break;
          }
          case 66: {
            if (serverRolloutFlags_ == null) {
              serverRolloutFlags_ = new global::Tbadmin.ServerRolloutFlags();
            }
            input.ReadMessage(serverRolloutFlags_);
            break;
          }
          case 74: {
            if (desyncReportConfig_ == null) {
              desyncReportConfig_ = new global::Tbadmin.DesyncReportConfig();
            }
            input.ReadMessage(desyncReportConfig_);
            break;
          }
          case 82: {
            if (exportTrimConfig_ == null) {
              exportTrimConfig_ = new global::Tbadmin.ExportTrimConfig();
            }
            input.ReadMessage(exportTrimConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FEContentConfig : pb::IMessage<FEContentConfig> {
    private static readonly pb::MessageParser<FEContentConfig> _parser = new pb::MessageParser<FEContentConfig>(() => new FEContentConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEContentConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEContentConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEContentConfig(FEContentConfig other) : this() {
      dataDir_ = other.dataDir_;
      staticDir_ = other.staticDir_;
      develMode_ = other.develMode_;
      messageDir_ = other.messageDir_;
      applicationName_ = other.applicationName_;
      recaptchaSiteKey_ = other.recaptchaSiteKey_;
      recaptchaSecretKey_ = other.recaptchaSecretKey_;
      recaptchaVerifyUrl_ = other.recaptchaVerifyUrl_;
      recaptchaProxyUrl_ = other.recaptchaProxyUrl_;
      recaptchaFailureThreshold_ = other.recaptchaFailureThreshold_;
      canonicalHostname_ = other.canonicalHostname_;
      canonicalScheme_ = other.canonicalScheme_;
      internalErrorTemplate_ = other.internalErrorTemplate_;
      notFoundTemplate_ = other.notFoundTemplate_;
      loginRedirectPath_ = other.loginRedirectPath_;
      launcherDownloadUrl_ = other.launcherDownloadUrl_;
      forumUrl_ = other.forumUrl_;
      landingRedirectUrl_ = other.landingRedirectUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEContentConfig Clone() {
      return new FEContentConfig(this);
    }

    /// <summary>Field number for the "data_dir" field.</summary>
    public const int DataDirFieldNumber = 1;
    private string dataDir_ = "";
    /// <summary>
    /// Directory containing templates and data files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDir {
      get { return dataDir_; }
      set {
        dataDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "static_dir" field.</summary>
    public const int StaticDirFieldNumber = 2;
    private string staticDir_ = "";
    /// <summary>
    /// Root for static web content (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StaticDir {
      get { return staticDir_; }
      set {
        staticDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devel_mode" field.</summary>
    public const int DevelModeFieldNumber = 3;
    private bool develMode_;
    /// <summary>
    /// If enabled, reload templates on every request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DevelMode {
      get { return develMode_; }
      set {
        develMode_ = value;
      }
    }

    /// <summary>Field number for the "message_dir" field.</summary>
    public const int MessageDirFieldNumber = 4;
    private string messageDir_ = "";
    /// <summary>
    /// Directory where localization resources can be found.
    /// tb.properties must be present here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageDir {
      get { return messageDir_; }
      set {
        messageDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_name" field.</summary>
    public const int ApplicationNameFieldNumber = 5;
    private string applicationName_ = "";
    /// <summary>
    /// Name of the application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApplicationName {
      get { return applicationName_; }
      set {
        applicationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recaptcha_site_key" field.</summary>
    public const int RecaptchaSiteKeyFieldNumber = 6;
    private string recaptchaSiteKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecaptchaSiteKey {
      get { return recaptchaSiteKey_; }
      set {
        recaptchaSiteKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recaptcha_secret_key" field.</summary>
    public const int RecaptchaSecretKeyFieldNumber = 7;
    private string recaptchaSecretKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecaptchaSecretKey {
      get { return recaptchaSecretKey_; }
      set {
        recaptchaSecretKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recaptcha_verify_url" field.</summary>
    public const int RecaptchaVerifyUrlFieldNumber = 8;
    private string recaptchaVerifyUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecaptchaVerifyUrl {
      get { return recaptchaVerifyUrl_; }
      set {
        recaptchaVerifyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recaptcha_proxy_url" field.</summary>
    public const int RecaptchaProxyUrlFieldNumber = 9;
    private string recaptchaProxyUrl_ = "";
    /// <summary>
    /// HTTP(s) proxy to use when querying the recaptcha URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecaptchaProxyUrl {
      get { return recaptchaProxyUrl_; }
      set {
        recaptchaProxyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recaptcha_failure_threshold" field.</summary>
    public const int RecaptchaFailureThresholdFieldNumber = 10;
    private int recaptchaFailureThreshold_;
    /// <summary>
    /// After how many form submission failures should you have to solve another CAPTCHA?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecaptchaFailureThreshold {
      get { return recaptchaFailureThreshold_; }
      set {
        recaptchaFailureThreshold_ = value;
      }
    }

    /// <summary>Field number for the "canonical_hostname" field.</summary>
    public const int CanonicalHostnameFieldNumber = 11;
    private string canonicalHostname_ = "";
    /// <summary>
    /// If set, send 301 redirect requests NOT using this host name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CanonicalHostname {
      get { return canonicalHostname_; }
      set {
        canonicalHostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canonical_scheme" field.</summary>
    public const int CanonicalSchemeFieldNumber = 12;
    private string canonicalScheme_ = "";
    /// <summary>
    /// URL scheme to use when redirecting to canonical_hostname.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CanonicalScheme {
      get { return canonicalScheme_; }
      set {
        canonicalScheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "internal_error_template" field.</summary>
    public const int InternalErrorTemplateFieldNumber = 20;
    private string internalErrorTemplate_ = "";
    /// <summary>
    /// Template to use for content of a 503 Internal Server Error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalErrorTemplate {
      get { return internalErrorTemplate_; }
      set {
        internalErrorTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "not_found_template" field.</summary>
    public const int NotFoundTemplateFieldNumber = 21;
    private string notFoundTemplate_ = "";
    /// <summary>
    /// Template for 404 not found page content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotFoundTemplate {
      get { return notFoundTemplate_; }
      set {
        notFoundTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login_redirect_path" field.</summary>
    public const int LoginRedirectPathFieldNumber = 22;
    private string loginRedirectPath_ = "";
    /// <summary>
    /// Path to redirect to when an authorized-only page is
    /// requested with no valid session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginRedirectPath {
      get { return loginRedirectPath_; }
      set {
        loginRedirectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "launcher_download_url" field.</summary>
    public const int LauncherDownloadUrlFieldNumber = 30;
    private string launcherDownloadUrl_ = "";
    /// <summary>
    /// Link to download the launcher for logged-in users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LauncherDownloadUrl {
      get { return launcherDownloadUrl_; }
      set {
        launcherDownloadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forum_url" field.</summary>
    public const int ForumUrlFieldNumber = 31;
    private string forumUrl_ = "";
    /// <summary>
    /// Link to the forum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForumUrl {
      get { return forumUrl_; }
      set {
        forumUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "landing_redirect_url" field.</summary>
    public const int LandingRedirectUrlFieldNumber = 40;
    private string landingRedirectUrl_ = "";
    /// <summary>
    /// If set, redirect requests to the landing page to here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LandingRedirectUrl {
      get { return landingRedirectUrl_; }
      set {
        landingRedirectUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEContentConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEContentConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataDir != other.DataDir) return false;
      if (StaticDir != other.StaticDir) return false;
      if (DevelMode != other.DevelMode) return false;
      if (MessageDir != other.MessageDir) return false;
      if (ApplicationName != other.ApplicationName) return false;
      if (RecaptchaSiteKey != other.RecaptchaSiteKey) return false;
      if (RecaptchaSecretKey != other.RecaptchaSecretKey) return false;
      if (RecaptchaVerifyUrl != other.RecaptchaVerifyUrl) return false;
      if (RecaptchaProxyUrl != other.RecaptchaProxyUrl) return false;
      if (RecaptchaFailureThreshold != other.RecaptchaFailureThreshold) return false;
      if (CanonicalHostname != other.CanonicalHostname) return false;
      if (CanonicalScheme != other.CanonicalScheme) return false;
      if (InternalErrorTemplate != other.InternalErrorTemplate) return false;
      if (NotFoundTemplate != other.NotFoundTemplate) return false;
      if (LoginRedirectPath != other.LoginRedirectPath) return false;
      if (LauncherDownloadUrl != other.LauncherDownloadUrl) return false;
      if (ForumUrl != other.ForumUrl) return false;
      if (LandingRedirectUrl != other.LandingRedirectUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataDir.Length != 0) hash ^= DataDir.GetHashCode();
      if (StaticDir.Length != 0) hash ^= StaticDir.GetHashCode();
      if (DevelMode != false) hash ^= DevelMode.GetHashCode();
      if (MessageDir.Length != 0) hash ^= MessageDir.GetHashCode();
      if (ApplicationName.Length != 0) hash ^= ApplicationName.GetHashCode();
      if (RecaptchaSiteKey.Length != 0) hash ^= RecaptchaSiteKey.GetHashCode();
      if (RecaptchaSecretKey.Length != 0) hash ^= RecaptchaSecretKey.GetHashCode();
      if (RecaptchaVerifyUrl.Length != 0) hash ^= RecaptchaVerifyUrl.GetHashCode();
      if (RecaptchaProxyUrl.Length != 0) hash ^= RecaptchaProxyUrl.GetHashCode();
      if (RecaptchaFailureThreshold != 0) hash ^= RecaptchaFailureThreshold.GetHashCode();
      if (CanonicalHostname.Length != 0) hash ^= CanonicalHostname.GetHashCode();
      if (CanonicalScheme.Length != 0) hash ^= CanonicalScheme.GetHashCode();
      if (InternalErrorTemplate.Length != 0) hash ^= InternalErrorTemplate.GetHashCode();
      if (NotFoundTemplate.Length != 0) hash ^= NotFoundTemplate.GetHashCode();
      if (LoginRedirectPath.Length != 0) hash ^= LoginRedirectPath.GetHashCode();
      if (LauncherDownloadUrl.Length != 0) hash ^= LauncherDownloadUrl.GetHashCode();
      if (ForumUrl.Length != 0) hash ^= ForumUrl.GetHashCode();
      if (LandingRedirectUrl.Length != 0) hash ^= LandingRedirectUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataDir.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataDir);
      }
      if (StaticDir.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StaticDir);
      }
      if (DevelMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(DevelMode);
      }
      if (MessageDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageDir);
      }
      if (ApplicationName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ApplicationName);
      }
      if (RecaptchaSiteKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RecaptchaSiteKey);
      }
      if (RecaptchaSecretKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RecaptchaSecretKey);
      }
      if (RecaptchaVerifyUrl.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RecaptchaVerifyUrl);
      }
      if (RecaptchaProxyUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RecaptchaProxyUrl);
      }
      if (RecaptchaFailureThreshold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RecaptchaFailureThreshold);
      }
      if (CanonicalHostname.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CanonicalHostname);
      }
      if (CanonicalScheme.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CanonicalScheme);
      }
      if (InternalErrorTemplate.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(InternalErrorTemplate);
      }
      if (NotFoundTemplate.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(NotFoundTemplate);
      }
      if (LoginRedirectPath.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(LoginRedirectPath);
      }
      if (LauncherDownloadUrl.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(LauncherDownloadUrl);
      }
      if (ForumUrl.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(ForumUrl);
      }
      if (LandingRedirectUrl.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(LandingRedirectUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDir);
      }
      if (StaticDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StaticDir);
      }
      if (DevelMode != false) {
        size += 1 + 1;
      }
      if (MessageDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageDir);
      }
      if (ApplicationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApplicationName);
      }
      if (RecaptchaSiteKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecaptchaSiteKey);
      }
      if (RecaptchaSecretKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecaptchaSecretKey);
      }
      if (RecaptchaVerifyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecaptchaVerifyUrl);
      }
      if (RecaptchaProxyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecaptchaProxyUrl);
      }
      if (RecaptchaFailureThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecaptchaFailureThreshold);
      }
      if (CanonicalHostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CanonicalHostname);
      }
      if (CanonicalScheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CanonicalScheme);
      }
      if (InternalErrorTemplate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InternalErrorTemplate);
      }
      if (NotFoundTemplate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NotFoundTemplate);
      }
      if (LoginRedirectPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LoginRedirectPath);
      }
      if (LauncherDownloadUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LauncherDownloadUrl);
      }
      if (ForumUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ForumUrl);
      }
      if (LandingRedirectUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LandingRedirectUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEContentConfig other) {
      if (other == null) {
        return;
      }
      if (other.DataDir.Length != 0) {
        DataDir = other.DataDir;
      }
      if (other.StaticDir.Length != 0) {
        StaticDir = other.StaticDir;
      }
      if (other.DevelMode != false) {
        DevelMode = other.DevelMode;
      }
      if (other.MessageDir.Length != 0) {
        MessageDir = other.MessageDir;
      }
      if (other.ApplicationName.Length != 0) {
        ApplicationName = other.ApplicationName;
      }
      if (other.RecaptchaSiteKey.Length != 0) {
        RecaptchaSiteKey = other.RecaptchaSiteKey;
      }
      if (other.RecaptchaSecretKey.Length != 0) {
        RecaptchaSecretKey = other.RecaptchaSecretKey;
      }
      if (other.RecaptchaVerifyUrl.Length != 0) {
        RecaptchaVerifyUrl = other.RecaptchaVerifyUrl;
      }
      if (other.RecaptchaProxyUrl.Length != 0) {
        RecaptchaProxyUrl = other.RecaptchaProxyUrl;
      }
      if (other.RecaptchaFailureThreshold != 0) {
        RecaptchaFailureThreshold = other.RecaptchaFailureThreshold;
      }
      if (other.CanonicalHostname.Length != 0) {
        CanonicalHostname = other.CanonicalHostname;
      }
      if (other.CanonicalScheme.Length != 0) {
        CanonicalScheme = other.CanonicalScheme;
      }
      if (other.InternalErrorTemplate.Length != 0) {
        InternalErrorTemplate = other.InternalErrorTemplate;
      }
      if (other.NotFoundTemplate.Length != 0) {
        NotFoundTemplate = other.NotFoundTemplate;
      }
      if (other.LoginRedirectPath.Length != 0) {
        LoginRedirectPath = other.LoginRedirectPath;
      }
      if (other.LauncherDownloadUrl.Length != 0) {
        LauncherDownloadUrl = other.LauncherDownloadUrl;
      }
      if (other.ForumUrl.Length != 0) {
        ForumUrl = other.ForumUrl;
      }
      if (other.LandingRedirectUrl.Length != 0) {
        LandingRedirectUrl = other.LandingRedirectUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataDir = input.ReadString();
            break;
          }
          case 18: {
            StaticDir = input.ReadString();
            break;
          }
          case 24: {
            DevelMode = input.ReadBool();
            break;
          }
          case 34: {
            MessageDir = input.ReadString();
            break;
          }
          case 42: {
            ApplicationName = input.ReadString();
            break;
          }
          case 50: {
            RecaptchaSiteKey = input.ReadString();
            break;
          }
          case 58: {
            RecaptchaSecretKey = input.ReadString();
            break;
          }
          case 66: {
            RecaptchaVerifyUrl = input.ReadString();
            break;
          }
          case 74: {
            RecaptchaProxyUrl = input.ReadString();
            break;
          }
          case 80: {
            RecaptchaFailureThreshold = input.ReadInt32();
            break;
          }
          case 90: {
            CanonicalHostname = input.ReadString();
            break;
          }
          case 98: {
            CanonicalScheme = input.ReadString();
            break;
          }
          case 162: {
            InternalErrorTemplate = input.ReadString();
            break;
          }
          case 170: {
            NotFoundTemplate = input.ReadString();
            break;
          }
          case 178: {
            LoginRedirectPath = input.ReadString();
            break;
          }
          case 242: {
            LauncherDownloadUrl = input.ReadString();
            break;
          }
          case 250: {
            ForumUrl = input.ReadString();
            break;
          }
          case 322: {
            LandingRedirectUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FEBackendConfig : pb::IMessage<FEBackendConfig> {
    private static readonly pb::MessageParser<FEBackendConfig> _parser = new pb::MessageParser<FEBackendConfig>(() => new FEBackendConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEBackendConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEBackendConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEBackendConfig(FEBackendConfig other) : this() {
      MatchClient = other.matchClient_ != null ? other.MatchClient.Clone() : null;
      appLogin_ = other.appLogin_;
      appPassword_ = other.appPassword_;
      startupWaitSec_ = other.startupWaitSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEBackendConfig Clone() {
      return new FEBackendConfig(this);
    }

    /// <summary>Field number for the "match_client" field.</summary>
    public const int MatchClientFieldNumber = 1;
    private global::Tbrpc.LBClientConfig matchClient_;
    /// <summary>
    /// Where to reach Match API servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbrpc.LBClientConfig MatchClient {
      get { return matchClient_; }
      set {
        matchClient_ = value;
      }
    }

    /// <summary>Field number for the "app_login" field.</summary>
    public const int AppLoginFieldNumber = 2;
    private string appLogin_ = "";
    /// <summary>
    /// Backend account to use for fetching application metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppLogin {
      get { return appLogin_; }
      set {
        appLogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_password" field.</summary>
    public const int AppPasswordFieldNumber = 3;
    private string appPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppPassword {
      get { return appPassword_; }
      set {
        appPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startup_wait_sec" field.</summary>
    public const int StartupWaitSecFieldNumber = 10;
    private int startupWaitSec_;
    /// <summary>
    /// How long to wait for readyness on startup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartupWaitSec {
      get { return startupWaitSec_; }
      set {
        startupWaitSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEBackendConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEBackendConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MatchClient, other.MatchClient)) return false;
      if (AppLogin != other.AppLogin) return false;
      if (AppPassword != other.AppPassword) return false;
      if (StartupWaitSec != other.StartupWaitSec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matchClient_ != null) hash ^= MatchClient.GetHashCode();
      if (AppLogin.Length != 0) hash ^= AppLogin.GetHashCode();
      if (AppPassword.Length != 0) hash ^= AppPassword.GetHashCode();
      if (StartupWaitSec != 0) hash ^= StartupWaitSec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matchClient_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatchClient);
      }
      if (AppLogin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppLogin);
      }
      if (AppPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppPassword);
      }
      if (StartupWaitSec != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(StartupWaitSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matchClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchClient);
      }
      if (AppLogin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppLogin);
      }
      if (AppPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppPassword);
      }
      if (StartupWaitSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartupWaitSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEBackendConfig other) {
      if (other == null) {
        return;
      }
      if (other.matchClient_ != null) {
        if (matchClient_ == null) {
          matchClient_ = new global::Tbrpc.LBClientConfig();
        }
        MatchClient.MergeFrom(other.MatchClient);
      }
      if (other.AppLogin.Length != 0) {
        AppLogin = other.AppLogin;
      }
      if (other.AppPassword.Length != 0) {
        AppPassword = other.AppPassword;
      }
      if (other.StartupWaitSec != 0) {
        StartupWaitSec = other.StartupWaitSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (matchClient_ == null) {
              matchClient_ = new global::Tbrpc.LBClientConfig();
            }
            input.ReadMessage(matchClient_);
            break;
          }
          case 18: {
            AppLogin = input.ReadString();
            break;
          }
          case 26: {
            AppPassword = input.ReadString();
            break;
          }
          case 80: {
            StartupWaitSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VanillaJSConnectConfig : pb::IMessage<VanillaJSConnectConfig> {
    private static readonly pb::MessageParser<VanillaJSConnectConfig> _parser = new pb::MessageParser<VanillaJSConnectConfig>(() => new VanillaJSConnectConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VanillaJSConnectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VanillaJSConnectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VanillaJSConnectConfig(VanillaJSConnectConfig other) : this() {
      clientId_ = other.clientId_;
      secret_ = other.secret_;
      maxAgeSecs_ = other.maxAgeSecs_;
      unauthRole_ = other.unauthRole_;
      blessEmailSuffix_ = other.blessEmailSuffix_;
      blessRole_ = other.blessRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VanillaJSConnectConfig Clone() {
      return new VanillaJSConnectConfig(this);
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 2;
    private string secret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_age_secs" field.</summary>
    public const int MaxAgeSecsFieldNumber = 3;
    private int maxAgeSecs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAgeSecs {
      get { return maxAgeSecs_; }
      set {
        maxAgeSecs_ = value;
      }
    }

    /// <summary>Field number for the "unauth_role" field.</summary>
    public const int UnauthRoleFieldNumber = 4;
    private string unauthRole_ = "";
    /// <summary>
    /// Role for users with 0 forum access otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnauthRole {
      get { return unauthRole_; }
      set {
        unauthRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bless_email_suffix" field.</summary>
    public const int BlessEmailSuffixFieldNumber = 10;
    private string blessEmailSuffix_ = "";
    /// <summary>
    /// Email suffix that enables the "blessed" role
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlessEmailSuffix {
      get { return blessEmailSuffix_; }
      set {
        blessEmailSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bless_role" field.</summary>
    public const int BlessRoleFieldNumber = 11;
    private string blessRole_ = "";
    /// <summary>
    /// Role that is bestowed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlessRole {
      get { return blessRole_; }
      set {
        blessRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VanillaJSConnectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VanillaJSConnectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (Secret != other.Secret) return false;
      if (MaxAgeSecs != other.MaxAgeSecs) return false;
      if (UnauthRole != other.UnauthRole) return false;
      if (BlessEmailSuffix != other.BlessEmailSuffix) return false;
      if (BlessRole != other.BlessRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (MaxAgeSecs != 0) hash ^= MaxAgeSecs.GetHashCode();
      if (UnauthRole.Length != 0) hash ^= UnauthRole.GetHashCode();
      if (BlessEmailSuffix.Length != 0) hash ^= BlessEmailSuffix.GetHashCode();
      if (BlessRole.Length != 0) hash ^= BlessRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Secret);
      }
      if (MaxAgeSecs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxAgeSecs);
      }
      if (UnauthRole.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnauthRole);
      }
      if (BlessEmailSuffix.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BlessEmailSuffix);
      }
      if (BlessRole.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BlessRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (MaxAgeSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAgeSecs);
      }
      if (UnauthRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnauthRole);
      }
      if (BlessEmailSuffix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlessEmailSuffix);
      }
      if (BlessRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlessRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VanillaJSConnectConfig other) {
      if (other == null) {
        return;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      if (other.MaxAgeSecs != 0) {
        MaxAgeSecs = other.MaxAgeSecs;
      }
      if (other.UnauthRole.Length != 0) {
        UnauthRole = other.UnauthRole;
      }
      if (other.BlessEmailSuffix.Length != 0) {
        BlessEmailSuffix = other.BlessEmailSuffix;
      }
      if (other.BlessRole.Length != 0) {
        BlessRole = other.BlessRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            Secret = input.ReadString();
            break;
          }
          case 24: {
            MaxAgeSecs = input.ReadInt32();
            break;
          }
          case 34: {
            UnauthRole = input.ReadString();
            break;
          }
          case 82: {
            BlessEmailSuffix = input.ReadString();
            break;
          }
          case 90: {
            BlessRole = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Run-time file for the tbfe web application server.
  /// </summary>
  public sealed partial class FEConfig : pb::IMessage<FEConfig> {
    private static readonly pb::MessageParser<FEConfig> _parser = new pb::MessageParser<FEConfig>(() => new FEConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEConfig(FEConfig other) : this() {
      httpPort_ = other.httpPort_;
      SessionKey = other.sessionKey_ != null ? other.SessionKey.Clone() : null;
      sessionTimeoutSecs_ = other.sessionTimeoutSecs_;
      goMaxProcs_ = other.goMaxProcs_;
      jsonAccessLogPath_ = other.jsonAccessLogPath_;
      MonitorConfig = other.monitorConfig_ != null ? other.MonitorConfig.Clone() : null;
      RedisConfig = other.redisConfig_ != null ? other.RedisConfig.Clone() : null;
      ContentConfig = other.contentConfig_ != null ? other.ContentConfig.Clone() : null;
      BackendConfig = other.backendConfig_ != null ? other.BackendConfig.Clone() : null;
      Vanilla = other.vanilla_ != null ? other.Vanilla.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEConfig Clone() {
      return new FEConfig(this);
    }

    /// <summary>Field number for the "http_port" field.</summary>
    public const int HttpPortFieldNumber = 1;
    private int httpPort_;
    /// <summary>
    /// Port to listen on for HTTP requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HttpPort {
      get { return httpPort_; }
      set {
        httpPort_ = value;
      }
    }

    /// <summary>Field number for the "session_key" field.</summary>
    public const int SessionKeyFieldNumber = 2;
    private global::Tbadmin.SessionAuthKey sessionKey_;
    /// <summary>
    /// Session key(s) to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.SessionAuthKey SessionKey {
      get { return sessionKey_; }
      set {
        sessionKey_ = value;
      }
    }

    /// <summary>Field number for the "session_timeout_secs" field.</summary>
    public const int SessionTimeoutSecsFieldNumber = 3;
    private int sessionTimeoutSecs_;
    /// <summary>
    /// Number of seconds after which idle sessions will
    /// expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionTimeoutSecs {
      get { return sessionTimeoutSecs_; }
      set {
        sessionTimeoutSecs_ = value;
      }
    }

    /// <summary>Field number for the "go_max_procs" field.</summary>
    public const int GoMaxProcsFieldNumber = 4;
    private int goMaxProcs_;
    /// <summary>
    /// Number of cores Go runtime should use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoMaxProcs {
      get { return goMaxProcs_; }
      set {
        goMaxProcs_ = value;
      }
    }

    /// <summary>Field number for the "json_access_log_path" field.</summary>
    public const int JsonAccessLogPathFieldNumber = 5;
    private string jsonAccessLogPath_ = "";
    /// <summary>
    /// Where to write access records in JSON format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonAccessLogPath {
      get { return jsonAccessLogPath_; }
      set {
        jsonAccessLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monitor_config" field.</summary>
    public const int MonitorConfigFieldNumber = 10;
    private global::Tbadmin.MonitorConfig monitorConfig_;
    /// <summary>
    /// Monitoring configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.MonitorConfig MonitorConfig {
      get { return monitorConfig_; }
      set {
        monitorConfig_ = value;
      }
    }

    /// <summary>Field number for the "redis_config" field.</summary>
    public const int RedisConfigFieldNumber = 60;
    private global::Tbadmin.RedisConfig redisConfig_;
    /// <summary>
    /// How to talk to Redis for sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.RedisConfig RedisConfig {
      get { return redisConfig_; }
      set {
        redisConfig_ = value;
      }
    }

    /// <summary>Field number for the "content_config" field.</summary>
    public const int ContentConfigFieldNumber = 61;
    private global::Tbadmin.FEContentConfig contentConfig_;
    /// <summary>
    /// Where to find and how to serve dynamic HTML content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.FEContentConfig ContentConfig {
      get { return contentConfig_; }
      set {
        contentConfig_ = value;
      }
    }

    /// <summary>Field number for the "backend_config" field.</summary>
    public const int BackendConfigFieldNumber = 62;
    private global::Tbadmin.FEBackendConfig backendConfig_;
    /// <summary>
    /// Where to reach backend API servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.FEBackendConfig BackendConfig {
      get { return backendConfig_; }
      set {
        backendConfig_ = value;
      }
    }

    /// <summary>Field number for the "vanilla" field.</summary>
    public const int VanillaFieldNumber = 70;
    private global::Tbadmin.VanillaJSConnectConfig vanilla_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.VanillaJSConnectConfig Vanilla {
      get { return vanilla_; }
      set {
        vanilla_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpPort != other.HttpPort) return false;
      if (!object.Equals(SessionKey, other.SessionKey)) return false;
      if (SessionTimeoutSecs != other.SessionTimeoutSecs) return false;
      if (GoMaxProcs != other.GoMaxProcs) return false;
      if (JsonAccessLogPath != other.JsonAccessLogPath) return false;
      if (!object.Equals(MonitorConfig, other.MonitorConfig)) return false;
      if (!object.Equals(RedisConfig, other.RedisConfig)) return false;
      if (!object.Equals(ContentConfig, other.ContentConfig)) return false;
      if (!object.Equals(BackendConfig, other.BackendConfig)) return false;
      if (!object.Equals(Vanilla, other.Vanilla)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpPort != 0) hash ^= HttpPort.GetHashCode();
      if (sessionKey_ != null) hash ^= SessionKey.GetHashCode();
      if (SessionTimeoutSecs != 0) hash ^= SessionTimeoutSecs.GetHashCode();
      if (GoMaxProcs != 0) hash ^= GoMaxProcs.GetHashCode();
      if (JsonAccessLogPath.Length != 0) hash ^= JsonAccessLogPath.GetHashCode();
      if (monitorConfig_ != null) hash ^= MonitorConfig.GetHashCode();
      if (redisConfig_ != null) hash ^= RedisConfig.GetHashCode();
      if (contentConfig_ != null) hash ^= ContentConfig.GetHashCode();
      if (backendConfig_ != null) hash ^= BackendConfig.GetHashCode();
      if (vanilla_ != null) hash ^= Vanilla.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpPort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HttpPort);
      }
      if (sessionKey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SessionKey);
      }
      if (SessionTimeoutSecs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SessionTimeoutSecs);
      }
      if (GoMaxProcs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GoMaxProcs);
      }
      if (JsonAccessLogPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(JsonAccessLogPath);
      }
      if (monitorConfig_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MonitorConfig);
      }
      if (redisConfig_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(RedisConfig);
      }
      if (contentConfig_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(ContentConfig);
      }
      if (backendConfig_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(BackendConfig);
      }
      if (vanilla_ != null) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(Vanilla);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HttpPort);
      }
      if (sessionKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionKey);
      }
      if (SessionTimeoutSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionTimeoutSecs);
      }
      if (GoMaxProcs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoMaxProcs);
      }
      if (JsonAccessLogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonAccessLogPath);
      }
      if (monitorConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonitorConfig);
      }
      if (redisConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RedisConfig);
      }
      if (contentConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContentConfig);
      }
      if (backendConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackendConfig);
      }
      if (vanilla_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vanilla);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEConfig other) {
      if (other == null) {
        return;
      }
      if (other.HttpPort != 0) {
        HttpPort = other.HttpPort;
      }
      if (other.sessionKey_ != null) {
        if (sessionKey_ == null) {
          sessionKey_ = new global::Tbadmin.SessionAuthKey();
        }
        SessionKey.MergeFrom(other.SessionKey);
      }
      if (other.SessionTimeoutSecs != 0) {
        SessionTimeoutSecs = other.SessionTimeoutSecs;
      }
      if (other.GoMaxProcs != 0) {
        GoMaxProcs = other.GoMaxProcs;
      }
      if (other.JsonAccessLogPath.Length != 0) {
        JsonAccessLogPath = other.JsonAccessLogPath;
      }
      if (other.monitorConfig_ != null) {
        if (monitorConfig_ == null) {
          monitorConfig_ = new global::Tbadmin.MonitorConfig();
        }
        MonitorConfig.MergeFrom(other.MonitorConfig);
      }
      if (other.redisConfig_ != null) {
        if (redisConfig_ == null) {
          redisConfig_ = new global::Tbadmin.RedisConfig();
        }
        RedisConfig.MergeFrom(other.RedisConfig);
      }
      if (other.contentConfig_ != null) {
        if (contentConfig_ == null) {
          contentConfig_ = new global::Tbadmin.FEContentConfig();
        }
        ContentConfig.MergeFrom(other.ContentConfig);
      }
      if (other.backendConfig_ != null) {
        if (backendConfig_ == null) {
          backendConfig_ = new global::Tbadmin.FEBackendConfig();
        }
        BackendConfig.MergeFrom(other.BackendConfig);
      }
      if (other.vanilla_ != null) {
        if (vanilla_ == null) {
          vanilla_ = new global::Tbadmin.VanillaJSConnectConfig();
        }
        Vanilla.MergeFrom(other.Vanilla);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HttpPort = input.ReadInt32();
            break;
          }
          case 18: {
            if (sessionKey_ == null) {
              sessionKey_ = new global::Tbadmin.SessionAuthKey();
            }
            input.ReadMessage(sessionKey_);
            break;
          }
          case 24: {
            SessionTimeoutSecs = input.ReadInt32();
            break;
          }
          case 32: {
            GoMaxProcs = input.ReadInt32();
            break;
          }
          case 42: {
            JsonAccessLogPath = input.ReadString();
            break;
          }
          case 82: {
            if (monitorConfig_ == null) {
              monitorConfig_ = new global::Tbadmin.MonitorConfig();
            }
            input.ReadMessage(monitorConfig_);
            break;
          }
          case 482: {
            if (redisConfig_ == null) {
              redisConfig_ = new global::Tbadmin.RedisConfig();
            }
            input.ReadMessage(redisConfig_);
            break;
          }
          case 490: {
            if (contentConfig_ == null) {
              contentConfig_ = new global::Tbadmin.FEContentConfig();
            }
            input.ReadMessage(contentConfig_);
            break;
          }
          case 498: {
            if (backendConfig_ == null) {
              backendConfig_ = new global::Tbadmin.FEBackendConfig();
            }
            input.ReadMessage(backendConfig_);
            break;
          }
          case 562: {
            if (vanilla_ == null) {
              vanilla_ = new global::Tbadmin.VanillaJSConnectConfig();
            }
            input.ReadMessage(vanilla_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchMonConfig : pb::IMessage<MatchMonConfig> {
    private static readonly pb::MessageParser<MatchMonConfig> _parser = new pb::MessageParser<MatchMonConfig>(() => new MatchMonConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchMonConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tbadmin.ConfigReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMonConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMonConfig(MatchMonConfig other) : this() {
      httpPort_ = other.httpPort_;
      dataDir_ = other.dataDir_;
      staticDir_ = other.staticDir_;
      geoipDir_ = other.geoipDir_;
      msgDir_ = other.msgDir_;
      sessionDir_ = other.sessionDir_;
      DesyncStorage = other.desyncStorage_ != null ? other.DesyncStorage.Clone() : null;
      CrashStorage = other.crashStorage_ != null ? other.CrashStorage.Clone() : null;
      BackendConfig = other.backendConfig_ != null ? other.BackendConfig.Clone() : null;
      pollIntervalSec_ = other.pollIntervalSec_;
      sessionCountMaxAgeSec_ = other.sessionCountMaxAgeSec_;
      sessionResultLimit_ = other.sessionResultLimit_;
      lobbyResultLimit_ = other.lobbyResultLimit_;
      activeMatchResultLimit_ = other.activeMatchResultLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMonConfig Clone() {
      return new MatchMonConfig(this);
    }

    /// <summary>Field number for the "http_port" field.</summary>
    public const int HttpPortFieldNumber = 1;
    private int httpPort_;
    /// <summary>
    /// Port to listen on for HTTP requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HttpPort {
      get { return httpPort_; }
      set {
        httpPort_ = value;
      }
    }

    /// <summary>Field number for the "data_dir" field.</summary>
    public const int DataDirFieldNumber = 3;
    private string dataDir_ = "";
    /// <summary>
    /// Directory containing templates and include files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDir {
      get { return dataDir_; }
      set {
        dataDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "static_dir" field.</summary>
    public const int StaticDirFieldNumber = 4;
    private string staticDir_ = "";
    /// <summary>
    /// Directory containing static content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StaticDir {
      get { return staticDir_; }
      set {
        staticDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "geoip_dir" field.</summary>
    public const int GeoipDirFieldNumber = 6;
    private string geoipDir_ = "";
    /// <summary>
    /// Where to find GeoIP.dat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeoipDir {
      get { return geoipDir_; }
      set {
        geoipDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_dir" field.</summary>
    public const int MsgDirFieldNumber = 7;
    private string msgDir_ = "";
    /// <summary>
    /// Where to load localization resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgDir {
      get { return msgDir_; }
      set {
        msgDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_dir" field.</summary>
    public const int SessionDirFieldNumber = 8;
    private string sessionDir_ = "";
    /// <summary>
    /// Where to persist sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionDir {
      get { return sessionDir_; }
      set {
        sessionDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desync_storage" field.</summary>
    public const int DesyncStorageFieldNumber = 11;
    private global::Tbadmin.GcsStorageConfig desyncStorage_;
    /// <summary>
    /// Where desyncs are stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GcsStorageConfig DesyncStorage {
      get { return desyncStorage_; }
      set {
        desyncStorage_ = value;
      }
    }

    /// <summary>Field number for the "crash_storage" field.</summary>
    public const int CrashStorageFieldNumber = 12;
    private global::Tbadmin.GcsStorageConfig crashStorage_;
    /// <summary>
    /// Where crash information is stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.GcsStorageConfig CrashStorage {
      get { return crashStorage_; }
      set {
        crashStorage_ = value;
      }
    }

    /// <summary>Field number for the "backend_config" field.</summary>
    public const int BackendConfigFieldNumber = 13;
    private global::Tbadmin.FEBackendConfig backendConfig_;
    /// <summary>
    /// Where to reach backend API servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tbadmin.FEBackendConfig BackendConfig {
      get { return backendConfig_; }
      set {
        backendConfig_ = value;
      }
    }

    /// <summary>Field number for the "poll_interval_sec" field.</summary>
    public const int PollIntervalSecFieldNumber = 21;
    private int pollIntervalSec_;
    /// <summary>
    /// How often to run statistical queries in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PollIntervalSec {
      get { return pollIntervalSec_; }
      set {
        pollIntervalSec_ = value;
      }
    }

    /// <summary>Field number for the "session_count_max_age_sec" field.</summary>
    public const int SessionCountMaxAgeSecFieldNumber = 31;
    private int sessionCountMaxAgeSec_;
    /// <summary>
    /// Time cut-off for considering a session active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionCountMaxAgeSec {
      get { return sessionCountMaxAgeSec_; }
      set {
        sessionCountMaxAgeSec_ = value;
      }
    }

    /// <summary>Field number for the "session_result_limit" field.</summary>
    public const int SessionResultLimitFieldNumber = 32;
    private int sessionResultLimit_;
    /// <summary>
    /// Max # of results to pull from the recent session table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionResultLimit {
      get { return sessionResultLimit_; }
      set {
        sessionResultLimit_ = value;
      }
    }

    /// <summary>Field number for the "lobby_result_limit" field.</summary>
    public const int LobbyResultLimitFieldNumber = 41;
    private int lobbyResultLimit_;
    /// <summary>
    /// Max # of lobbies to pull from active lobbies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyResultLimit {
      get { return lobbyResultLimit_; }
      set {
        lobbyResultLimit_ = value;
      }
    }

    /// <summary>Field number for the "active_match_result_limit" field.</summary>
    public const int ActiveMatchResultLimitFieldNumber = 42;
    private int activeMatchResultLimit_;
    /// <summary>
    /// Max # of active matches to retrieve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveMatchResultLimit {
      get { return activeMatchResultLimit_; }
      set {
        activeMatchResultLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchMonConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchMonConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpPort != other.HttpPort) return false;
      if (DataDir != other.DataDir) return false;
      if (StaticDir != other.StaticDir) return false;
      if (GeoipDir != other.GeoipDir) return false;
      if (MsgDir != other.MsgDir) return false;
      if (SessionDir != other.SessionDir) return false;
      if (!object.Equals(DesyncStorage, other.DesyncStorage)) return false;
      if (!object.Equals(CrashStorage, other.CrashStorage)) return false;
      if (!object.Equals(BackendConfig, other.BackendConfig)) return false;
      if (PollIntervalSec != other.PollIntervalSec) return false;
      if (SessionCountMaxAgeSec != other.SessionCountMaxAgeSec) return false;
      if (SessionResultLimit != other.SessionResultLimit) return false;
      if (LobbyResultLimit != other.LobbyResultLimit) return false;
      if (ActiveMatchResultLimit != other.ActiveMatchResultLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpPort != 0) hash ^= HttpPort.GetHashCode();
      if (DataDir.Length != 0) hash ^= DataDir.GetHashCode();
      if (StaticDir.Length != 0) hash ^= StaticDir.GetHashCode();
      if (GeoipDir.Length != 0) hash ^= GeoipDir.GetHashCode();
      if (MsgDir.Length != 0) hash ^= MsgDir.GetHashCode();
      if (SessionDir.Length != 0) hash ^= SessionDir.GetHashCode();
      if (desyncStorage_ != null) hash ^= DesyncStorage.GetHashCode();
      if (crashStorage_ != null) hash ^= CrashStorage.GetHashCode();
      if (backendConfig_ != null) hash ^= BackendConfig.GetHashCode();
      if (PollIntervalSec != 0) hash ^= PollIntervalSec.GetHashCode();
      if (SessionCountMaxAgeSec != 0) hash ^= SessionCountMaxAgeSec.GetHashCode();
      if (SessionResultLimit != 0) hash ^= SessionResultLimit.GetHashCode();
      if (LobbyResultLimit != 0) hash ^= LobbyResultLimit.GetHashCode();
      if (ActiveMatchResultLimit != 0) hash ^= ActiveMatchResultLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpPort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HttpPort);
      }
      if (DataDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataDir);
      }
      if (StaticDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StaticDir);
      }
      if (GeoipDir.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GeoipDir);
      }
      if (MsgDir.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MsgDir);
      }
      if (SessionDir.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SessionDir);
      }
      if (desyncStorage_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DesyncStorage);
      }
      if (crashStorage_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CrashStorage);
      }
      if (backendConfig_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(BackendConfig);
      }
      if (PollIntervalSec != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PollIntervalSec);
      }
      if (SessionCountMaxAgeSec != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SessionCountMaxAgeSec);
      }
      if (SessionResultLimit != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(SessionResultLimit);
      }
      if (LobbyResultLimit != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(LobbyResultLimit);
      }
      if (ActiveMatchResultLimit != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(ActiveMatchResultLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HttpPort);
      }
      if (DataDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDir);
      }
      if (StaticDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StaticDir);
      }
      if (GeoipDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeoipDir);
      }
      if (MsgDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgDir);
      }
      if (SessionDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionDir);
      }
      if (desyncStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesyncStorage);
      }
      if (crashStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrashStorage);
      }
      if (backendConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackendConfig);
      }
      if (PollIntervalSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PollIntervalSec);
      }
      if (SessionCountMaxAgeSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionCountMaxAgeSec);
      }
      if (SessionResultLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionResultLimit);
      }
      if (LobbyResultLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LobbyResultLimit);
      }
      if (ActiveMatchResultLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveMatchResultLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchMonConfig other) {
      if (other == null) {
        return;
      }
      if (other.HttpPort != 0) {
        HttpPort = other.HttpPort;
      }
      if (other.DataDir.Length != 0) {
        DataDir = other.DataDir;
      }
      if (other.StaticDir.Length != 0) {
        StaticDir = other.StaticDir;
      }
      if (other.GeoipDir.Length != 0) {
        GeoipDir = other.GeoipDir;
      }
      if (other.MsgDir.Length != 0) {
        MsgDir = other.MsgDir;
      }
      if (other.SessionDir.Length != 0) {
        SessionDir = other.SessionDir;
      }
      if (other.desyncStorage_ != null) {
        if (desyncStorage_ == null) {
          desyncStorage_ = new global::Tbadmin.GcsStorageConfig();
        }
        DesyncStorage.MergeFrom(other.DesyncStorage);
      }
      if (other.crashStorage_ != null) {
        if (crashStorage_ == null) {
          crashStorage_ = new global::Tbadmin.GcsStorageConfig();
        }
        CrashStorage.MergeFrom(other.CrashStorage);
      }
      if (other.backendConfig_ != null) {
        if (backendConfig_ == null) {
          backendConfig_ = new global::Tbadmin.FEBackendConfig();
        }
        BackendConfig.MergeFrom(other.BackendConfig);
      }
      if (other.PollIntervalSec != 0) {
        PollIntervalSec = other.PollIntervalSec;
      }
      if (other.SessionCountMaxAgeSec != 0) {
        SessionCountMaxAgeSec = other.SessionCountMaxAgeSec;
      }
      if (other.SessionResultLimit != 0) {
        SessionResultLimit = other.SessionResultLimit;
      }
      if (other.LobbyResultLimit != 0) {
        LobbyResultLimit = other.LobbyResultLimit;
      }
      if (other.ActiveMatchResultLimit != 0) {
        ActiveMatchResultLimit = other.ActiveMatchResultLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HttpPort = input.ReadInt32();
            break;
          }
          case 26: {
            DataDir = input.ReadString();
            break;
          }
          case 34: {
            StaticDir = input.ReadString();
            break;
          }
          case 50: {
            GeoipDir = input.ReadString();
            break;
          }
          case 58: {
            MsgDir = input.ReadString();
            break;
          }
          case 66: {
            SessionDir = input.ReadString();
            break;
          }
          case 90: {
            if (desyncStorage_ == null) {
              desyncStorage_ = new global::Tbadmin.GcsStorageConfig();
            }
            input.ReadMessage(desyncStorage_);
            break;
          }
          case 98: {
            if (crashStorage_ == null) {
              crashStorage_ = new global::Tbadmin.GcsStorageConfig();
            }
            input.ReadMessage(crashStorage_);
            break;
          }
          case 106: {
            if (backendConfig_ == null) {
              backendConfig_ = new global::Tbadmin.FEBackendConfig();
            }
            input.ReadMessage(backendConfig_);
            break;
          }
          case 168: {
            PollIntervalSec = input.ReadInt32();
            break;
          }
          case 248: {
            SessionCountMaxAgeSec = input.ReadInt32();
            break;
          }
          case 256: {
            SessionResultLimit = input.ReadInt32();
            break;
          }
          case 328: {
            LobbyResultLimit = input.ReadInt32();
            break;
          }
          case 336: {
            ActiveMatchResultLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
